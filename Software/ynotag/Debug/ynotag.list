
ynotag.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b6c  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000604  08003c28  08003c28  00004c28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800422c  0800422c  0000605c  2**0
                  CONTENTS
  4 .ARM          00000000  0800422c  0800422c  0000605c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800422c  0800422c  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800422c  0800422c  0000522c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004230  08004230  00005230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004234  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000298  2000005c  08004290  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002f4  08004290  000062f4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dd6f  00000000  00000000  00006084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002535  00000000  00000000  00013df3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d60  00000000  00000000  00016328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a4b  00000000  00000000  00017088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e33c  00000000  00000000  00017ad3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012148  00000000  00000000  00035e0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c14ec  00000000  00000000  00047f57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00109443  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003414  00000000  00000000  00109488  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  0010c89c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000005c 	.word	0x2000005c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08003c10 	.word	0x08003c10

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000060 	.word	0x20000060
 8000100:	08003c10 	.word	0x08003c10

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	@ 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			@ (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			@ (mov r8, r8)

08000230 <_ADXL343_ReadReg8>:
#define _ADXL343ADDR 0x14
#endif

// private helpers
int _ADXL343_ReadReg8 (unsigned char TargetRegister, unsigned char * TargetValue)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b082      	sub	sp, #8
 8000234:	af00      	add	r7, sp, #0
 8000236:	0002      	movs	r2, r0
 8000238:	6039      	str	r1, [r7, #0]
 800023a:	1dfb      	adds	r3, r7, #7
 800023c:	701a      	strb	r2, [r3, #0]
  if (_I2C1_StartWrite(_ADXL343ADDR, 1, &TargetRegister, _I2C_AutoEnd_Software))
 800023e:	1dfa      	adds	r2, r7, #7
 8000240:	2300      	movs	r3, #0
 8000242:	2101      	movs	r1, #1
 8000244:	2014      	movs	r0, #20
 8000246:	f000 fd75 	bl	8000d34 <_I2C1_StartWrite>
 800024a:	1e03      	subs	r3, r0, #0
 800024c:	d002      	beq.n	8000254 <_ADXL343_ReadReg8+0x24>
      return -1;
 800024e:	2301      	movs	r3, #1
 8000250:	425b      	negs	r3, r3
 8000252:	e00b      	b.n	800026c <_ADXL343_ReadReg8+0x3c>

  if (_I2C1_StartRead (_ADXL343ADDR, 1, TargetValue, _I2C_AutoEnd_Hardware))
 8000254:	683a      	ldr	r2, [r7, #0]
 8000256:	2301      	movs	r3, #1
 8000258:	2101      	movs	r1, #1
 800025a:	2014      	movs	r0, #20
 800025c:	f000 fcf2 	bl	8000c44 <_I2C1_StartRead>
 8000260:	1e03      	subs	r3, r0, #0
 8000262:	d002      	beq.n	800026a <_ADXL343_ReadReg8+0x3a>
    return -2;
 8000264:	2302      	movs	r3, #2
 8000266:	425b      	negs	r3, r3
 8000268:	e000      	b.n	800026c <_ADXL343_ReadReg8+0x3c>
  
  return 0;
 800026a:	2300      	movs	r3, #0
}
 800026c:	0018      	movs	r0, r3
 800026e:	46bd      	mov	sp, r7
 8000270:	b002      	add	sp, #8
 8000272:	bd80      	pop	{r7, pc}

08000274 <_ADXL343_WriteReg8>:

int _ADXL343_WriteReg8 (unsigned char TargetRegister, unsigned char TargetValue)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b084      	sub	sp, #16
 8000278:	af00      	add	r7, sp, #0
 800027a:	0002      	movs	r2, r0
 800027c:	1dfb      	adds	r3, r7, #7
 800027e:	701a      	strb	r2, [r3, #0]
 8000280:	1dbb      	adds	r3, r7, #6
 8000282:	1c0a      	adds	r2, r1, #0
 8000284:	701a      	strb	r2, [r3, #0]
  unsigned char buff [2];
  buff[0] = TargetRegister;
 8000286:	210c      	movs	r1, #12
 8000288:	187b      	adds	r3, r7, r1
 800028a:	1dfa      	adds	r2, r7, #7
 800028c:	7812      	ldrb	r2, [r2, #0]
 800028e:	701a      	strb	r2, [r3, #0]
  buff[1] = TargetValue;
 8000290:	187b      	adds	r3, r7, r1
 8000292:	1dba      	adds	r2, r7, #6
 8000294:	7812      	ldrb	r2, [r2, #0]
 8000296:	705a      	strb	r2, [r3, #1]

  if (_I2C1_StartWrite(_ADXL343ADDR, 2, buff, _I2C_AutoEnd_Hardware))
 8000298:	187a      	adds	r2, r7, r1
 800029a:	2301      	movs	r3, #1
 800029c:	2102      	movs	r1, #2
 800029e:	2014      	movs	r0, #20
 80002a0:	f000 fd48 	bl	8000d34 <_I2C1_StartWrite>
 80002a4:	1e03      	subs	r3, r0, #0
 80002a6:	d002      	beq.n	80002ae <_ADXL343_WriteReg8+0x3a>
      return -1;
 80002a8:	2301      	movs	r3, #1
 80002aa:	425b      	negs	r3, r3
 80002ac:	e000      	b.n	80002b0 <_ADXL343_WriteReg8+0x3c>

  return 0;
 80002ae:	2300      	movs	r3, #0
}
 80002b0:	0018      	movs	r0, r3
 80002b2:	46bd      	mov	sp, r7
 80002b4:	b004      	add	sp, #16
 80002b6:	bd80      	pop	{r7, pc}

080002b8 <drawPixel>:
extern uint8_t _rowstart;       ///< Some displays need this changed to offset
extern uint8_t _xstart;
extern uint8_t _ystart;

void drawPixel(int16_t x, int16_t y, uint16_t color)
{
 80002b8:	b590      	push	{r4, r7, lr}
 80002ba:	b083      	sub	sp, #12
 80002bc:	af00      	add	r7, sp, #0
 80002be:	0004      	movs	r4, r0
 80002c0:	0008      	movs	r0, r1
 80002c2:	0011      	movs	r1, r2
 80002c4:	1dbb      	adds	r3, r7, #6
 80002c6:	1c22      	adds	r2, r4, #0
 80002c8:	801a      	strh	r2, [r3, #0]
 80002ca:	1d3b      	adds	r3, r7, #4
 80002cc:	1c02      	adds	r2, r0, #0
 80002ce:	801a      	strh	r2, [r3, #0]
 80002d0:	1cbb      	adds	r3, r7, #2
 80002d2:	1c0a      	adds	r2, r1, #0
 80002d4:	801a      	strh	r2, [r3, #0]
	ST7735_DrawPixel(x, y, color);
 80002d6:	1dbb      	adds	r3, r7, #6
 80002d8:	8818      	ldrh	r0, [r3, #0]
 80002da:	1d3b      	adds	r3, r7, #4
 80002dc:	8819      	ldrh	r1, [r3, #0]
 80002de:	1cbb      	adds	r3, r7, #2
 80002e0:	881b      	ldrh	r3, [r3, #0]
 80002e2:	001a      	movs	r2, r3
 80002e4:	f000 fba4 	bl	8000a30 <ST7735_DrawPixel>
}
 80002e8:	46c0      	nop			@ (mov r8, r8)
 80002ea:	46bd      	mov	sp, r7
 80002ec:	b003      	add	sp, #12
 80002ee:	bd90      	pop	{r4, r7, pc}

080002f0 <fillRect>:

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 80002f0:	b5b0      	push	{r4, r5, r7, lr}
 80002f2:	b084      	sub	sp, #16
 80002f4:	af02      	add	r7, sp, #8
 80002f6:	0005      	movs	r5, r0
 80002f8:	000c      	movs	r4, r1
 80002fa:	0010      	movs	r0, r2
 80002fc:	0019      	movs	r1, r3
 80002fe:	1dbb      	adds	r3, r7, #6
 8000300:	1c2a      	adds	r2, r5, #0
 8000302:	801a      	strh	r2, [r3, #0]
 8000304:	1d3b      	adds	r3, r7, #4
 8000306:	1c22      	adds	r2, r4, #0
 8000308:	801a      	strh	r2, [r3, #0]
 800030a:	1cbb      	adds	r3, r7, #2
 800030c:	1c02      	adds	r2, r0, #0
 800030e:	801a      	strh	r2, [r3, #0]
 8000310:	003b      	movs	r3, r7
 8000312:	1c0a      	adds	r2, r1, #0
 8000314:	801a      	strh	r2, [r3, #0]
	ST7735_FillRectangle(x, y, w, h, color);
 8000316:	1dbb      	adds	r3, r7, #6
 8000318:	8818      	ldrh	r0, [r3, #0]
 800031a:	1d3b      	adds	r3, r7, #4
 800031c:	8819      	ldrh	r1, [r3, #0]
 800031e:	1cbb      	adds	r3, r7, #2
 8000320:	881a      	ldrh	r2, [r3, #0]
 8000322:	003b      	movs	r3, r7
 8000324:	881c      	ldrh	r4, [r3, #0]
 8000326:	2318      	movs	r3, #24
 8000328:	18fb      	adds	r3, r7, r3
 800032a:	881b      	ldrh	r3, [r3, #0]
 800032c:	9300      	str	r3, [sp, #0]
 800032e:	0023      	movs	r3, r4
 8000330:	f000 fbcc 	bl	8000acc <ST7735_FillRectangle>
}
 8000334:	46c0      	nop			@ (mov r8, r8)
 8000336:	46bd      	mov	sp, r7
 8000338:	b002      	add	sp, #8
 800033a:	bdb0      	pop	{r4, r5, r7, pc}

0800033c <writePixel>:

#define min(a, b) (((a) < (b)) ? (a) : (b))


void writePixel(int16_t x, int16_t y, uint16_t color)
{
 800033c:	b590      	push	{r4, r7, lr}
 800033e:	b083      	sub	sp, #12
 8000340:	af00      	add	r7, sp, #0
 8000342:	0004      	movs	r4, r0
 8000344:	0008      	movs	r0, r1
 8000346:	0011      	movs	r1, r2
 8000348:	1dbb      	adds	r3, r7, #6
 800034a:	1c22      	adds	r2, r4, #0
 800034c:	801a      	strh	r2, [r3, #0]
 800034e:	1d3b      	adds	r3, r7, #4
 8000350:	1c02      	adds	r2, r0, #0
 8000352:	801a      	strh	r2, [r3, #0]
 8000354:	1cbb      	adds	r3, r7, #2
 8000356:	1c0a      	adds	r2, r1, #0
 8000358:	801a      	strh	r2, [r3, #0]
    drawPixel(x, y, color);
 800035a:	1cbb      	adds	r3, r7, #2
 800035c:	881a      	ldrh	r2, [r3, #0]
 800035e:	1d3b      	adds	r3, r7, #4
 8000360:	2100      	movs	r1, #0
 8000362:	5e59      	ldrsh	r1, [r3, r1]
 8000364:	1dbb      	adds	r3, r7, #6
 8000366:	2000      	movs	r0, #0
 8000368:	5e1b      	ldrsh	r3, [r3, r0]
 800036a:	0018      	movs	r0, r3
 800036c:	f7ff ffa4 	bl	80002b8 <drawPixel>
}
 8000370:	46c0      	nop			@ (mov r8, r8)
 8000372:	46bd      	mov	sp, r7
 8000374:	b003      	add	sp, #12
 8000376:	bd90      	pop	{r4, r7, pc}

08000378 <drawString>:
    } else {
        writeLine(x0, y0, x1, y1, color);
    }
}
void drawString(int16_t x, int16_t y, char* c, int16_t textColor, int16_t bgColor, uint8_t size, uint8_t spacing)
{
 8000378:	b5f0      	push	{r4, r5, r6, r7, lr}
 800037a:	b089      	sub	sp, #36	@ 0x24
 800037c:	af02      	add	r7, sp, #8
 800037e:	0004      	movs	r4, r0
 8000380:	0008      	movs	r0, r1
 8000382:	60ba      	str	r2, [r7, #8]
 8000384:	0019      	movs	r1, r3
 8000386:	230e      	movs	r3, #14
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	1c22      	adds	r2, r4, #0
 800038c:	801a      	strh	r2, [r3, #0]
 800038e:	230c      	movs	r3, #12
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	1c02      	adds	r2, r0, #0
 8000394:	801a      	strh	r2, [r3, #0]
 8000396:	1dbb      	adds	r3, r7, #6
 8000398:	1c0a      	adds	r2, r1, #0
 800039a:	801a      	strh	r2, [r3, #0]
	uint16_t i =0;
 800039c:	2316      	movs	r3, #22
 800039e:	18fb      	adds	r3, r7, r3
 80003a0:	2200      	movs	r2, #0
 80003a2:	801a      	strh	r2, [r3, #0]

	while(c[i])
 80003a4:	e03f      	b.n	8000426 <drawString+0xae>
	{
		drawChar(x, y, c[i], textColor, bgColor, size);
 80003a6:	2516      	movs	r5, #22
 80003a8:	197b      	adds	r3, r7, r5
 80003aa:	881b      	ldrh	r3, [r3, #0]
 80003ac:	68ba      	ldr	r2, [r7, #8]
 80003ae:	18d3      	adds	r3, r2, r3
 80003b0:	781b      	ldrb	r3, [r3, #0]
 80003b2:	469c      	mov	ip, r3
 80003b4:	1dbb      	adds	r3, r7, #6
 80003b6:	2400      	movs	r4, #0
 80003b8:	5f1c      	ldrsh	r4, [r3, r4]
 80003ba:	230c      	movs	r3, #12
 80003bc:	18fb      	adds	r3, r7, r3
 80003be:	2100      	movs	r1, #0
 80003c0:	5e59      	ldrsh	r1, [r3, r1]
 80003c2:	260e      	movs	r6, #14
 80003c4:	19bb      	adds	r3, r7, r6
 80003c6:	2000      	movs	r0, #0
 80003c8:	5e18      	ldrsh	r0, [r3, r0]
 80003ca:	232c      	movs	r3, #44	@ 0x2c
 80003cc:	2208      	movs	r2, #8
 80003ce:	189b      	adds	r3, r3, r2
 80003d0:	19db      	adds	r3, r3, r7
 80003d2:	781b      	ldrb	r3, [r3, #0]
 80003d4:	9301      	str	r3, [sp, #4]
 80003d6:	2328      	movs	r3, #40	@ 0x28
 80003d8:	189b      	adds	r3, r3, r2
 80003da:	19db      	adds	r3, r3, r7
 80003dc:	2200      	movs	r2, #0
 80003de:	5e9b      	ldrsh	r3, [r3, r2]
 80003e0:	9300      	str	r3, [sp, #0]
 80003e2:	0023      	movs	r3, r4
 80003e4:	4662      	mov	r2, ip
 80003e6:	f000 f82b 	bl	8000440 <drawChar>
		x+=(size*6)+spacing;
 80003ea:	232c      	movs	r3, #44	@ 0x2c
 80003ec:	2108      	movs	r1, #8
 80003ee:	185b      	adds	r3, r3, r1
 80003f0:	19db      	adds	r3, r3, r7
 80003f2:	781b      	ldrb	r3, [r3, #0]
 80003f4:	b29b      	uxth	r3, r3
 80003f6:	1c1a      	adds	r2, r3, #0
 80003f8:	1c13      	adds	r3, r2, #0
 80003fa:	18db      	adds	r3, r3, r3
 80003fc:	189b      	adds	r3, r3, r2
 80003fe:	18db      	adds	r3, r3, r3
 8000400:	b29a      	uxth	r2, r3
 8000402:	2330      	movs	r3, #48	@ 0x30
 8000404:	185b      	adds	r3, r3, r1
 8000406:	19db      	adds	r3, r3, r7
 8000408:	781b      	ldrb	r3, [r3, #0]
 800040a:	b29b      	uxth	r3, r3
 800040c:	18d3      	adds	r3, r2, r3
 800040e:	b29a      	uxth	r2, r3
 8000410:	19bb      	adds	r3, r7, r6
 8000412:	881b      	ldrh	r3, [r3, #0]
 8000414:	18d3      	adds	r3, r2, r3
 8000416:	b29a      	uxth	r2, r3
 8000418:	19bb      	adds	r3, r7, r6
 800041a:	801a      	strh	r2, [r3, #0]
		i++;
 800041c:	197b      	adds	r3, r7, r5
 800041e:	881a      	ldrh	r2, [r3, #0]
 8000420:	197b      	adds	r3, r7, r5
 8000422:	3201      	adds	r2, #1
 8000424:	801a      	strh	r2, [r3, #0]
	while(c[i])
 8000426:	2316      	movs	r3, #22
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	881b      	ldrh	r3, [r3, #0]
 800042c:	68ba      	ldr	r2, [r7, #8]
 800042e:	18d3      	adds	r3, r2, r3
 8000430:	781b      	ldrb	r3, [r3, #0]
 8000432:	2b00      	cmp	r3, #0
 8000434:	d1b7      	bne.n	80003a6 <drawString+0x2e>
	}
}
 8000436:	46c0      	nop			@ (mov r8, r8)
 8000438:	46c0      	nop			@ (mov r8, r8)
 800043a:	46bd      	mov	sp, r7
 800043c:	b007      	add	sp, #28
 800043e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000440 <drawChar>:
void drawChar(int16_t x, int16_t y, char c, int16_t textColor, int16_t bgColor, uint8_t size){
 8000440:	b5b0      	push	{r4, r5, r7, lr}
 8000442:	b088      	sub	sp, #32
 8000444:	af02      	add	r7, sp, #8
 8000446:	0005      	movs	r5, r0
 8000448:	000c      	movs	r4, r1
 800044a:	0010      	movs	r0, r2
 800044c:	0019      	movs	r1, r3
 800044e:	1dbb      	adds	r3, r7, #6
 8000450:	1c2a      	adds	r2, r5, #0
 8000452:	801a      	strh	r2, [r3, #0]
 8000454:	1d3b      	adds	r3, r7, #4
 8000456:	1c22      	adds	r2, r4, #0
 8000458:	801a      	strh	r2, [r3, #0]
 800045a:	1cfb      	adds	r3, r7, #3
 800045c:	1c02      	adds	r2, r0, #0
 800045e:	701a      	strb	r2, [r3, #0]
 8000460:	003b      	movs	r3, r7
 8000462:	1c0a      	adds	r2, r1, #0
 8000464:	801a      	strh	r2, [r3, #0]
  uint8_t line;
  int32_t i, j;
  if((x >= _width)            ||
 8000466:	4b74      	ldr	r3, [pc, #464]	@ (8000638 <drawChar+0x1f8>)
 8000468:	2200      	movs	r2, #0
 800046a:	5e9b      	ldrsh	r3, [r3, r2]
 800046c:	1dba      	adds	r2, r7, #6
 800046e:	2100      	movs	r1, #0
 8000470:	5e52      	ldrsh	r2, [r2, r1]
 8000472:	429a      	cmp	r2, r3
 8000474:	db00      	blt.n	8000478 <drawChar+0x38>
 8000476:	e0db      	b.n	8000630 <drawChar+0x1f0>
     (y >= _height)           ||
 8000478:	4b70      	ldr	r3, [pc, #448]	@ (800063c <drawChar+0x1fc>)
 800047a:	2200      	movs	r2, #0
 800047c:	5e9b      	ldrsh	r3, [r3, r2]
  if((x >= _width)            ||
 800047e:	1d3a      	adds	r2, r7, #4
 8000480:	2100      	movs	r1, #0
 8000482:	5e52      	ldrsh	r2, [r2, r1]
 8000484:	429a      	cmp	r2, r3
 8000486:	db00      	blt.n	800048a <drawChar+0x4a>
 8000488:	e0d2      	b.n	8000630 <drawChar+0x1f0>
     ((x + 5 * size - 1) < 0) ||
 800048a:	1dbb      	adds	r3, r7, #6
 800048c:	2100      	movs	r1, #0
 800048e:	5e59      	ldrsh	r1, [r3, r1]
 8000490:	202c      	movs	r0, #44	@ 0x2c
 8000492:	183b      	adds	r3, r7, r0
 8000494:	781a      	ldrb	r2, [r3, #0]
 8000496:	0013      	movs	r3, r2
 8000498:	009b      	lsls	r3, r3, #2
 800049a:	189b      	adds	r3, r3, r2
 800049c:	18cb      	adds	r3, r1, r3
     (y >= _height)           ||
 800049e:	2b00      	cmp	r3, #0
 80004a0:	dc00      	bgt.n	80004a4 <drawChar+0x64>
 80004a2:	e0c5      	b.n	8000630 <drawChar+0x1f0>
     ((y + 8 * size - 1) < 0))
 80004a4:	1d3b      	adds	r3, r7, #4
 80004a6:	2200      	movs	r2, #0
 80004a8:	5e9a      	ldrsh	r2, [r3, r2]
 80004aa:	183b      	adds	r3, r7, r0
 80004ac:	781b      	ldrb	r3, [r3, #0]
 80004ae:	00db      	lsls	r3, r3, #3
 80004b0:	18d3      	adds	r3, r2, r3
     ((x + 5 * size - 1) < 0) ||
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	dc00      	bgt.n	80004b8 <drawChar+0x78>
 80004b6:	e0bb      	b.n	8000630 <drawChar+0x1f0>
    return;

  for (i=0; i<6; i++ ) {
 80004b8:	2300      	movs	r3, #0
 80004ba:	613b      	str	r3, [r7, #16]
 80004bc:	e0b3      	b.n	8000626 <drawChar+0x1e6>
    if (i == 5)
 80004be:	693b      	ldr	r3, [r7, #16]
 80004c0:	2b05      	cmp	r3, #5
 80004c2:	d104      	bne.n	80004ce <drawChar+0x8e>
      line = 0x0;
 80004c4:	2317      	movs	r3, #23
 80004c6:	18fb      	adds	r3, r7, r3
 80004c8:	2200      	movs	r2, #0
 80004ca:	701a      	strb	r2, [r3, #0]
 80004cc:	e00b      	b.n	80004e6 <drawChar+0xa6>
    else
      line = Font[(c*5)+i];
 80004ce:	1cfb      	adds	r3, r7, #3
 80004d0:	781a      	ldrb	r2, [r3, #0]
 80004d2:	0013      	movs	r3, r2
 80004d4:	009b      	lsls	r3, r3, #2
 80004d6:	189a      	adds	r2, r3, r2
 80004d8:	693b      	ldr	r3, [r7, #16]
 80004da:	18d2      	adds	r2, r2, r3
 80004dc:	2317      	movs	r3, #23
 80004de:	18fb      	adds	r3, r7, r3
 80004e0:	4957      	ldr	r1, [pc, #348]	@ (8000640 <drawChar+0x200>)
 80004e2:	5c8a      	ldrb	r2, [r1, r2]
 80004e4:	701a      	strb	r2, [r3, #0]
    for (j = 0; j<8; j++) {
 80004e6:	2300      	movs	r3, #0
 80004e8:	60fb      	str	r3, [r7, #12]
 80004ea:	e095      	b.n	8000618 <drawChar+0x1d8>
      if (line & 0x1) {
 80004ec:	2317      	movs	r3, #23
 80004ee:	18fb      	adds	r3, r7, r3
 80004f0:	781b      	ldrb	r3, [r3, #0]
 80004f2:	2201      	movs	r2, #1
 80004f4:	4013      	ands	r3, r2
 80004f6:	d03e      	beq.n	8000576 <drawChar+0x136>
        if (size == 1)
 80004f8:	232c      	movs	r3, #44	@ 0x2c
 80004fa:	18fb      	adds	r3, r7, r3
 80004fc:	781b      	ldrb	r3, [r3, #0]
 80004fe:	2b01      	cmp	r3, #1
 8000500:	d113      	bne.n	800052a <drawChar+0xea>
          writePixel(x+i, y+j, textColor);
 8000502:	693b      	ldr	r3, [r7, #16]
 8000504:	b29a      	uxth	r2, r3
 8000506:	1dbb      	adds	r3, r7, #6
 8000508:	881b      	ldrh	r3, [r3, #0]
 800050a:	18d3      	adds	r3, r2, r3
 800050c:	b29b      	uxth	r3, r3
 800050e:	b218      	sxth	r0, r3
 8000510:	68fb      	ldr	r3, [r7, #12]
 8000512:	b29a      	uxth	r2, r3
 8000514:	1d3b      	adds	r3, r7, #4
 8000516:	881b      	ldrh	r3, [r3, #0]
 8000518:	18d3      	adds	r3, r2, r3
 800051a:	b29b      	uxth	r3, r3
 800051c:	b219      	sxth	r1, r3
 800051e:	003b      	movs	r3, r7
 8000520:	881b      	ldrh	r3, [r3, #0]
 8000522:	001a      	movs	r2, r3
 8000524:	f7ff ff0a 	bl	800033c <writePixel>
 8000528:	e06d      	b.n	8000606 <drawChar+0x1c6>
        else {
          fillRect(x+(i*size), y+(j*size), size, size, textColor);
 800052a:	242c      	movs	r4, #44	@ 0x2c
 800052c:	193b      	adds	r3, r7, r4
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	b29b      	uxth	r3, r3
 8000532:	693a      	ldr	r2, [r7, #16]
 8000534:	b292      	uxth	r2, r2
 8000536:	4353      	muls	r3, r2
 8000538:	b29a      	uxth	r2, r3
 800053a:	1dbb      	adds	r3, r7, #6
 800053c:	881b      	ldrh	r3, [r3, #0]
 800053e:	18d3      	adds	r3, r2, r3
 8000540:	b29b      	uxth	r3, r3
 8000542:	b218      	sxth	r0, r3
 8000544:	193b      	adds	r3, r7, r4
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	b29b      	uxth	r3, r3
 800054a:	68fa      	ldr	r2, [r7, #12]
 800054c:	b292      	uxth	r2, r2
 800054e:	4353      	muls	r3, r2
 8000550:	b29a      	uxth	r2, r3
 8000552:	1d3b      	adds	r3, r7, #4
 8000554:	881b      	ldrh	r3, [r3, #0]
 8000556:	18d3      	adds	r3, r2, r3
 8000558:	b29b      	uxth	r3, r3
 800055a:	b219      	sxth	r1, r3
 800055c:	193b      	adds	r3, r7, r4
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	b21a      	sxth	r2, r3
 8000562:	193b      	adds	r3, r7, r4
 8000564:	781b      	ldrb	r3, [r3, #0]
 8000566:	b21c      	sxth	r4, r3
 8000568:	003b      	movs	r3, r7
 800056a:	881b      	ldrh	r3, [r3, #0]
 800056c:	9300      	str	r3, [sp, #0]
 800056e:	0023      	movs	r3, r4
 8000570:	f7ff febe 	bl	80002f0 <fillRect>
 8000574:	e047      	b.n	8000606 <drawChar+0x1c6>
        }
      } else if (bgColor != textColor) {
 8000576:	2428      	movs	r4, #40	@ 0x28
 8000578:	193b      	adds	r3, r7, r4
 800057a:	0039      	movs	r1, r7
 800057c:	2200      	movs	r2, #0
 800057e:	5e9a      	ldrsh	r2, [r3, r2]
 8000580:	2300      	movs	r3, #0
 8000582:	5ecb      	ldrsh	r3, [r1, r3]
 8000584:	429a      	cmp	r2, r3
 8000586:	d03e      	beq.n	8000606 <drawChar+0x1c6>
        if (size == 1) // default size
 8000588:	232c      	movs	r3, #44	@ 0x2c
 800058a:	18fb      	adds	r3, r7, r3
 800058c:	781b      	ldrb	r3, [r3, #0]
 800058e:	2b01      	cmp	r3, #1
 8000590:	d113      	bne.n	80005ba <drawChar+0x17a>
          writePixel(x+i, y+j, bgColor);
 8000592:	693b      	ldr	r3, [r7, #16]
 8000594:	b29a      	uxth	r2, r3
 8000596:	1dbb      	adds	r3, r7, #6
 8000598:	881b      	ldrh	r3, [r3, #0]
 800059a:	18d3      	adds	r3, r2, r3
 800059c:	b29b      	uxth	r3, r3
 800059e:	b218      	sxth	r0, r3
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	b29a      	uxth	r2, r3
 80005a4:	1d3b      	adds	r3, r7, #4
 80005a6:	881b      	ldrh	r3, [r3, #0]
 80005a8:	18d3      	adds	r3, r2, r3
 80005aa:	b29b      	uxth	r3, r3
 80005ac:	b219      	sxth	r1, r3
 80005ae:	193b      	adds	r3, r7, r4
 80005b0:	881b      	ldrh	r3, [r3, #0]
 80005b2:	001a      	movs	r2, r3
 80005b4:	f7ff fec2 	bl	800033c <writePixel>
 80005b8:	e025      	b.n	8000606 <drawChar+0x1c6>
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bgColor);
 80005ba:	242c      	movs	r4, #44	@ 0x2c
 80005bc:	193b      	adds	r3, r7, r4
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	b29b      	uxth	r3, r3
 80005c2:	693a      	ldr	r2, [r7, #16]
 80005c4:	b292      	uxth	r2, r2
 80005c6:	4353      	muls	r3, r2
 80005c8:	b29a      	uxth	r2, r3
 80005ca:	1dbb      	adds	r3, r7, #6
 80005cc:	881b      	ldrh	r3, [r3, #0]
 80005ce:	18d3      	adds	r3, r2, r3
 80005d0:	b29b      	uxth	r3, r3
 80005d2:	b218      	sxth	r0, r3
 80005d4:	193b      	adds	r3, r7, r4
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	b29b      	uxth	r3, r3
 80005da:	68fa      	ldr	r2, [r7, #12]
 80005dc:	b292      	uxth	r2, r2
 80005de:	4353      	muls	r3, r2
 80005e0:	b29a      	uxth	r2, r3
 80005e2:	1d3b      	adds	r3, r7, #4
 80005e4:	881b      	ldrh	r3, [r3, #0]
 80005e6:	18d3      	adds	r3, r2, r3
 80005e8:	b29b      	uxth	r3, r3
 80005ea:	b219      	sxth	r1, r3
 80005ec:	193b      	adds	r3, r7, r4
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	b21a      	sxth	r2, r3
 80005f2:	193b      	adds	r3, r7, r4
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	b21c      	sxth	r4, r3
 80005f8:	2328      	movs	r3, #40	@ 0x28
 80005fa:	18fb      	adds	r3, r7, r3
 80005fc:	881b      	ldrh	r3, [r3, #0]
 80005fe:	9300      	str	r3, [sp, #0]
 8000600:	0023      	movs	r3, r4
 8000602:	f7ff fe75 	bl	80002f0 <fillRect>
        }
      }
      line >>= 1;
 8000606:	2217      	movs	r2, #23
 8000608:	18bb      	adds	r3, r7, r2
 800060a:	18ba      	adds	r2, r7, r2
 800060c:	7812      	ldrb	r2, [r2, #0]
 800060e:	0852      	lsrs	r2, r2, #1
 8000610:	701a      	strb	r2, [r3, #0]
    for (j = 0; j<8; j++) {
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	3301      	adds	r3, #1
 8000616:	60fb      	str	r3, [r7, #12]
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	2b07      	cmp	r3, #7
 800061c:	dc00      	bgt.n	8000620 <drawChar+0x1e0>
 800061e:	e765      	b.n	80004ec <drawChar+0xac>
  for (i=0; i<6; i++ ) {
 8000620:	693b      	ldr	r3, [r7, #16]
 8000622:	3301      	adds	r3, #1
 8000624:	613b      	str	r3, [r7, #16]
 8000626:	693b      	ldr	r3, [r7, #16]
 8000628:	2b05      	cmp	r3, #5
 800062a:	dc00      	bgt.n	800062e <drawChar+0x1ee>
 800062c:	e747      	b.n	80004be <drawChar+0x7e>
 800062e:	e000      	b.n	8000632 <drawChar+0x1f2>
    return;
 8000630:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 8000632:	46bd      	mov	sp, r7
 8000634:	b006      	add	sp, #24
 8000636:	bdb0      	pop	{r4, r5, r7, pc}
 8000638:	20000078 	.word	0x20000078
 800063c:	2000007a 	.word	0x2000007a
 8000640:	08003c48 	.word	0x08003c48

08000644 <fillScreen>:
        if(a > b) _swap_int16_t(a,b);
        drawFastHLine(a, y, b-a+1, color);
    }
}

void fillScreen(uint16_t color) {
 8000644:	b580      	push	{r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af02      	add	r7, sp, #8
 800064a:	0002      	movs	r2, r0
 800064c:	1dbb      	adds	r3, r7, #6
 800064e:	801a      	strh	r2, [r3, #0]
    fillRect(0, 0, _width, _height, color);
 8000650:	4b08      	ldr	r3, [pc, #32]	@ (8000674 <fillScreen+0x30>)
 8000652:	2200      	movs	r2, #0
 8000654:	5e9a      	ldrsh	r2, [r3, r2]
 8000656:	4b08      	ldr	r3, [pc, #32]	@ (8000678 <fillScreen+0x34>)
 8000658:	2100      	movs	r1, #0
 800065a:	5e59      	ldrsh	r1, [r3, r1]
 800065c:	1dbb      	adds	r3, r7, #6
 800065e:	881b      	ldrh	r3, [r3, #0]
 8000660:	9300      	str	r3, [sp, #0]
 8000662:	000b      	movs	r3, r1
 8000664:	2100      	movs	r1, #0
 8000666:	2000      	movs	r0, #0
 8000668:	f7ff fe42 	bl	80002f0 <fillRect>
}
 800066c:	46c0      	nop			@ (mov r8, r8)
 800066e:	46bd      	mov	sp, r7
 8000670:	b002      	add	sp, #8
 8000672:	bd80      	pop	{r7, pc}
 8000674:	20000078 	.word	0x20000078
 8000678:	2000007a 	.word	0x2000007a

0800067c <ST7735_Select>:
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

void ST7735_Select()
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8000680:	23a0      	movs	r3, #160	@ 0xa0
 8000682:	05db      	lsls	r3, r3, #23
 8000684:	2200      	movs	r2, #0
 8000686:	2120      	movs	r1, #32
 8000688:	0018      	movs	r0, r3
 800068a:	f001 f9d3 	bl	8001a34 <HAL_GPIO_WritePin>
}
 800068e:	46c0      	nop			@ (mov r8, r8)
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}

08000694 <ST7735_Unselect>:

void ST7735_Unselect()
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8000698:	23a0      	movs	r3, #160	@ 0xa0
 800069a:	05db      	lsls	r3, r3, #23
 800069c:	2201      	movs	r2, #1
 800069e:	2120      	movs	r1, #32
 80006a0:	0018      	movs	r0, r3
 80006a2:	f001 f9c7 	bl	8001a34 <HAL_GPIO_WritePin>
}
 80006a6:	46c0      	nop			@ (mov r8, r8)
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}

080006ac <ST7735_Reset>:

void ST7735_Reset()
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 80006b0:	23a0      	movs	r3, #160	@ 0xa0
 80006b2:	05db      	lsls	r3, r3, #23
 80006b4:	2200      	movs	r2, #0
 80006b6:	2108      	movs	r1, #8
 80006b8:	0018      	movs	r0, r3
 80006ba:	f001 f9bb 	bl	8001a34 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 80006be:	2005      	movs	r0, #5
 80006c0:	f000 ff5e 	bl	8001580 <HAL_Delay>
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 80006c4:	23a0      	movs	r3, #160	@ 0xa0
 80006c6:	05db      	lsls	r3, r3, #23
 80006c8:	2201      	movs	r2, #1
 80006ca:	2108      	movs	r1, #8
 80006cc:	0018      	movs	r0, r3
 80006ce:	f001 f9b1 	bl	8001a34 <HAL_GPIO_WritePin>
}
 80006d2:	46c0      	nop			@ (mov r8, r8)
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}

080006d8 <ST7735_WriteCommand>:

  void ST7735_WriteCommand(uint8_t cmd)
  {
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	0002      	movs	r2, r0
 80006e0:	1dfb      	adds	r3, r7, #7
 80006e2:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 80006e4:	23a0      	movs	r3, #160	@ 0xa0
 80006e6:	05db      	lsls	r3, r3, #23
 80006e8:	2200      	movs	r2, #0
 80006ea:	2110      	movs	r1, #16
 80006ec:	0018      	movs	r0, r3
 80006ee:	f001 f9a1 	bl	8001a34 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 80006f2:	2301      	movs	r3, #1
 80006f4:	425b      	negs	r3, r3
 80006f6:	1df9      	adds	r1, r7, #7
 80006f8:	4803      	ldr	r0, [pc, #12]	@ (8000708 <ST7735_WriteCommand+0x30>)
 80006fa:	2201      	movs	r2, #1
 80006fc:	f002 fb14 	bl	8002d28 <HAL_SPI_Transmit>
}
 8000700:	46c0      	nop			@ (mov r8, r8)
 8000702:	46bd      	mov	sp, r7
 8000704:	b002      	add	sp, #8
 8000706:	bd80      	pop	{r7, pc}
 8000708:	20000140 	.word	0x20000140

0800070c <ST7735_WriteData>:

void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
 8000714:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8000716:	23a0      	movs	r3, #160	@ 0xa0
 8000718:	05db      	lsls	r3, r3, #23
 800071a:	2201      	movs	r2, #1
 800071c:	2110      	movs	r1, #16
 800071e:	0018      	movs	r0, r3
 8000720:	f001 f988 	bl	8001a34 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8000724:	683b      	ldr	r3, [r7, #0]
 8000726:	b29a      	uxth	r2, r3
 8000728:	2301      	movs	r3, #1
 800072a:	425b      	negs	r3, r3
 800072c:	6879      	ldr	r1, [r7, #4]
 800072e:	4803      	ldr	r0, [pc, #12]	@ (800073c <ST7735_WriteData+0x30>)
 8000730:	f002 fafa 	bl	8002d28 <HAL_SPI_Transmit>
}
 8000734:	46c0      	nop			@ (mov r8, r8)
 8000736:	46bd      	mov	sp, r7
 8000738:	b002      	add	sp, #8
 800073a:	bd80      	pop	{r7, pc}
 800073c:	20000140 	.word	0x20000140

08000740 <DisplayInit>:

void DisplayInit(const uint8_t *addr)
{
 8000740:	b590      	push	{r4, r7, lr}
 8000742:	b085      	sub	sp, #20
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	1c5a      	adds	r2, r3, #1
 800074c:	607a      	str	r2, [r7, #4]
 800074e:	220f      	movs	r2, #15
 8000750:	18ba      	adds	r2, r7, r2
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	7013      	strb	r3, [r2, #0]
    while(numCommands--) {
 8000756:	e04a      	b.n	80007ee <DisplayInit+0xae>
        uint8_t cmd = *addr++;
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	1c5a      	adds	r2, r3, #1
 800075c:	607a      	str	r2, [r7, #4]
 800075e:	210b      	movs	r1, #11
 8000760:	187a      	adds	r2, r7, r1
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	7013      	strb	r3, [r2, #0]
        ST7735_WriteCommand(cmd);
 8000766:	187b      	adds	r3, r7, r1
 8000768:	781b      	ldrb	r3, [r3, #0]
 800076a:	0018      	movs	r0, r3
 800076c:	f7ff ffb4 	bl	80006d8 <ST7735_WriteCommand>

        numArgs = *addr++;
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	1c5a      	adds	r2, r3, #1
 8000774:	607a      	str	r2, [r7, #4]
 8000776:	200a      	movs	r0, #10
 8000778:	183a      	adds	r2, r7, r0
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	7013      	strb	r3, [r2, #0]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 800077e:	183b      	adds	r3, r7, r0
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	b29a      	uxth	r2, r3
 8000784:	230c      	movs	r3, #12
 8000786:	18fb      	adds	r3, r7, r3
 8000788:	2180      	movs	r1, #128	@ 0x80
 800078a:	400a      	ands	r2, r1
 800078c:	801a      	strh	r2, [r3, #0]
        numArgs &= ~DELAY;
 800078e:	183b      	adds	r3, r7, r0
 8000790:	183a      	adds	r2, r7, r0
 8000792:	7812      	ldrb	r2, [r2, #0]
 8000794:	217f      	movs	r1, #127	@ 0x7f
 8000796:	400a      	ands	r2, r1
 8000798:	701a      	strb	r2, [r3, #0]
        if(numArgs) {
 800079a:	183b      	adds	r3, r7, r0
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d00c      	beq.n	80007bc <DisplayInit+0x7c>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 80007a2:	0004      	movs	r4, r0
 80007a4:	183b      	adds	r3, r7, r0
 80007a6:	781a      	ldrb	r2, [r3, #0]
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	0011      	movs	r1, r2
 80007ac:	0018      	movs	r0, r3
 80007ae:	f7ff ffad 	bl	800070c <ST7735_WriteData>
            addr += numArgs;
 80007b2:	193b      	adds	r3, r7, r4
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	687a      	ldr	r2, [r7, #4]
 80007b8:	18d3      	adds	r3, r2, r3
 80007ba:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 80007bc:	210c      	movs	r1, #12
 80007be:	187b      	adds	r3, r7, r1
 80007c0:	881b      	ldrh	r3, [r3, #0]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d013      	beq.n	80007ee <DisplayInit+0xae>
            ms = *addr++;
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	1c5a      	adds	r2, r3, #1
 80007ca:	607a      	str	r2, [r7, #4]
 80007cc:	781a      	ldrb	r2, [r3, #0]
 80007ce:	187b      	adds	r3, r7, r1
 80007d0:	801a      	strh	r2, [r3, #0]
            if(ms == 255) ms = 500;
 80007d2:	187b      	adds	r3, r7, r1
 80007d4:	881b      	ldrh	r3, [r3, #0]
 80007d6:	2bff      	cmp	r3, #255	@ 0xff
 80007d8:	d103      	bne.n	80007e2 <DisplayInit+0xa2>
 80007da:	187b      	adds	r3, r7, r1
 80007dc:	22fa      	movs	r2, #250	@ 0xfa
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	801a      	strh	r2, [r3, #0]
            HAL_Delay(ms);
 80007e2:	230c      	movs	r3, #12
 80007e4:	18fb      	adds	r3, r7, r3
 80007e6:	881b      	ldrh	r3, [r3, #0]
 80007e8:	0018      	movs	r0, r3
 80007ea:	f000 fec9 	bl	8001580 <HAL_Delay>
    while(numCommands--) {
 80007ee:	220f      	movs	r2, #15
 80007f0:	18bb      	adds	r3, r7, r2
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	18ba      	adds	r2, r7, r2
 80007f6:	1e59      	subs	r1, r3, #1
 80007f8:	7011      	strb	r1, [r2, #0]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d1ac      	bne.n	8000758 <DisplayInit+0x18>
        }
    }
}
 80007fe:	46c0      	nop			@ (mov r8, r8)
 8000800:	46c0      	nop			@ (mov r8, r8)
 8000802:	46bd      	mov	sp, r7
 8000804:	b005      	add	sp, #20
 8000806:	bd90      	pop	{r4, r7, pc}

08000808 <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 8000808:	b5b0      	push	{r4, r5, r7, lr}
 800080a:	b084      	sub	sp, #16
 800080c:	af00      	add	r7, sp, #0
 800080e:	0005      	movs	r5, r0
 8000810:	000c      	movs	r4, r1
 8000812:	0010      	movs	r0, r2
 8000814:	0019      	movs	r1, r3
 8000816:	1dfb      	adds	r3, r7, #7
 8000818:	1c2a      	adds	r2, r5, #0
 800081a:	701a      	strb	r2, [r3, #0]
 800081c:	1dbb      	adds	r3, r7, #6
 800081e:	1c22      	adds	r2, r4, #0
 8000820:	701a      	strb	r2, [r3, #0]
 8000822:	1d7b      	adds	r3, r7, #5
 8000824:	1c02      	adds	r2, r0, #0
 8000826:	701a      	strb	r2, [r3, #0]
 8000828:	1d3b      	adds	r3, r7, #4
 800082a:	1c0a      	adds	r2, r1, #0
 800082c:	701a      	strb	r2, [r3, #0]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 800082e:	202a      	movs	r0, #42	@ 0x2a
 8000830:	f7ff ff52 	bl	80006d8 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 8000834:	210c      	movs	r1, #12
 8000836:	187b      	adds	r3, r7, r1
 8000838:	2200      	movs	r2, #0
 800083a:	701a      	strb	r2, [r3, #0]
 800083c:	4b1c      	ldr	r3, [pc, #112]	@ (80008b0 <ST7735_SetAddressWindow+0xa8>)
 800083e:	781a      	ldrb	r2, [r3, #0]
 8000840:	1dfb      	adds	r3, r7, #7
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	18d3      	adds	r3, r2, r3
 8000846:	b2da      	uxtb	r2, r3
 8000848:	187b      	adds	r3, r7, r1
 800084a:	705a      	strb	r2, [r3, #1]
 800084c:	187b      	adds	r3, r7, r1
 800084e:	2200      	movs	r2, #0
 8000850:	709a      	strb	r2, [r3, #2]
 8000852:	4b17      	ldr	r3, [pc, #92]	@ (80008b0 <ST7735_SetAddressWindow+0xa8>)
 8000854:	781a      	ldrb	r2, [r3, #0]
 8000856:	1d7b      	adds	r3, r7, #5
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	18d3      	adds	r3, r2, r3
 800085c:	b2da      	uxtb	r2, r3
 800085e:	187b      	adds	r3, r7, r1
 8000860:	70da      	strb	r2, [r3, #3]
    ST7735_WriteData(data, sizeof(data));
 8000862:	000c      	movs	r4, r1
 8000864:	187b      	adds	r3, r7, r1
 8000866:	2104      	movs	r1, #4
 8000868:	0018      	movs	r0, r3
 800086a:	f7ff ff4f 	bl	800070c <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 800086e:	202b      	movs	r0, #43	@ 0x2b
 8000870:	f7ff ff32 	bl	80006d8 <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 8000874:	4b0f      	ldr	r3, [pc, #60]	@ (80008b4 <ST7735_SetAddressWindow+0xac>)
 8000876:	781a      	ldrb	r2, [r3, #0]
 8000878:	1dbb      	adds	r3, r7, #6
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	18d3      	adds	r3, r2, r3
 800087e:	b2da      	uxtb	r2, r3
 8000880:	0021      	movs	r1, r4
 8000882:	187b      	adds	r3, r7, r1
 8000884:	705a      	strb	r2, [r3, #1]
    data[3] = y1 + _ystart;
 8000886:	4b0b      	ldr	r3, [pc, #44]	@ (80008b4 <ST7735_SetAddressWindow+0xac>)
 8000888:	781a      	ldrb	r2, [r3, #0]
 800088a:	1d3b      	adds	r3, r7, #4
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	18d3      	adds	r3, r2, r3
 8000890:	b2da      	uxtb	r2, r3
 8000892:	187b      	adds	r3, r7, r1
 8000894:	70da      	strb	r2, [r3, #3]
    ST7735_WriteData(data, sizeof(data));
 8000896:	187b      	adds	r3, r7, r1
 8000898:	2104      	movs	r1, #4
 800089a:	0018      	movs	r0, r3
 800089c:	f7ff ff36 	bl	800070c <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 80008a0:	202c      	movs	r0, #44	@ 0x2c
 80008a2:	f7ff ff19 	bl	80006d8 <ST7735_WriteCommand>
}
 80008a6:	46c0      	nop			@ (mov r8, r8)
 80008a8:	46bd      	mov	sp, r7
 80008aa:	b004      	add	sp, #16
 80008ac:	bdb0      	pop	{r4, r5, r7, pc}
 80008ae:	46c0      	nop			@ (mov r8, r8)
 80008b0:	2000007f 	.word	0x2000007f
 80008b4:	20000080 	.word	0x20000080

080008b8 <ST7735_Init>:

void ST7735_Init(uint8_t rotation)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
 80008be:	0002      	movs	r2, r0
 80008c0:	1dfb      	adds	r3, r7, #7
 80008c2:	701a      	strb	r2, [r3, #0]
    ST7735_Select();
 80008c4:	f7ff feda 	bl	800067c <ST7735_Select>
    ST7735_Reset();
 80008c8:	f7ff fef0 	bl	80006ac <ST7735_Reset>
    DisplayInit(init_cmds1);
 80008cc:	4b0e      	ldr	r3, [pc, #56]	@ (8000908 <ST7735_Init+0x50>)
 80008ce:	0018      	movs	r0, r3
 80008d0:	f7ff ff36 	bl	8000740 <DisplayInit>
    DisplayInit(init_cmds2);
 80008d4:	4b0d      	ldr	r3, [pc, #52]	@ (800090c <ST7735_Init+0x54>)
 80008d6:	0018      	movs	r0, r3
 80008d8:	f7ff ff32 	bl	8000740 <DisplayInit>
    DisplayInit(init_cmds3);
 80008dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000910 <ST7735_Init+0x58>)
 80008de:	0018      	movs	r0, r3
 80008e0:	f7ff ff2e 	bl	8000740 <DisplayInit>

#elif ST7735_IS_128X128
    _colstart = 2;
    _rowstart = 3;
#else
    _colstart = 0;
 80008e4:	4b0b      	ldr	r3, [pc, #44]	@ (8000914 <ST7735_Init+0x5c>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	701a      	strb	r2, [r3, #0]
    _rowstart = 0;
 80008ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000918 <ST7735_Init+0x60>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	701a      	strb	r2, [r3, #0]
#endif
    ST7735_SetRotation (rotation);
 80008f0:	1dfb      	adds	r3, r7, #7
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	0018      	movs	r0, r3
 80008f6:	f000 f811 	bl	800091c <ST7735_SetRotation>
    ST7735_Unselect();
 80008fa:	f7ff fecb 	bl	8000694 <ST7735_Unselect>

}
 80008fe:	46c0      	nop			@ (mov r8, r8)
 8000900:	46bd      	mov	sp, r7
 8000902:	b002      	add	sp, #8
 8000904:	bd80      	pop	{r7, pc}
 8000906:	46c0      	nop			@ (mov r8, r8)
 8000908:	08004144 	.word	0x08004144
 800090c:	0800417c 	.word	0x0800417c
 8000910:	0800418c 	.word	0x0800418c
 8000914:	2000007d 	.word	0x2000007d
 8000918:	2000007e 	.word	0x2000007e

0800091c <ST7735_SetRotation>:

void ST7735_SetRotation(uint8_t m)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b084      	sub	sp, #16
 8000920:	af00      	add	r7, sp, #0
 8000922:	0002      	movs	r2, r0
 8000924:	1dfb      	adds	r3, r7, #7
 8000926:	701a      	strb	r2, [r3, #0]

  uint8_t madctl = 0;
 8000928:	230f      	movs	r3, #15
 800092a:	18fb      	adds	r3, r7, r3
 800092c:	2200      	movs	r2, #0
 800092e:	701a      	strb	r2, [r3, #0]

  rotation = m % 4; // can't be higher than 3
 8000930:	1dfb      	adds	r3, r7, #7
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	2203      	movs	r2, #3
 8000936:	4013      	ands	r3, r2
 8000938:	b2da      	uxtb	r2, r3
 800093a:	4b36      	ldr	r3, [pc, #216]	@ (8000a14 <ST7735_SetRotation+0xf8>)
 800093c:	701a      	strb	r2, [r3, #0]

  switch (rotation)
 800093e:	4b35      	ldr	r3, [pc, #212]	@ (8000a14 <ST7735_SetRotation+0xf8>)
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	2b03      	cmp	r3, #3
 8000944:	d041      	beq.n	80009ca <ST7735_SetRotation+0xae>
 8000946:	dc53      	bgt.n	80009f0 <ST7735_SetRotation+0xd4>
 8000948:	2b02      	cmp	r3, #2
 800094a:	d02b      	beq.n	80009a4 <ST7735_SetRotation+0x88>
 800094c:	dc50      	bgt.n	80009f0 <ST7735_SetRotation+0xd4>
 800094e:	2b00      	cmp	r3, #0
 8000950:	d002      	beq.n	8000958 <ST7735_SetRotation+0x3c>
 8000952:	2b01      	cmp	r3, #1
 8000954:	d013      	beq.n	800097e <ST7735_SetRotation+0x62>
 8000956:	e04b      	b.n	80009f0 <ST7735_SetRotation+0xd4>
  {
  case 0:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 8000958:	230f      	movs	r3, #15
 800095a:	18fb      	adds	r3, r7, r3
 800095c:	22c0      	movs	r2, #192	@ 0xc0
 800095e:	701a      	strb	r2, [r3, #0]
      _height = ST7735_HEIGHT;
 8000960:	4b2d      	ldr	r3, [pc, #180]	@ (8000a18 <ST7735_SetRotation+0xfc>)
 8000962:	22a0      	movs	r2, #160	@ 0xa0
 8000964:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 8000966:	4b2d      	ldr	r3, [pc, #180]	@ (8000a1c <ST7735_SetRotation+0x100>)
 8000968:	2280      	movs	r2, #128	@ 0x80
 800096a:	801a      	strh	r2, [r3, #0]
      _xstart = _colstart;
 800096c:	4b2c      	ldr	r3, [pc, #176]	@ (8000a20 <ST7735_SetRotation+0x104>)
 800096e:	781a      	ldrb	r2, [r3, #0]
 8000970:	4b2c      	ldr	r3, [pc, #176]	@ (8000a24 <ST7735_SetRotation+0x108>)
 8000972:	701a      	strb	r2, [r3, #0]
      _ystart = _rowstart;
 8000974:	4b2c      	ldr	r3, [pc, #176]	@ (8000a28 <ST7735_SetRotation+0x10c>)
 8000976:	781a      	ldrb	r2, [r3, #0]
 8000978:	4b2c      	ldr	r3, [pc, #176]	@ (8000a2c <ST7735_SetRotation+0x110>)
 800097a:	701a      	strb	r2, [r3, #0]
#endif
    break;
 800097c:	e038      	b.n	80009f0 <ST7735_SetRotation+0xd4>
  case 1:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 800097e:	230f      	movs	r3, #15
 8000980:	18fb      	adds	r3, r7, r3
 8000982:	22a0      	movs	r2, #160	@ 0xa0
 8000984:	701a      	strb	r2, [r3, #0]
      _width = ST7735_HEIGHT;
 8000986:	4b25      	ldr	r3, [pc, #148]	@ (8000a1c <ST7735_SetRotation+0x100>)
 8000988:	22a0      	movs	r2, #160	@ 0xa0
 800098a:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 800098c:	4b22      	ldr	r3, [pc, #136]	@ (8000a18 <ST7735_SetRotation+0xfc>)
 800098e:	2280      	movs	r2, #128	@ 0x80
 8000990:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8000992:	4b23      	ldr	r3, [pc, #140]	@ (8000a20 <ST7735_SetRotation+0x104>)
 8000994:	781a      	ldrb	r2, [r3, #0]
 8000996:	4b25      	ldr	r3, [pc, #148]	@ (8000a2c <ST7735_SetRotation+0x110>)
 8000998:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 800099a:	4b23      	ldr	r3, [pc, #140]	@ (8000a28 <ST7735_SetRotation+0x10c>)
 800099c:	781a      	ldrb	r2, [r3, #0]
 800099e:	4b21      	ldr	r3, [pc, #132]	@ (8000a24 <ST7735_SetRotation+0x108>)
 80009a0:	701a      	strb	r2, [r3, #0]
#endif
    break;
 80009a2:	e025      	b.n	80009f0 <ST7735_SetRotation+0xd4>
  case 2:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_RGB;
 80009a4:	230f      	movs	r3, #15
 80009a6:	18fb      	adds	r3, r7, r3
 80009a8:	2200      	movs	r2, #0
 80009aa:	701a      	strb	r2, [r3, #0]
      _height = ST7735_HEIGHT;
 80009ac:	4b1a      	ldr	r3, [pc, #104]	@ (8000a18 <ST7735_SetRotation+0xfc>)
 80009ae:	22a0      	movs	r2, #160	@ 0xa0
 80009b0:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 80009b2:	4b1a      	ldr	r3, [pc, #104]	@ (8000a1c <ST7735_SetRotation+0x100>)
 80009b4:	2280      	movs	r2, #128	@ 0x80
 80009b6:	801a      	strh	r2, [r3, #0]
    _xstart = _colstart;
 80009b8:	4b19      	ldr	r3, [pc, #100]	@ (8000a20 <ST7735_SetRotation+0x104>)
 80009ba:	781a      	ldrb	r2, [r3, #0]
 80009bc:	4b19      	ldr	r3, [pc, #100]	@ (8000a24 <ST7735_SetRotation+0x108>)
 80009be:	701a      	strb	r2, [r3, #0]
    _ystart = _rowstart;
 80009c0:	4b19      	ldr	r3, [pc, #100]	@ (8000a28 <ST7735_SetRotation+0x10c>)
 80009c2:	781a      	ldrb	r2, [r3, #0]
 80009c4:	4b19      	ldr	r3, [pc, #100]	@ (8000a2c <ST7735_SetRotation+0x110>)
 80009c6:	701a      	strb	r2, [r3, #0]
#endif
    break;
 80009c8:	e012      	b.n	80009f0 <ST7735_SetRotation+0xd4>
  case 3:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 80009ca:	230f      	movs	r3, #15
 80009cc:	18fb      	adds	r3, r7, r3
 80009ce:	2260      	movs	r2, #96	@ 0x60
 80009d0:	701a      	strb	r2, [r3, #0]
      _width = ST7735_HEIGHT;
 80009d2:	4b12      	ldr	r3, [pc, #72]	@ (8000a1c <ST7735_SetRotation+0x100>)
 80009d4:	22a0      	movs	r2, #160	@ 0xa0
 80009d6:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 80009d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000a18 <ST7735_SetRotation+0xfc>)
 80009da:	2280      	movs	r2, #128	@ 0x80
 80009dc:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 80009de:	4b10      	ldr	r3, [pc, #64]	@ (8000a20 <ST7735_SetRotation+0x104>)
 80009e0:	781a      	ldrb	r2, [r3, #0]
 80009e2:	4b12      	ldr	r3, [pc, #72]	@ (8000a2c <ST7735_SetRotation+0x110>)
 80009e4:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 80009e6:	4b10      	ldr	r3, [pc, #64]	@ (8000a28 <ST7735_SetRotation+0x10c>)
 80009e8:	781a      	ldrb	r2, [r3, #0]
 80009ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000a24 <ST7735_SetRotation+0x108>)
 80009ec:	701a      	strb	r2, [r3, #0]
#endif
    break;
 80009ee:	46c0      	nop			@ (mov r8, r8)
  }
  ST7735_Select();
 80009f0:	f7ff fe44 	bl	800067c <ST7735_Select>
  ST7735_WriteCommand(ST7735_MADCTL);
 80009f4:	2036      	movs	r0, #54	@ 0x36
 80009f6:	f7ff fe6f 	bl	80006d8 <ST7735_WriteCommand>
  ST7735_WriteData(&madctl,1);
 80009fa:	230f      	movs	r3, #15
 80009fc:	18fb      	adds	r3, r7, r3
 80009fe:	2101      	movs	r1, #1
 8000a00:	0018      	movs	r0, r3
 8000a02:	f7ff fe83 	bl	800070c <ST7735_WriteData>
  ST7735_Unselect();
 8000a06:	f7ff fe45 	bl	8000694 <ST7735_Unselect>
}
 8000a0a:	46c0      	nop			@ (mov r8, r8)
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	b004      	add	sp, #16
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	46c0      	nop			@ (mov r8, r8)
 8000a14:	2000007c 	.word	0x2000007c
 8000a18:	2000007a 	.word	0x2000007a
 8000a1c:	20000078 	.word	0x20000078
 8000a20:	2000007d 	.word	0x2000007d
 8000a24:	2000007f 	.word	0x2000007f
 8000a28:	2000007e 	.word	0x2000007e
 8000a2c:	20000080 	.word	0x20000080

08000a30 <ST7735_DrawPixel>:

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8000a30:	b590      	push	{r4, r7, lr}
 8000a32:	b085      	sub	sp, #20
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	0004      	movs	r4, r0
 8000a38:	0008      	movs	r0, r1
 8000a3a:	0011      	movs	r1, r2
 8000a3c:	1dbb      	adds	r3, r7, #6
 8000a3e:	1c22      	adds	r2, r4, #0
 8000a40:	801a      	strh	r2, [r3, #0]
 8000a42:	1d3b      	adds	r3, r7, #4
 8000a44:	1c02      	adds	r2, r0, #0
 8000a46:	801a      	strh	r2, [r3, #0]
 8000a48:	1cbb      	adds	r3, r7, #2
 8000a4a:	1c0a      	adds	r2, r1, #0
 8000a4c:	801a      	strh	r2, [r3, #0]
    if((x >= _width) || (y >= _height))
 8000a4e:	1dbb      	adds	r3, r7, #6
 8000a50:	881b      	ldrh	r3, [r3, #0]
 8000a52:	4a1c      	ldr	r2, [pc, #112]	@ (8000ac4 <ST7735_DrawPixel+0x94>)
 8000a54:	2100      	movs	r1, #0
 8000a56:	5e52      	ldrsh	r2, [r2, r1]
 8000a58:	4293      	cmp	r3, r2
 8000a5a:	da2f      	bge.n	8000abc <ST7735_DrawPixel+0x8c>
 8000a5c:	1d3b      	adds	r3, r7, #4
 8000a5e:	881b      	ldrh	r3, [r3, #0]
 8000a60:	4a19      	ldr	r2, [pc, #100]	@ (8000ac8 <ST7735_DrawPixel+0x98>)
 8000a62:	2100      	movs	r1, #0
 8000a64:	5e52      	ldrsh	r2, [r2, r1]
 8000a66:	4293      	cmp	r3, r2
 8000a68:	da28      	bge.n	8000abc <ST7735_DrawPixel+0x8c>
        return;

    ST7735_Select();
 8000a6a:	f7ff fe07 	bl	800067c <ST7735_Select>

    ST7735_SetAddressWindow(x, y, x+1, y+1);
 8000a6e:	1dbb      	adds	r3, r7, #6
 8000a70:	881b      	ldrh	r3, [r3, #0]
 8000a72:	b2d8      	uxtb	r0, r3
 8000a74:	1d3b      	adds	r3, r7, #4
 8000a76:	881b      	ldrh	r3, [r3, #0]
 8000a78:	b2d9      	uxtb	r1, r3
 8000a7a:	1dbb      	adds	r3, r7, #6
 8000a7c:	881b      	ldrh	r3, [r3, #0]
 8000a7e:	b2db      	uxtb	r3, r3
 8000a80:	3301      	adds	r3, #1
 8000a82:	b2da      	uxtb	r2, r3
 8000a84:	1d3b      	adds	r3, r7, #4
 8000a86:	881b      	ldrh	r3, [r3, #0]
 8000a88:	b2db      	uxtb	r3, r3
 8000a8a:	3301      	adds	r3, #1
 8000a8c:	b2db      	uxtb	r3, r3
 8000a8e:	f7ff febb 	bl	8000808 <ST7735_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 8000a92:	1cbb      	adds	r3, r7, #2
 8000a94:	881b      	ldrh	r3, [r3, #0]
 8000a96:	0a1b      	lsrs	r3, r3, #8
 8000a98:	b29b      	uxth	r3, r3
 8000a9a:	b2da      	uxtb	r2, r3
 8000a9c:	210c      	movs	r1, #12
 8000a9e:	187b      	adds	r3, r7, r1
 8000aa0:	701a      	strb	r2, [r3, #0]
 8000aa2:	1cbb      	adds	r3, r7, #2
 8000aa4:	881b      	ldrh	r3, [r3, #0]
 8000aa6:	b2da      	uxtb	r2, r3
 8000aa8:	187b      	adds	r3, r7, r1
 8000aaa:	705a      	strb	r2, [r3, #1]
    ST7735_WriteData(data, sizeof(data));
 8000aac:	187b      	adds	r3, r7, r1
 8000aae:	2102      	movs	r1, #2
 8000ab0:	0018      	movs	r0, r3
 8000ab2:	f7ff fe2b 	bl	800070c <ST7735_WriteData>

    ST7735_Unselect();
 8000ab6:	f7ff fded 	bl	8000694 <ST7735_Unselect>
 8000aba:	e000      	b.n	8000abe <ST7735_DrawPixel+0x8e>
        return;
 8000abc:	46c0      	nop			@ (mov r8, r8)
}
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	b005      	add	sp, #20
 8000ac2:	bd90      	pop	{r4, r7, pc}
 8000ac4:	20000078 	.word	0x20000078
 8000ac8:	2000007a 	.word	0x2000007a

08000acc <ST7735_FillRectangle>:

    ST7735_Unselect();
}

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8000acc:	b5b0      	push	{r4, r5, r7, lr}
 8000ace:	b084      	sub	sp, #16
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	0005      	movs	r5, r0
 8000ad4:	000c      	movs	r4, r1
 8000ad6:	0010      	movs	r0, r2
 8000ad8:	0019      	movs	r1, r3
 8000ada:	1dbb      	adds	r3, r7, #6
 8000adc:	1c2a      	adds	r2, r5, #0
 8000ade:	801a      	strh	r2, [r3, #0]
 8000ae0:	1d3b      	adds	r3, r7, #4
 8000ae2:	1c22      	adds	r2, r4, #0
 8000ae4:	801a      	strh	r2, [r3, #0]
 8000ae6:	1cbb      	adds	r3, r7, #2
 8000ae8:	1c02      	adds	r2, r0, #0
 8000aea:	801a      	strh	r2, [r3, #0]
 8000aec:	003b      	movs	r3, r7
 8000aee:	1c0a      	adds	r2, r1, #0
 8000af0:	801a      	strh	r2, [r3, #0]
    if((x >= _width) || (y >= _height)) return;
 8000af2:	1dbb      	adds	r3, r7, #6
 8000af4:	881b      	ldrh	r3, [r3, #0]
 8000af6:	4a49      	ldr	r2, [pc, #292]	@ (8000c1c <ST7735_FillRectangle+0x150>)
 8000af8:	2100      	movs	r1, #0
 8000afa:	5e52      	ldrsh	r2, [r2, r1]
 8000afc:	4293      	cmp	r3, r2
 8000afe:	db00      	blt.n	8000b02 <ST7735_FillRectangle+0x36>
 8000b00:	e088      	b.n	8000c14 <ST7735_FillRectangle+0x148>
 8000b02:	1d3b      	adds	r3, r7, #4
 8000b04:	881b      	ldrh	r3, [r3, #0]
 8000b06:	4a46      	ldr	r2, [pc, #280]	@ (8000c20 <ST7735_FillRectangle+0x154>)
 8000b08:	2100      	movs	r1, #0
 8000b0a:	5e52      	ldrsh	r2, [r2, r1]
 8000b0c:	4293      	cmp	r3, r2
 8000b0e:	db00      	blt.n	8000b12 <ST7735_FillRectangle+0x46>
 8000b10:	e080      	b.n	8000c14 <ST7735_FillRectangle+0x148>
    if((x + w - 1) >= _width) w = _width - x;
 8000b12:	1dbb      	adds	r3, r7, #6
 8000b14:	881a      	ldrh	r2, [r3, #0]
 8000b16:	1cbb      	adds	r3, r7, #2
 8000b18:	881b      	ldrh	r3, [r3, #0]
 8000b1a:	18d3      	adds	r3, r2, r3
 8000b1c:	4a3f      	ldr	r2, [pc, #252]	@ (8000c1c <ST7735_FillRectangle+0x150>)
 8000b1e:	2100      	movs	r1, #0
 8000b20:	5e52      	ldrsh	r2, [r2, r1]
 8000b22:	4293      	cmp	r3, r2
 8000b24:	dd08      	ble.n	8000b38 <ST7735_FillRectangle+0x6c>
 8000b26:	4b3d      	ldr	r3, [pc, #244]	@ (8000c1c <ST7735_FillRectangle+0x150>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	5e9b      	ldrsh	r3, [r3, r2]
 8000b2c:	b299      	uxth	r1, r3
 8000b2e:	1cbb      	adds	r3, r7, #2
 8000b30:	1dba      	adds	r2, r7, #6
 8000b32:	8812      	ldrh	r2, [r2, #0]
 8000b34:	1a8a      	subs	r2, r1, r2
 8000b36:	801a      	strh	r2, [r3, #0]
    if((y + h - 1) >= _height) h = _height - y;
 8000b38:	1d3b      	adds	r3, r7, #4
 8000b3a:	881a      	ldrh	r2, [r3, #0]
 8000b3c:	003b      	movs	r3, r7
 8000b3e:	881b      	ldrh	r3, [r3, #0]
 8000b40:	18d3      	adds	r3, r2, r3
 8000b42:	4a37      	ldr	r2, [pc, #220]	@ (8000c20 <ST7735_FillRectangle+0x154>)
 8000b44:	2100      	movs	r1, #0
 8000b46:	5e52      	ldrsh	r2, [r2, r1]
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	dd08      	ble.n	8000b5e <ST7735_FillRectangle+0x92>
 8000b4c:	4b34      	ldr	r3, [pc, #208]	@ (8000c20 <ST7735_FillRectangle+0x154>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	5e9b      	ldrsh	r3, [r3, r2]
 8000b52:	b299      	uxth	r1, r3
 8000b54:	003b      	movs	r3, r7
 8000b56:	1d3a      	adds	r2, r7, #4
 8000b58:	8812      	ldrh	r2, [r2, #0]
 8000b5a:	1a8a      	subs	r2, r1, r2
 8000b5c:	801a      	strh	r2, [r3, #0]

    ST7735_Select();
 8000b5e:	f7ff fd8d 	bl	800067c <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8000b62:	1dbb      	adds	r3, r7, #6
 8000b64:	881b      	ldrh	r3, [r3, #0]
 8000b66:	b2d8      	uxtb	r0, r3
 8000b68:	1d3b      	adds	r3, r7, #4
 8000b6a:	881b      	ldrh	r3, [r3, #0]
 8000b6c:	b2d9      	uxtb	r1, r3
 8000b6e:	1dbb      	adds	r3, r7, #6
 8000b70:	881b      	ldrh	r3, [r3, #0]
 8000b72:	b2da      	uxtb	r2, r3
 8000b74:	1cbb      	adds	r3, r7, #2
 8000b76:	881b      	ldrh	r3, [r3, #0]
 8000b78:	b2db      	uxtb	r3, r3
 8000b7a:	18d3      	adds	r3, r2, r3
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	3b01      	subs	r3, #1
 8000b80:	b2dc      	uxtb	r4, r3
 8000b82:	1d3b      	adds	r3, r7, #4
 8000b84:	881b      	ldrh	r3, [r3, #0]
 8000b86:	b2da      	uxtb	r2, r3
 8000b88:	003b      	movs	r3, r7
 8000b8a:	881b      	ldrh	r3, [r3, #0]
 8000b8c:	b2db      	uxtb	r3, r3
 8000b8e:	18d3      	adds	r3, r2, r3
 8000b90:	b2db      	uxtb	r3, r3
 8000b92:	3b01      	subs	r3, #1
 8000b94:	b2db      	uxtb	r3, r3
 8000b96:	0022      	movs	r2, r4
 8000b98:	f7ff fe36 	bl	8000808 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8000b9c:	2120      	movs	r1, #32
 8000b9e:	187b      	adds	r3, r7, r1
 8000ba0:	881b      	ldrh	r3, [r3, #0]
 8000ba2:	0a1b      	lsrs	r3, r3, #8
 8000ba4:	b29b      	uxth	r3, r3
 8000ba6:	b2da      	uxtb	r2, r3
 8000ba8:	200c      	movs	r0, #12
 8000baa:	183b      	adds	r3, r7, r0
 8000bac:	701a      	strb	r2, [r3, #0]
 8000bae:	187b      	adds	r3, r7, r1
 8000bb0:	881b      	ldrh	r3, [r3, #0]
 8000bb2:	b2da      	uxtb	r2, r3
 8000bb4:	183b      	adds	r3, r7, r0
 8000bb6:	705a      	strb	r2, [r3, #1]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8000bb8:	23a0      	movs	r3, #160	@ 0xa0
 8000bba:	05db      	lsls	r3, r3, #23
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	2110      	movs	r1, #16
 8000bc0:	0018      	movs	r0, r3
 8000bc2:	f000 ff37 	bl	8001a34 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8000bc6:	1d3b      	adds	r3, r7, #4
 8000bc8:	003a      	movs	r2, r7
 8000bca:	8812      	ldrh	r2, [r2, #0]
 8000bcc:	801a      	strh	r2, [r3, #0]
 8000bce:	e01a      	b.n	8000c06 <ST7735_FillRectangle+0x13a>
        for(x = w; x > 0; x--) {
 8000bd0:	1dbb      	adds	r3, r7, #6
 8000bd2:	1cba      	adds	r2, r7, #2
 8000bd4:	8812      	ldrh	r2, [r2, #0]
 8000bd6:	801a      	strh	r2, [r3, #0]
 8000bd8:	e00c      	b.n	8000bf4 <ST7735_FillRectangle+0x128>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8000bda:	2301      	movs	r3, #1
 8000bdc:	425b      	negs	r3, r3
 8000bde:	220c      	movs	r2, #12
 8000be0:	18b9      	adds	r1, r7, r2
 8000be2:	4810      	ldr	r0, [pc, #64]	@ (8000c24 <ST7735_FillRectangle+0x158>)
 8000be4:	2202      	movs	r2, #2
 8000be6:	f002 f89f 	bl	8002d28 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8000bea:	1dbb      	adds	r3, r7, #6
 8000bec:	881a      	ldrh	r2, [r3, #0]
 8000bee:	1dbb      	adds	r3, r7, #6
 8000bf0:	3a01      	subs	r2, #1
 8000bf2:	801a      	strh	r2, [r3, #0]
 8000bf4:	1dbb      	adds	r3, r7, #6
 8000bf6:	881b      	ldrh	r3, [r3, #0]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d1ee      	bne.n	8000bda <ST7735_FillRectangle+0x10e>
    for(y = h; y > 0; y--) {
 8000bfc:	1d3b      	adds	r3, r7, #4
 8000bfe:	881a      	ldrh	r2, [r3, #0]
 8000c00:	1d3b      	adds	r3, r7, #4
 8000c02:	3a01      	subs	r2, #1
 8000c04:	801a      	strh	r2, [r3, #0]
 8000c06:	1d3b      	adds	r3, r7, #4
 8000c08:	881b      	ldrh	r3, [r3, #0]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d1e0      	bne.n	8000bd0 <ST7735_FillRectangle+0x104>
        }
    }

    ST7735_Unselect();
 8000c0e:	f7ff fd41 	bl	8000694 <ST7735_Unselect>
 8000c12:	e000      	b.n	8000c16 <ST7735_FillRectangle+0x14a>
    if((x >= _width) || (y >= _height)) return;
 8000c14:	46c0      	nop			@ (mov r8, r8)
}
 8000c16:	46bd      	mov	sp, r7
 8000c18:	b004      	add	sp, #16
 8000c1a:	bdb0      	pop	{r4, r5, r7, pc}
 8000c1c:	20000078 	.word	0x20000078
 8000c20:	2000007a 	.word	0x2000007a
 8000c24:	20000140 	.word	0x20000140

08000c28 <_I2C1_IsBusy>:

  return 0;
}

int _I2C1_IsBusy (void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  return (I2C1->ISR & I2C_ISR_BUSY);
 8000c2c:	4b04      	ldr	r3, [pc, #16]	@ (8000c40 <_I2C1_IsBusy+0x18>)
 8000c2e:	699b      	ldr	r3, [r3, #24]
 8000c30:	001a      	movs	r2, r3
 8000c32:	2380      	movs	r3, #128	@ 0x80
 8000c34:	021b      	lsls	r3, r3, #8
 8000c36:	4013      	ands	r3, r2
}
 8000c38:	0018      	movs	r0, r3
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	46c0      	nop			@ (mov r8, r8)
 8000c40:	40005400 	.word	0x40005400

08000c44 <_I2C1_StartRead>:

int _I2C1_StartRead (unsigned char address, unsigned char bytecount, unsigned char * pData, _I2C_AutoEndOption endoption)
{
 8000c44:	b590      	push	{r4, r7, lr}
 8000c46:	b085      	sub	sp, #20
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	0004      	movs	r4, r0
 8000c4c:	0008      	movs	r0, r1
 8000c4e:	603a      	str	r2, [r7, #0]
 8000c50:	0019      	movs	r1, r3
 8000c52:	1dfb      	adds	r3, r7, #7
 8000c54:	1c22      	adds	r2, r4, #0
 8000c56:	701a      	strb	r2, [r3, #0]
 8000c58:	1dbb      	adds	r3, r7, #6
 8000c5a:	1c02      	adds	r2, r0, #0
 8000c5c:	701a      	strb	r2, [r3, #0]
 8000c5e:	1d7b      	adds	r3, r7, #5
 8000c60:	1c0a      	adds	r2, r1, #0
 8000c62:	701a      	strb	r2, [r3, #0]
  // can't wait for bus to be busy in the case of a repeated start condition

  // 7-bit address of target is written to SADD 7:1 (0, 8, 9 ignored)
  I2C1->CR2 &= ~I2C_CR2_SADD_Msk;
 8000c64:	4b30      	ldr	r3, [pc, #192]	@ (8000d28 <_I2C1_StartRead+0xe4>)
 8000c66:	685a      	ldr	r2, [r3, #4]
 8000c68:	4b2f      	ldr	r3, [pc, #188]	@ (8000d28 <_I2C1_StartRead+0xe4>)
 8000c6a:	0a92      	lsrs	r2, r2, #10
 8000c6c:	0292      	lsls	r2, r2, #10
 8000c6e:	605a      	str	r2, [r3, #4]
  I2C1->CR2 |=  (unsigned int)address << 1; // target address, shifted up one position
 8000c70:	4b2d      	ldr	r3, [pc, #180]	@ (8000d28 <_I2C1_StartRead+0xe4>)
 8000c72:	6859      	ldr	r1, [r3, #4]
 8000c74:	1dfb      	adds	r3, r7, #7
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	005a      	lsls	r2, r3, #1
 8000c7a:	4b2b      	ldr	r3, [pc, #172]	@ (8000d28 <_I2C1_StartRead+0xe4>)
 8000c7c:	430a      	orrs	r2, r1
 8000c7e:	605a      	str	r2, [r3, #4]

  // setup bytes to transfer, excludes addressing byte
  I2C1->CR2 &= ~I2C_CR2_NBYTES_Msk;
 8000c80:	4b29      	ldr	r3, [pc, #164]	@ (8000d28 <_I2C1_StartRead+0xe4>)
 8000c82:	685a      	ldr	r2, [r3, #4]
 8000c84:	4b28      	ldr	r3, [pc, #160]	@ (8000d28 <_I2C1_StartRead+0xe4>)
 8000c86:	4929      	ldr	r1, [pc, #164]	@ (8000d2c <_I2C1_StartRead+0xe8>)
 8000c88:	400a      	ands	r2, r1
 8000c8a:	605a      	str	r2, [r3, #4]
  I2C1->CR2 |= bytecount << I2C_CR2_NBYTES_Pos;
 8000c8c:	4b26      	ldr	r3, [pc, #152]	@ (8000d28 <_I2C1_StartRead+0xe4>)
 8000c8e:	6859      	ldr	r1, [r3, #4]
 8000c90:	1dbb      	adds	r3, r7, #6
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	041a      	lsls	r2, r3, #16
 8000c96:	4b24      	ldr	r3, [pc, #144]	@ (8000d28 <_I2C1_StartRead+0xe4>)
 8000c98:	430a      	orrs	r2, r1
 8000c9a:	605a      	str	r2, [r3, #4]

  // set direction of transfer
  I2C1->CR2 |= I2C_CR2_RD_WRN; // 1 == want to read
 8000c9c:	4b22      	ldr	r3, [pc, #136]	@ (8000d28 <_I2C1_StartRead+0xe4>)
 8000c9e:	685a      	ldr	r2, [r3, #4]
 8000ca0:	4b21      	ldr	r3, [pc, #132]	@ (8000d28 <_I2C1_StartRead+0xe4>)
 8000ca2:	2180      	movs	r1, #128	@ 0x80
 8000ca4:	00c9      	lsls	r1, r1, #3
 8000ca6:	430a      	orrs	r2, r1
 8000ca8:	605a      	str	r2, [r3, #4]

  // issue the start condition
  I2C1->CR2 |= I2C_CR2_START; // start the communication...
 8000caa:	4b1f      	ldr	r3, [pc, #124]	@ (8000d28 <_I2C1_StartRead+0xe4>)
 8000cac:	685a      	ldr	r2, [r3, #4]
 8000cae:	4b1e      	ldr	r3, [pc, #120]	@ (8000d28 <_I2C1_StartRead+0xe4>)
 8000cb0:	2180      	movs	r1, #128	@ 0x80
 8000cb2:	0189      	lsls	r1, r1, #6
 8000cb4:	430a      	orrs	r2, r1
 8000cb6:	605a      	str	r2, [r3, #4]
  // so, assume for a restart, the transaction was started as software end
  //  the the TC flag will be set, and the clock is being stretched
  // if we flip to hardware, we want the NBYTES value to be non-zero

  // set the AUTOEND option
  I2C1->CR2 &= ~I2C_CR2_AUTOEND_Msk;
 8000cb8:	4b1b      	ldr	r3, [pc, #108]	@ (8000d28 <_I2C1_StartRead+0xe4>)
 8000cba:	685a      	ldr	r2, [r3, #4]
 8000cbc:	4b1a      	ldr	r3, [pc, #104]	@ (8000d28 <_I2C1_StartRead+0xe4>)
 8000cbe:	491c      	ldr	r1, [pc, #112]	@ (8000d30 <_I2C1_StartRead+0xec>)
 8000cc0:	400a      	ands	r2, r1
 8000cc2:	605a      	str	r2, [r3, #4]
  // this kills an ongoing transaction at this point***
  I2C1->CR2 |= (((unsigned int)endoption) << I2C_CR2_AUTOEND_Pos);
 8000cc4:	4b18      	ldr	r3, [pc, #96]	@ (8000d28 <_I2C1_StartRead+0xe4>)
 8000cc6:	6859      	ldr	r1, [r3, #4]
 8000cc8:	1d7b      	adds	r3, r7, #5
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	065a      	lsls	r2, r3, #25
 8000cce:	4b16      	ldr	r3, [pc, #88]	@ (8000d28 <_I2C1_StartRead+0xe4>)
 8000cd0:	430a      	orrs	r2, r1
 8000cd2:	605a      	str	r2, [r3, #4]

  // no need to wait for address transmission, unless there is a problem  
  //  as the next event if all goes well is a byte from the target device

  int readcounter = 0;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	60fb      	str	r3, [r7, #12]

  while (readcounter < bytecount)
 8000cd8:	e00f      	b.n	8000cfa <_I2C1_StartRead+0xb6>
  {
    // wait for byte
    while (!(I2C1->ISR & I2C_ISR_RXNE))
 8000cda:	46c0      	nop			@ (mov r8, r8)
 8000cdc:	4b12      	ldr	r3, [pc, #72]	@ (8000d28 <_I2C1_StartRead+0xe4>)
 8000cde:	699b      	ldr	r3, [r3, #24]
 8000ce0:	2204      	movs	r2, #4
 8000ce2:	4013      	ands	r3, r2
 8000ce4:	d0fa      	beq.n	8000cdc <_I2C1_StartRead+0x98>
    {
    }
  
    // read it
    pData[readcounter++] = I2C1->RXDR;
 8000ce6:	4b10      	ldr	r3, [pc, #64]	@ (8000d28 <_I2C1_StartRead+0xe4>)
 8000ce8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	1c5a      	adds	r2, r3, #1
 8000cee:	60fa      	str	r2, [r7, #12]
 8000cf0:	001a      	movs	r2, r3
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	189b      	adds	r3, r3, r2
 8000cf6:	b2ca      	uxtb	r2, r1
 8000cf8:	701a      	strb	r2, [r3, #0]
  while (readcounter < bytecount)
 8000cfa:	1dbb      	adds	r3, r7, #6
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	68fa      	ldr	r2, [r7, #12]
 8000d00:	429a      	cmp	r2, r3
 8000d02:	dbea      	blt.n	8000cda <_I2C1_StartRead+0x96>
  }

  if (endoption == _I2C_AutoEnd_Software)
 8000d04:	1d7b      	adds	r3, r7, #5
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d107      	bne.n	8000d1c <_I2C1_StartRead+0xd8>
  {
    // don't sent stop condition, but wait for TC flag
    while (!(I2C1->ISR & I2C_ISR_TC))
 8000d0c:	46c0      	nop			@ (mov r8, r8)
 8000d0e:	4b06      	ldr	r3, [pc, #24]	@ (8000d28 <_I2C1_StartRead+0xe4>)
 8000d10:	699b      	ldr	r3, [r3, #24]
 8000d12:	2240      	movs	r2, #64	@ 0x40
 8000d14:	4013      	ands	r3, r2
 8000d16:	d0fa      	beq.n	8000d0e <_I2C1_StartRead+0xca>
    {
    }  

    // we're done here, leave transaction active and return
    return 0;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	e000      	b.n	8000d1e <_I2C1_StartRead+0xda>
  }

  return 0;
 8000d1c:	2300      	movs	r3, #0
}
 8000d1e:	0018      	movs	r0, r3
 8000d20:	46bd      	mov	sp, r7
 8000d22:	b005      	add	sp, #20
 8000d24:	bd90      	pop	{r4, r7, pc}
 8000d26:	46c0      	nop			@ (mov r8, r8)
 8000d28:	40005400 	.word	0x40005400
 8000d2c:	ff00ffff 	.word	0xff00ffff
 8000d30:	fdffffff 	.word	0xfdffffff

08000d34 <_I2C1_StartWrite>:

int _I2C1_StartWrite (unsigned char address, unsigned char bytecount, unsigned char * pData, _I2C_AutoEndOption endoption)
{  
 8000d34:	b590      	push	{r4, r7, lr}
 8000d36:	b085      	sub	sp, #20
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	0004      	movs	r4, r0
 8000d3c:	0008      	movs	r0, r1
 8000d3e:	603a      	str	r2, [r7, #0]
 8000d40:	0019      	movs	r1, r3
 8000d42:	1dfb      	adds	r3, r7, #7
 8000d44:	1c22      	adds	r2, r4, #0
 8000d46:	701a      	strb	r2, [r3, #0]
 8000d48:	1dbb      	adds	r3, r7, #6
 8000d4a:	1c02      	adds	r2, r0, #0
 8000d4c:	701a      	strb	r2, [r3, #0]
 8000d4e:	1d7b      	adds	r3, r7, #5
 8000d50:	1c0a      	adds	r2, r1, #0
 8000d52:	701a      	strb	r2, [r3, #0]
  // upon entry, if required, wait for bus to be busy or not
  // this assumes no repreated start in the write case
  while (_I2C1_IsBusy())
 8000d54:	46c0      	nop			@ (mov r8, r8)
 8000d56:	f7ff ff67 	bl	8000c28 <_I2C1_IsBusy>
 8000d5a:	1e03      	subs	r3, r0, #0
 8000d5c:	d1fb      	bne.n	8000d56 <_I2C1_StartWrite+0x22>
  {;;;}

  // 7-bit address of target is written to SADD 7:1 (0, 8, 9 ignored)
  I2C1->CR2 &= ~I2C_CR2_SADD_Msk;
 8000d5e:	4b3c      	ldr	r3, [pc, #240]	@ (8000e50 <_I2C1_StartWrite+0x11c>)
 8000d60:	685a      	ldr	r2, [r3, #4]
 8000d62:	4b3b      	ldr	r3, [pc, #236]	@ (8000e50 <_I2C1_StartWrite+0x11c>)
 8000d64:	0a92      	lsrs	r2, r2, #10
 8000d66:	0292      	lsls	r2, r2, #10
 8000d68:	605a      	str	r2, [r3, #4]
  I2C1->CR2 |=  (unsigned int)address << 1; // target address, shifted up one position
 8000d6a:	4b39      	ldr	r3, [pc, #228]	@ (8000e50 <_I2C1_StartWrite+0x11c>)
 8000d6c:	6859      	ldr	r1, [r3, #4]
 8000d6e:	1dfb      	adds	r3, r7, #7
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	005a      	lsls	r2, r3, #1
 8000d74:	4b36      	ldr	r3, [pc, #216]	@ (8000e50 <_I2C1_StartWrite+0x11c>)
 8000d76:	430a      	orrs	r2, r1
 8000d78:	605a      	str	r2, [r3, #4]

  // setup bytes to transfer, excludes addressing byte
  I2C1->CR2 &= ~I2C_CR2_NBYTES_Msk;
 8000d7a:	4b35      	ldr	r3, [pc, #212]	@ (8000e50 <_I2C1_StartWrite+0x11c>)
 8000d7c:	685a      	ldr	r2, [r3, #4]
 8000d7e:	4b34      	ldr	r3, [pc, #208]	@ (8000e50 <_I2C1_StartWrite+0x11c>)
 8000d80:	4934      	ldr	r1, [pc, #208]	@ (8000e54 <_I2C1_StartWrite+0x120>)
 8000d82:	400a      	ands	r2, r1
 8000d84:	605a      	str	r2, [r3, #4]
  I2C1->CR2 |= bytecount << I2C_CR2_NBYTES_Pos;
 8000d86:	4b32      	ldr	r3, [pc, #200]	@ (8000e50 <_I2C1_StartWrite+0x11c>)
 8000d88:	6859      	ldr	r1, [r3, #4]
 8000d8a:	1dbb      	adds	r3, r7, #6
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	041a      	lsls	r2, r3, #16
 8000d90:	4b2f      	ldr	r3, [pc, #188]	@ (8000e50 <_I2C1_StartWrite+0x11c>)
 8000d92:	430a      	orrs	r2, r1
 8000d94:	605a      	str	r2, [r3, #4]

  // set direction of transfer
  I2C1->CR2 &= ~I2C_CR2_RD_WRN_Msk;
 8000d96:	4b2e      	ldr	r3, [pc, #184]	@ (8000e50 <_I2C1_StartWrite+0x11c>)
 8000d98:	685a      	ldr	r2, [r3, #4]
 8000d9a:	4b2d      	ldr	r3, [pc, #180]	@ (8000e50 <_I2C1_StartWrite+0x11c>)
 8000d9c:	492e      	ldr	r1, [pc, #184]	@ (8000e58 <_I2C1_StartWrite+0x124>)
 8000d9e:	400a      	ands	r2, r1
 8000da0:	605a      	str	r2, [r3, #4]

  // set the AUTOEND option
  I2C1->CR2 &= ~I2C_CR2_AUTOEND_Msk;
 8000da2:	4b2b      	ldr	r3, [pc, #172]	@ (8000e50 <_I2C1_StartWrite+0x11c>)
 8000da4:	685a      	ldr	r2, [r3, #4]
 8000da6:	4b2a      	ldr	r3, [pc, #168]	@ (8000e50 <_I2C1_StartWrite+0x11c>)
 8000da8:	492c      	ldr	r1, [pc, #176]	@ (8000e5c <_I2C1_StartWrite+0x128>)
 8000daa:	400a      	ands	r2, r1
 8000dac:	605a      	str	r2, [r3, #4]
  I2C1->CR2 |= (((unsigned int)endoption) << I2C_CR2_AUTOEND_Pos);
 8000dae:	4b28      	ldr	r3, [pc, #160]	@ (8000e50 <_I2C1_StartWrite+0x11c>)
 8000db0:	6859      	ldr	r1, [r3, #4]
 8000db2:	1d7b      	adds	r3, r7, #5
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	065a      	lsls	r2, r3, #25
 8000db8:	4b25      	ldr	r3, [pc, #148]	@ (8000e50 <_I2C1_StartWrite+0x11c>)
 8000dba:	430a      	orrs	r2, r1
 8000dbc:	605a      	str	r2, [r3, #4]

  // issue the start condition
  I2C1->CR2 |= I2C_CR2_START; // start the communication...
 8000dbe:	4b24      	ldr	r3, [pc, #144]	@ (8000e50 <_I2C1_StartWrite+0x11c>)
 8000dc0:	685a      	ldr	r2, [r3, #4]
 8000dc2:	4b23      	ldr	r3, [pc, #140]	@ (8000e50 <_I2C1_StartWrite+0x11c>)
 8000dc4:	2180      	movs	r1, #128	@ 0x80
 8000dc6:	0189      	lsls	r1, r1, #6
 8000dc8:	430a      	orrs	r2, r1
 8000dca:	605a      	str	r2, [r3, #4]
      
  // wait for address to clear
  while (!(I2C1->ISR & I2C_ISR_TXIS))
 8000dcc:	e007      	b.n	8000dde <_I2C1_StartWrite+0xaa>
  {
      if (I2C1->ISR & I2C_ISR_NACKF)
 8000dce:	4b20      	ldr	r3, [pc, #128]	@ (8000e50 <_I2C1_StartWrite+0x11c>)
 8000dd0:	699b      	ldr	r3, [r3, #24]
 8000dd2:	2210      	movs	r2, #16
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	d002      	beq.n	8000dde <_I2C1_StartWrite+0xaa>
      {
        // welp, no ack here, so device did not respond, need to clear
        //  nack flag
        return -2;
 8000dd8:	2302      	movs	r3, #2
 8000dda:	425b      	negs	r3, r3
 8000ddc:	e033      	b.n	8000e46 <_I2C1_StartWrite+0x112>
  while (!(I2C1->ISR & I2C_ISR_TXIS))
 8000dde:	4b1c      	ldr	r3, [pc, #112]	@ (8000e50 <_I2C1_StartWrite+0x11c>)
 8000de0:	699b      	ldr	r3, [r3, #24]
 8000de2:	2202      	movs	r2, #2
 8000de4:	4013      	ands	r3, r2
 8000de6:	d0f2      	beq.n	8000dce <_I2C1_StartWrite+0x9a>
      }
  }

  // all good so far, so write out the data, with the end style selected
  for (int iByteCount = bytecount; iByteCount > 1; iByteCount--)
 8000de8:	1dbb      	adds	r3, r7, #6
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	60fb      	str	r3, [r7, #12]
 8000dee:	e012      	b.n	8000e16 <_I2C1_StartWrite+0xe2>
  {
    I2C1->TXDR = pData[bytecount - iByteCount];
 8000df0:	1dbb      	adds	r3, r7, #6
 8000df2:	781a      	ldrb	r2, [r3, #0]
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	1ad3      	subs	r3, r2, r3
 8000df8:	001a      	movs	r2, r3
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	189b      	adds	r3, r3, r2
 8000dfe:	781a      	ldrb	r2, [r3, #0]
 8000e00:	4b13      	ldr	r3, [pc, #76]	@ (8000e50 <_I2C1_StartWrite+0x11c>)
 8000e02:	629a      	str	r2, [r3, #40]	@ 0x28

    // wait for byte to clear
    while (!(I2C1->ISR & I2C_ISR_TXIS))
 8000e04:	46c0      	nop			@ (mov r8, r8)
 8000e06:	4b12      	ldr	r3, [pc, #72]	@ (8000e50 <_I2C1_StartWrite+0x11c>)
 8000e08:	699b      	ldr	r3, [r3, #24]
 8000e0a:	2202      	movs	r2, #2
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	d0fa      	beq.n	8000e06 <_I2C1_StartWrite+0xd2>
  for (int iByteCount = bytecount; iByteCount > 1; iByteCount--)
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	3b01      	subs	r3, #1
 8000e14:	60fb      	str	r3, [r7, #12]
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	dce9      	bgt.n	8000df0 <_I2C1_StartWrite+0xbc>
    { ;;; }
  }

  // final (or only) byte is controlled by TC flag if software end
  I2C1->TXDR = pData [bytecount - 1];
 8000e1c:	1dbb      	adds	r3, r7, #6
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	3b01      	subs	r3, #1
 8000e22:	683a      	ldr	r2, [r7, #0]
 8000e24:	18d3      	adds	r3, r2, r3
 8000e26:	781a      	ldrb	r2, [r3, #0]
 8000e28:	4b09      	ldr	r3, [pc, #36]	@ (8000e50 <_I2C1_StartWrite+0x11c>)
 8000e2a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (endoption == _I2C_AutoEnd_Software)
 8000e2c:	1d7b      	adds	r3, r7, #5
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d107      	bne.n	8000e44 <_I2C1_StartWrite+0x110>
    // it's slower here, cause we are waiting for the transmission
    //  to complete, but it makes the read easier if we enter
    //  always knowning the transaction is ready to continue
    // maybe a future update
    
    while (!(I2C1->ISR & I2C_ISR_TC))
 8000e34:	46c0      	nop			@ (mov r8, r8)
 8000e36:	4b06      	ldr	r3, [pc, #24]	@ (8000e50 <_I2C1_StartWrite+0x11c>)
 8000e38:	699b      	ldr	r3, [r3, #24]
 8000e3a:	2240      	movs	r2, #64	@ 0x40
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	d0fa      	beq.n	8000e36 <_I2C1_StartWrite+0x102>
    { ;;; }  

    // we're done here, leave transaction active and return
    return 0;
 8000e40:	2300      	movs	r3, #0
 8000e42:	e000      	b.n	8000e46 <_I2C1_StartWrite+0x112>
  }

  // so, we're under hardware end (STOP will be automatically issued)  

  return 0;
 8000e44:	2300      	movs	r3, #0
}
 8000e46:	0018      	movs	r0, r3
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	b005      	add	sp, #20
 8000e4c:	bd90      	pop	{r4, r7, pc}
 8000e4e:	46c0      	nop			@ (mov r8, r8)
 8000e50:	40005400 	.word	0x40005400
 8000e54:	ff00ffff 	.word	0xff00ffff
 8000e58:	fffffbff 	.word	0xfffffbff
 8000e5c:	fdffffff 	.word	0xfdffffff

08000e60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e60:	b590      	push	{r4, r7, lr}
 8000e62:	b085      	sub	sp, #20
 8000e64:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e66:	f000 fb05 	bl	8001474 <HAL_Init>

  /* USER CODE BEGIN Init */
  MX_I2C1_Init();
 8000e6a:	f000 f8e5 	bl	8001038 <MX_I2C1_Init>
  //_ADXL343_Init();

    //Pedometer Setup
    _ADXL343_WriteReg8(0x19, 0x02);
 8000e6e:	2102      	movs	r1, #2
 8000e70:	2019      	movs	r0, #25
 8000e72:	f7ff f9ff 	bl	8000274 <_ADXL343_WriteReg8>
    ////wait

    _ADXL343_WriteReg8(0x7C, 0x01);
 8000e76:	2101      	movs	r1, #1
 8000e78:	207c      	movs	r0, #124	@ 0x7c
 8000e7a:	f7ff f9fb 	bl	8000274 <_ADXL343_WriteReg8>
    _ADXL343_WriteReg8(0x1A, 0x38);
 8000e7e:	2138      	movs	r1, #56	@ 0x38
 8000e80:	201a      	movs	r0, #26
 8000e82:	f7ff f9f7 	bl	8000274 <_ADXL343_WriteReg8>
    _ADXL343_WriteReg8(0x1B, 0x04);
 8000e86:	2104      	movs	r1, #4
 8000e88:	201b      	movs	r0, #27
 8000e8a:	f7ff f9f3 	bl	8000274 <_ADXL343_WriteReg8>
    _ADXL343_WriteReg8(0x1F, 0x80);
 8000e8e:	2180      	movs	r1, #128	@ 0x80
 8000e90:	201f      	movs	r0, #31
 8000e92:	f7ff f9ef 	bl	8000274 <_ADXL343_WriteReg8>
    _ADXL343_WriteReg8(0x21, 0x80);
 8000e96:	2180      	movs	r1, #128	@ 0x80
 8000e98:	2021      	movs	r0, #33	@ 0x21
 8000e9a:	f7ff f9eb 	bl	8000274 <_ADXL343_WriteReg8>



    //  //Step Counter
    _ADXL343_WriteReg8(0x18, 0x01); // enable walking mode
 8000e9e:	2101      	movs	r1, #1
 8000ea0:	2018      	movs	r0, #24
 8000ea2:	f7ff f9e7 	bl	8000274 <_ADXL343_WriteReg8>
    _ADXL343_WriteReg8(0x20, 0x01); // enable step interrupt
 8000ea6:	2101      	movs	r1, #1
 8000ea8:	2020      	movs	r0, #32
 8000eaa:	f7ff f9e3 	bl	8000274 <_ADXL343_WriteReg8>
    _ADXL343_WriteReg8(0x59, 0x01); // step ctr config
 8000eae:	2101      	movs	r1, #1
 8000eb0:	2059      	movs	r0, #89	@ 0x59
 8000eb2:	f7ff f9df 	bl	8000274 <_ADXL343_WriteReg8>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eb6:	f000 f861 	bl	8000f7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eba:	f000 f93d 	bl	8001138 <MX_GPIO_Init>

  MX_SPI1_Init();
 8000ebe:	f000 f8fb 	bl	80010b8 <MX_SPI1_Init>
  //MX_TIM17_Init();
  //MX_USART1_UART_Init();
  //MX_USART2_UART_Init();
  /* USER CODE BEGIN 2 */
  ST7735_Unselect();
 8000ec2:	f7ff fbe7 	bl	8000694 <ST7735_Unselect>
  ST7735_Init(1);
 8000ec6:	2001      	movs	r0, #1
 8000ec8:	f7ff fcf6 	bl	80008b8 <ST7735_Init>
  fillScreen(BLUE);
 8000ecc:	201f      	movs	r0, #31
 8000ece:	f7ff fbb9 	bl	8000644 <fillScreen>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  _ADXL343_ReadReg8(0x04, &accelX);
 8000ed2:	4b23      	ldr	r3, [pc, #140]	@ (8000f60 <main+0x100>)
 8000ed4:	0019      	movs	r1, r3
 8000ed6:	2004      	movs	r0, #4
 8000ed8:	f7ff f9aa 	bl	8000230 <_ADXL343_ReadReg8>
	  	  _ADXL343_ReadReg8(0x06, &accelY);
 8000edc:	4b21      	ldr	r3, [pc, #132]	@ (8000f64 <main+0x104>)
 8000ede:	0019      	movs	r1, r3
 8000ee0:	2006      	movs	r0, #6
 8000ee2:	f7ff f9a5 	bl	8000230 <_ADXL343_ReadReg8>
	  	  _ADXL343_ReadReg8(0x08, &accelZ);
 8000ee6:	4b20      	ldr	r3, [pc, #128]	@ (8000f68 <main+0x108>)
 8000ee8:	0019      	movs	r1, r3
 8000eea:	2008      	movs	r0, #8
 8000eec:	f7ff f9a0 	bl	8000230 <_ADXL343_ReadReg8>

	  	  sprintf(buffer2, "X:%d - Y:%d - Z:%d ", accelX, accelY, accelZ);
 8000ef0:	4b1b      	ldr	r3, [pc, #108]	@ (8000f60 <main+0x100>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	001a      	movs	r2, r3
 8000ef6:	4b1b      	ldr	r3, [pc, #108]	@ (8000f64 <main+0x104>)
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	001c      	movs	r4, r3
 8000efc:	4b1a      	ldr	r3, [pc, #104]	@ (8000f68 <main+0x108>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	491a      	ldr	r1, [pc, #104]	@ (8000f6c <main+0x10c>)
 8000f02:	481b      	ldr	r0, [pc, #108]	@ (8000f70 <main+0x110>)
 8000f04:	9300      	str	r3, [sp, #0]
 8000f06:	0023      	movs	r3, r4
 8000f08:	f002 f9e4 	bl	80032d4 <siprintf>
	  	drawString(10, 10, buffer2, BLACK, GREEN, 1, 1);
 8000f0c:	4a18      	ldr	r2, [pc, #96]	@ (8000f70 <main+0x110>)
 8000f0e:	2301      	movs	r3, #1
 8000f10:	9302      	str	r3, [sp, #8]
 8000f12:	2301      	movs	r3, #1
 8000f14:	9301      	str	r3, [sp, #4]
 8000f16:	23fc      	movs	r3, #252	@ 0xfc
 8000f18:	00db      	lsls	r3, r3, #3
 8000f1a:	9300      	str	r3, [sp, #0]
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	210a      	movs	r1, #10
 8000f20:	200a      	movs	r0, #10
 8000f22:	f7ff fa29 	bl	8000378 <drawString>

	  	  _ADXL343_ReadReg8(0x15, &steps);
 8000f26:	4b13      	ldr	r3, [pc, #76]	@ (8000f74 <main+0x114>)
 8000f28:	0019      	movs	r1, r3
 8000f2a:	2015      	movs	r0, #21
 8000f2c:	f7ff f980 	bl	8000230 <_ADXL343_ReadReg8>

	  	  sprintf(buffer2, "Steps: %d ", steps);
 8000f30:	4b10      	ldr	r3, [pc, #64]	@ (8000f74 <main+0x114>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	001a      	movs	r2, r3
 8000f36:	4910      	ldr	r1, [pc, #64]	@ (8000f78 <main+0x118>)
 8000f38:	4b0d      	ldr	r3, [pc, #52]	@ (8000f70 <main+0x110>)
 8000f3a:	0018      	movs	r0, r3
 8000f3c:	f002 f9ca 	bl	80032d4 <siprintf>
	  	drawString(20, 20, buffer2, BLACK, GREEN, 1, 1);
 8000f40:	4a0b      	ldr	r2, [pc, #44]	@ (8000f70 <main+0x110>)
 8000f42:	2301      	movs	r3, #1
 8000f44:	9302      	str	r3, [sp, #8]
 8000f46:	2301      	movs	r3, #1
 8000f48:	9301      	str	r3, [sp, #4]
 8000f4a:	23fc      	movs	r3, #252	@ 0xfc
 8000f4c:	00db      	lsls	r3, r3, #3
 8000f4e:	9300      	str	r3, [sp, #0]
 8000f50:	2300      	movs	r3, #0
 8000f52:	2114      	movs	r1, #20
 8000f54:	2014      	movs	r0, #20
 8000f56:	f7ff fa0f 	bl	8000378 <drawString>
	  _ADXL343_ReadReg8(0x04, &accelX);
 8000f5a:	46c0      	nop			@ (mov r8, r8)
 8000f5c:	e7b9      	b.n	8000ed2 <main+0x72>
 8000f5e:	46c0      	nop			@ (mov r8, r8)
 8000f60:	200000e8 	.word	0x200000e8
 8000f64:	200000e9 	.word	0x200000e9
 8000f68:	200000ea 	.word	0x200000ea
 8000f6c:	08003c28 	.word	0x08003c28
 8000f70:	20000084 	.word	0x20000084
 8000f74:	200000eb 	.word	0x200000eb
 8000f78:	08003c3c 	.word	0x08003c3c

08000f7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f7c:	b590      	push	{r4, r7, lr}
 8000f7e:	b095      	sub	sp, #84	@ 0x54
 8000f80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f82:	2414      	movs	r4, #20
 8000f84:	193b      	adds	r3, r7, r4
 8000f86:	0018      	movs	r0, r3
 8000f88:	233c      	movs	r3, #60	@ 0x3c
 8000f8a:	001a      	movs	r2, r3
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	f002 f9c1 	bl	8003314 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f92:	1d3b      	adds	r3, r7, #4
 8000f94:	0018      	movs	r0, r3
 8000f96:	2310      	movs	r3, #16
 8000f98:	001a      	movs	r2, r3
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	f002 f9ba 	bl	8003314 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fa0:	2380      	movs	r3, #128	@ 0x80
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	0018      	movs	r0, r3
 8000fa6:	f000 fea1 	bl	8001cec <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000faa:	193b      	adds	r3, r7, r4
 8000fac:	2202      	movs	r2, #2
 8000fae:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fb0:	193b      	adds	r3, r7, r4
 8000fb2:	2280      	movs	r2, #128	@ 0x80
 8000fb4:	0052      	lsls	r2, r2, #1
 8000fb6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000fb8:	0021      	movs	r1, r4
 8000fba:	187b      	adds	r3, r7, r1
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fc0:	187b      	adds	r3, r7, r1
 8000fc2:	2240      	movs	r2, #64	@ 0x40
 8000fc4:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fc6:	187b      	adds	r3, r7, r1
 8000fc8:	2202      	movs	r2, #2
 8000fca:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fcc:	187b      	adds	r3, r7, r1
 8000fce:	2202      	movs	r2, #2
 8000fd0:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000fd2:	187b      	adds	r3, r7, r1
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000fd8:	187b      	adds	r3, r7, r1
 8000fda:	2208      	movs	r2, #8
 8000fdc:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fde:	187b      	adds	r3, r7, r1
 8000fe0:	2280      	movs	r2, #128	@ 0x80
 8000fe2:	0292      	lsls	r2, r2, #10
 8000fe4:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000fe6:	187b      	adds	r3, r7, r1
 8000fe8:	2280      	movs	r2, #128	@ 0x80
 8000fea:	0492      	lsls	r2, r2, #18
 8000fec:	635a      	str	r2, [r3, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000fee:	187b      	adds	r3, r7, r1
 8000ff0:	2280      	movs	r2, #128	@ 0x80
 8000ff2:	0592      	lsls	r2, r2, #22
 8000ff4:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ff6:	187b      	adds	r3, r7, r1
 8000ff8:	0018      	movs	r0, r3
 8000ffa:	f000 feb7 	bl	8001d6c <HAL_RCC_OscConfig>
 8000ffe:	1e03      	subs	r3, r0, #0
 8001000:	d001      	beq.n	8001006 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001002:	f000 f8dd 	bl	80011c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001006:	1d3b      	adds	r3, r7, #4
 8001008:	2207      	movs	r2, #7
 800100a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800100c:	1d3b      	adds	r3, r7, #4
 800100e:	2202      	movs	r2, #2
 8001010:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001012:	1d3b      	adds	r3, r7, #4
 8001014:	2200      	movs	r2, #0
 8001016:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001018:	1d3b      	adds	r3, r7, #4
 800101a:	2200      	movs	r2, #0
 800101c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800101e:	1d3b      	adds	r3, r7, #4
 8001020:	2102      	movs	r1, #2
 8001022:	0018      	movs	r0, r3
 8001024:	f001 fa02 	bl	800242c <HAL_RCC_ClockConfig>
 8001028:	1e03      	subs	r3, r0, #0
 800102a:	d001      	beq.n	8001030 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800102c:	f000 f8c8 	bl	80011c0 <Error_Handler>
  }
}
 8001030:	46c0      	nop			@ (mov r8, r8)
 8001032:	46bd      	mov	sp, r7
 8001034:	b015      	add	sp, #84	@ 0x54
 8001036:	bd90      	pop	{r4, r7, pc}

08001038 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800103c:	4b1b      	ldr	r3, [pc, #108]	@ (80010ac <MX_I2C1_Init+0x74>)
 800103e:	4a1c      	ldr	r2, [pc, #112]	@ (80010b0 <MX_I2C1_Init+0x78>)
 8001040:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10B17DB5;
 8001042:	4b1a      	ldr	r3, [pc, #104]	@ (80010ac <MX_I2C1_Init+0x74>)
 8001044:	4a1b      	ldr	r2, [pc, #108]	@ (80010b4 <MX_I2C1_Init+0x7c>)
 8001046:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001048:	4b18      	ldr	r3, [pc, #96]	@ (80010ac <MX_I2C1_Init+0x74>)
 800104a:	2200      	movs	r2, #0
 800104c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800104e:	4b17      	ldr	r3, [pc, #92]	@ (80010ac <MX_I2C1_Init+0x74>)
 8001050:	2201      	movs	r2, #1
 8001052:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001054:	4b15      	ldr	r3, [pc, #84]	@ (80010ac <MX_I2C1_Init+0x74>)
 8001056:	2200      	movs	r2, #0
 8001058:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800105a:	4b14      	ldr	r3, [pc, #80]	@ (80010ac <MX_I2C1_Init+0x74>)
 800105c:	2200      	movs	r2, #0
 800105e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001060:	4b12      	ldr	r3, [pc, #72]	@ (80010ac <MX_I2C1_Init+0x74>)
 8001062:	2200      	movs	r2, #0
 8001064:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001066:	4b11      	ldr	r3, [pc, #68]	@ (80010ac <MX_I2C1_Init+0x74>)
 8001068:	2200      	movs	r2, #0
 800106a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800106c:	4b0f      	ldr	r3, [pc, #60]	@ (80010ac <MX_I2C1_Init+0x74>)
 800106e:	2200      	movs	r2, #0
 8001070:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001072:	4b0e      	ldr	r3, [pc, #56]	@ (80010ac <MX_I2C1_Init+0x74>)
 8001074:	0018      	movs	r0, r3
 8001076:	f000 fcfb 	bl	8001a70 <HAL_I2C_Init>
 800107a:	1e03      	subs	r3, r0, #0
 800107c:	d001      	beq.n	8001082 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800107e:	f000 f89f 	bl	80011c0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001082:	4b0a      	ldr	r3, [pc, #40]	@ (80010ac <MX_I2C1_Init+0x74>)
 8001084:	2100      	movs	r1, #0
 8001086:	0018      	movs	r0, r3
 8001088:	f000 fd98 	bl	8001bbc <HAL_I2CEx_ConfigAnalogFilter>
 800108c:	1e03      	subs	r3, r0, #0
 800108e:	d001      	beq.n	8001094 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001090:	f000 f896 	bl	80011c0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001094:	4b05      	ldr	r3, [pc, #20]	@ (80010ac <MX_I2C1_Init+0x74>)
 8001096:	2100      	movs	r1, #0
 8001098:	0018      	movs	r0, r3
 800109a:	f000 fddb 	bl	8001c54 <HAL_I2CEx_ConfigDigitalFilter>
 800109e:	1e03      	subs	r3, r0, #0
 80010a0:	d001      	beq.n	80010a6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80010a2:	f000 f88d 	bl	80011c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010a6:	46c0      	nop			@ (mov r8, r8)
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	200000ec 	.word	0x200000ec
 80010b0:	40005400 	.word	0x40005400
 80010b4:	10b17db5 	.word	0x10b17db5

080010b8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80010bc:	4b1c      	ldr	r3, [pc, #112]	@ (8001130 <MX_SPI1_Init+0x78>)
 80010be:	4a1d      	ldr	r2, [pc, #116]	@ (8001134 <MX_SPI1_Init+0x7c>)
 80010c0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80010c2:	4b1b      	ldr	r3, [pc, #108]	@ (8001130 <MX_SPI1_Init+0x78>)
 80010c4:	2282      	movs	r2, #130	@ 0x82
 80010c6:	0052      	lsls	r2, r2, #1
 80010c8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 80010ca:	4b19      	ldr	r3, [pc, #100]	@ (8001130 <MX_SPI1_Init+0x78>)
 80010cc:	2280      	movs	r2, #128	@ 0x80
 80010ce:	0212      	lsls	r2, r2, #8
 80010d0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80010d2:	4b17      	ldr	r3, [pc, #92]	@ (8001130 <MX_SPI1_Init+0x78>)
 80010d4:	22e0      	movs	r2, #224	@ 0xe0
 80010d6:	00d2      	lsls	r2, r2, #3
 80010d8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010da:	4b15      	ldr	r3, [pc, #84]	@ (8001130 <MX_SPI1_Init+0x78>)
 80010dc:	2200      	movs	r2, #0
 80010de:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010e0:	4b13      	ldr	r3, [pc, #76]	@ (8001130 <MX_SPI1_Init+0x78>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80010e6:	4b12      	ldr	r3, [pc, #72]	@ (8001130 <MX_SPI1_Init+0x78>)
 80010e8:	2280      	movs	r2, #128	@ 0x80
 80010ea:	0092      	lsls	r2, r2, #2
 80010ec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80010ee:	4b10      	ldr	r3, [pc, #64]	@ (8001130 <MX_SPI1_Init+0x78>)
 80010f0:	2220      	movs	r2, #32
 80010f2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010f4:	4b0e      	ldr	r3, [pc, #56]	@ (8001130 <MX_SPI1_Init+0x78>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80010fa:	4b0d      	ldr	r3, [pc, #52]	@ (8001130 <MX_SPI1_Init+0x78>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001100:	4b0b      	ldr	r3, [pc, #44]	@ (8001130 <MX_SPI1_Init+0x78>)
 8001102:	2200      	movs	r2, #0
 8001104:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001106:	4b0a      	ldr	r3, [pc, #40]	@ (8001130 <MX_SPI1_Init+0x78>)
 8001108:	2207      	movs	r2, #7
 800110a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800110c:	4b08      	ldr	r3, [pc, #32]	@ (8001130 <MX_SPI1_Init+0x78>)
 800110e:	2200      	movs	r2, #0
 8001110:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001112:	4b07      	ldr	r3, [pc, #28]	@ (8001130 <MX_SPI1_Init+0x78>)
 8001114:	2208      	movs	r2, #8
 8001116:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001118:	4b05      	ldr	r3, [pc, #20]	@ (8001130 <MX_SPI1_Init+0x78>)
 800111a:	0018      	movs	r0, r3
 800111c:	f001 fd4c 	bl	8002bb8 <HAL_SPI_Init>
 8001120:	1e03      	subs	r3, r0, #0
 8001122:	d001      	beq.n	8001128 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 8001124:	f000 f84c 	bl	80011c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001128:	46c0      	nop			@ (mov r8, r8)
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	46c0      	nop			@ (mov r8, r8)
 8001130:	20000140 	.word	0x20000140
 8001134:	40013000 	.word	0x40013000

08001138 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001138:	b590      	push	{r4, r7, lr}
 800113a:	b089      	sub	sp, #36	@ 0x24
 800113c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113e:	240c      	movs	r4, #12
 8001140:	193b      	adds	r3, r7, r4
 8001142:	0018      	movs	r0, r3
 8001144:	2314      	movs	r3, #20
 8001146:	001a      	movs	r2, r3
 8001148:	2100      	movs	r1, #0
 800114a:	f002 f8e3 	bl	8003314 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800114e:	4b1b      	ldr	r3, [pc, #108]	@ (80011bc <MX_GPIO_Init+0x84>)
 8001150:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001152:	4b1a      	ldr	r3, [pc, #104]	@ (80011bc <MX_GPIO_Init+0x84>)
 8001154:	2101      	movs	r1, #1
 8001156:	430a      	orrs	r2, r1
 8001158:	635a      	str	r2, [r3, #52]	@ 0x34
 800115a:	4b18      	ldr	r3, [pc, #96]	@ (80011bc <MX_GPIO_Init+0x84>)
 800115c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800115e:	2201      	movs	r2, #1
 8001160:	4013      	ands	r3, r2
 8001162:	60bb      	str	r3, [r7, #8]
 8001164:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001166:	4b15      	ldr	r3, [pc, #84]	@ (80011bc <MX_GPIO_Init+0x84>)
 8001168:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800116a:	4b14      	ldr	r3, [pc, #80]	@ (80011bc <MX_GPIO_Init+0x84>)
 800116c:	2104      	movs	r1, #4
 800116e:	430a      	orrs	r2, r1
 8001170:	635a      	str	r2, [r3, #52]	@ 0x34
 8001172:	4b12      	ldr	r3, [pc, #72]	@ (80011bc <MX_GPIO_Init+0x84>)
 8001174:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001176:	2204      	movs	r2, #4
 8001178:	4013      	ands	r3, r2
 800117a:	607b      	str	r3, [r7, #4]
 800117c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 800117e:	23a0      	movs	r3, #160	@ 0xa0
 8001180:	05db      	lsls	r3, r3, #23
 8001182:	2200      	movs	r2, #0
 8001184:	2138      	movs	r1, #56	@ 0x38
 8001186:	0018      	movs	r0, r3
 8001188:	f000 fc54 	bl	8001a34 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA3 PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800118c:	0021      	movs	r1, r4
 800118e:	187b      	adds	r3, r7, r1
 8001190:	2238      	movs	r2, #56	@ 0x38
 8001192:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001194:	187b      	adds	r3, r7, r1
 8001196:	2201      	movs	r2, #1
 8001198:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119a:	187b      	adds	r3, r7, r1
 800119c:	2200      	movs	r2, #0
 800119e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a0:	187b      	adds	r3, r7, r1
 80011a2:	2200      	movs	r2, #0
 80011a4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a6:	187a      	adds	r2, r7, r1
 80011a8:	23a0      	movs	r3, #160	@ 0xa0
 80011aa:	05db      	lsls	r3, r3, #23
 80011ac:	0011      	movs	r1, r2
 80011ae:	0018      	movs	r0, r3
 80011b0:	f000 fad4 	bl	800175c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011b4:	46c0      	nop			@ (mov r8, r8)
 80011b6:	46bd      	mov	sp, r7
 80011b8:	b009      	add	sp, #36	@ 0x24
 80011ba:	bd90      	pop	{r4, r7, pc}
 80011bc:	40021000 	.word	0x40021000

080011c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011c4:	b672      	cpsid	i
}
 80011c6:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011c8:	46c0      	nop			@ (mov r8, r8)
 80011ca:	e7fd      	b.n	80011c8 <Error_Handler+0x8>

080011cc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011d2:	4b11      	ldr	r3, [pc, #68]	@ (8001218 <HAL_MspInit+0x4c>)
 80011d4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80011d6:	4b10      	ldr	r3, [pc, #64]	@ (8001218 <HAL_MspInit+0x4c>)
 80011d8:	2101      	movs	r1, #1
 80011da:	430a      	orrs	r2, r1
 80011dc:	641a      	str	r2, [r3, #64]	@ 0x40
 80011de:	4b0e      	ldr	r3, [pc, #56]	@ (8001218 <HAL_MspInit+0x4c>)
 80011e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e2:	2201      	movs	r2, #1
 80011e4:	4013      	ands	r3, r2
 80011e6:	607b      	str	r3, [r7, #4]
 80011e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001218 <HAL_MspInit+0x4c>)
 80011ec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80011ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001218 <HAL_MspInit+0x4c>)
 80011f0:	2180      	movs	r1, #128	@ 0x80
 80011f2:	0549      	lsls	r1, r1, #21
 80011f4:	430a      	orrs	r2, r1
 80011f6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80011f8:	4b07      	ldr	r3, [pc, #28]	@ (8001218 <HAL_MspInit+0x4c>)
 80011fa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80011fc:	2380      	movs	r3, #128	@ 0x80
 80011fe:	055b      	lsls	r3, r3, #21
 8001200:	4013      	ands	r3, r2
 8001202:	603b      	str	r3, [r7, #0]
 8001204:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8001206:	23c0      	movs	r3, #192	@ 0xc0
 8001208:	00db      	lsls	r3, r3, #3
 800120a:	0018      	movs	r0, r3
 800120c:	f000 f9dc 	bl	80015c8 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001210:	46c0      	nop			@ (mov r8, r8)
 8001212:	46bd      	mov	sp, r7
 8001214:	b002      	add	sp, #8
 8001216:	bd80      	pop	{r7, pc}
 8001218:	40021000 	.word	0x40021000

0800121c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800121c:	b590      	push	{r4, r7, lr}
 800121e:	b09d      	sub	sp, #116	@ 0x74
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001224:	235c      	movs	r3, #92	@ 0x5c
 8001226:	18fb      	adds	r3, r7, r3
 8001228:	0018      	movs	r0, r3
 800122a:	2314      	movs	r3, #20
 800122c:	001a      	movs	r2, r3
 800122e:	2100      	movs	r1, #0
 8001230:	f002 f870 	bl	8003314 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001234:	2410      	movs	r4, #16
 8001236:	193b      	adds	r3, r7, r4
 8001238:	0018      	movs	r0, r3
 800123a:	234c      	movs	r3, #76	@ 0x4c
 800123c:	001a      	movs	r2, r3
 800123e:	2100      	movs	r1, #0
 8001240:	f002 f868 	bl	8003314 <memset>
  if(hi2c->Instance==I2C1)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a23      	ldr	r2, [pc, #140]	@ (80012d8 <HAL_I2C_MspInit+0xbc>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d13f      	bne.n	80012ce <HAL_I2C_MspInit+0xb2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800124e:	193b      	adds	r3, r7, r4
 8001250:	2220      	movs	r2, #32
 8001252:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001254:	193b      	adds	r3, r7, r4
 8001256:	2200      	movs	r2, #0
 8001258:	619a      	str	r2, [r3, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800125a:	193b      	adds	r3, r7, r4
 800125c:	0018      	movs	r0, r3
 800125e:	f001 fa6f 	bl	8002740 <HAL_RCCEx_PeriphCLKConfig>
 8001262:	1e03      	subs	r3, r0, #0
 8001264:	d001      	beq.n	800126a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001266:	f7ff ffab 	bl	80011c0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800126a:	4b1c      	ldr	r3, [pc, #112]	@ (80012dc <HAL_I2C_MspInit+0xc0>)
 800126c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800126e:	4b1b      	ldr	r3, [pc, #108]	@ (80012dc <HAL_I2C_MspInit+0xc0>)
 8001270:	2101      	movs	r1, #1
 8001272:	430a      	orrs	r2, r1
 8001274:	635a      	str	r2, [r3, #52]	@ 0x34
 8001276:	4b19      	ldr	r3, [pc, #100]	@ (80012dc <HAL_I2C_MspInit+0xc0>)
 8001278:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800127a:	2201      	movs	r2, #1
 800127c:	4013      	ands	r3, r2
 800127e:	60fb      	str	r3, [r7, #12]
 8001280:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001282:	215c      	movs	r1, #92	@ 0x5c
 8001284:	187b      	adds	r3, r7, r1
 8001286:	22c0      	movs	r2, #192	@ 0xc0
 8001288:	00d2      	lsls	r2, r2, #3
 800128a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800128c:	187b      	adds	r3, r7, r1
 800128e:	2212      	movs	r2, #18
 8001290:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001292:	187b      	adds	r3, r7, r1
 8001294:	2200      	movs	r2, #0
 8001296:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001298:	187b      	adds	r3, r7, r1
 800129a:	2200      	movs	r2, #0
 800129c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 800129e:	187b      	adds	r3, r7, r1
 80012a0:	2206      	movs	r2, #6
 80012a2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a4:	187a      	adds	r2, r7, r1
 80012a6:	23a0      	movs	r3, #160	@ 0xa0
 80012a8:	05db      	lsls	r3, r3, #23
 80012aa:	0011      	movs	r1, r2
 80012ac:	0018      	movs	r0, r3
 80012ae:	f000 fa55 	bl	800175c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012b2:	4b0a      	ldr	r3, [pc, #40]	@ (80012dc <HAL_I2C_MspInit+0xc0>)
 80012b4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80012b6:	4b09      	ldr	r3, [pc, #36]	@ (80012dc <HAL_I2C_MspInit+0xc0>)
 80012b8:	2180      	movs	r1, #128	@ 0x80
 80012ba:	0389      	lsls	r1, r1, #14
 80012bc:	430a      	orrs	r2, r1
 80012be:	63da      	str	r2, [r3, #60]	@ 0x3c
 80012c0:	4b06      	ldr	r3, [pc, #24]	@ (80012dc <HAL_I2C_MspInit+0xc0>)
 80012c2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80012c4:	2380      	movs	r3, #128	@ 0x80
 80012c6:	039b      	lsls	r3, r3, #14
 80012c8:	4013      	ands	r3, r2
 80012ca:	60bb      	str	r3, [r7, #8]
 80012cc:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80012ce:	46c0      	nop			@ (mov r8, r8)
 80012d0:	46bd      	mov	sp, r7
 80012d2:	b01d      	add	sp, #116	@ 0x74
 80012d4:	bd90      	pop	{r4, r7, pc}
 80012d6:	46c0      	nop			@ (mov r8, r8)
 80012d8:	40005400 	.word	0x40005400
 80012dc:	40021000 	.word	0x40021000

080012e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012e0:	b590      	push	{r4, r7, lr}
 80012e2:	b08b      	sub	sp, #44	@ 0x2c
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e8:	2414      	movs	r4, #20
 80012ea:	193b      	adds	r3, r7, r4
 80012ec:	0018      	movs	r0, r3
 80012ee:	2314      	movs	r3, #20
 80012f0:	001a      	movs	r2, r3
 80012f2:	2100      	movs	r1, #0
 80012f4:	f002 f80e 	bl	8003314 <memset>
  if(hspi->Instance==SPI1)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a1b      	ldr	r2, [pc, #108]	@ (800136c <HAL_SPI_MspInit+0x8c>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d130      	bne.n	8001364 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001302:	4b1b      	ldr	r3, [pc, #108]	@ (8001370 <HAL_SPI_MspInit+0x90>)
 8001304:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001306:	4b1a      	ldr	r3, [pc, #104]	@ (8001370 <HAL_SPI_MspInit+0x90>)
 8001308:	2180      	movs	r1, #128	@ 0x80
 800130a:	0149      	lsls	r1, r1, #5
 800130c:	430a      	orrs	r2, r1
 800130e:	641a      	str	r2, [r3, #64]	@ 0x40
 8001310:	4b17      	ldr	r3, [pc, #92]	@ (8001370 <HAL_SPI_MspInit+0x90>)
 8001312:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001314:	2380      	movs	r3, #128	@ 0x80
 8001316:	015b      	lsls	r3, r3, #5
 8001318:	4013      	ands	r3, r2
 800131a:	613b      	str	r3, [r7, #16]
 800131c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800131e:	4b14      	ldr	r3, [pc, #80]	@ (8001370 <HAL_SPI_MspInit+0x90>)
 8001320:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001322:	4b13      	ldr	r3, [pc, #76]	@ (8001370 <HAL_SPI_MspInit+0x90>)
 8001324:	2101      	movs	r1, #1
 8001326:	430a      	orrs	r2, r1
 8001328:	635a      	str	r2, [r3, #52]	@ 0x34
 800132a:	4b11      	ldr	r3, [pc, #68]	@ (8001370 <HAL_SPI_MspInit+0x90>)
 800132c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800132e:	2201      	movs	r2, #1
 8001330:	4013      	ands	r3, r2
 8001332:	60fb      	str	r3, [r7, #12]
 8001334:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA2     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8001336:	0021      	movs	r1, r4
 8001338:	187b      	adds	r3, r7, r1
 800133a:	2206      	movs	r2, #6
 800133c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800133e:	187b      	adds	r3, r7, r1
 8001340:	2202      	movs	r2, #2
 8001342:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001344:	187b      	adds	r3, r7, r1
 8001346:	2200      	movs	r2, #0
 8001348:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134a:	187b      	adds	r3, r7, r1
 800134c:	2200      	movs	r2, #0
 800134e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001350:	187b      	adds	r3, r7, r1
 8001352:	2200      	movs	r2, #0
 8001354:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001356:	187a      	adds	r2, r7, r1
 8001358:	23a0      	movs	r3, #160	@ 0xa0
 800135a:	05db      	lsls	r3, r3, #23
 800135c:	0011      	movs	r1, r2
 800135e:	0018      	movs	r0, r3
 8001360:	f000 f9fc 	bl	800175c <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001364:	46c0      	nop			@ (mov r8, r8)
 8001366:	46bd      	mov	sp, r7
 8001368:	b00b      	add	sp, #44	@ 0x2c
 800136a:	bd90      	pop	{r4, r7, pc}
 800136c:	40013000 	.word	0x40013000
 8001370:	40021000 	.word	0x40021000

08001374 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001378:	46c0      	nop			@ (mov r8, r8)
 800137a:	e7fd      	b.n	8001378 <NMI_Handler+0x4>

0800137c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001380:	46c0      	nop			@ (mov r8, r8)
 8001382:	e7fd      	b.n	8001380 <HardFault_Handler+0x4>

08001384 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001388:	46c0      	nop			@ (mov r8, r8)
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}

0800138e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800138e:	b580      	push	{r7, lr}
 8001390:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001392:	46c0      	nop			@ (mov r8, r8)
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}

08001398 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800139c:	f000 f8d4 	bl	8001548 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013a0:	46c0      	nop			@ (mov r8, r8)
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
	...

080013a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b086      	sub	sp, #24
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013b0:	4a14      	ldr	r2, [pc, #80]	@ (8001404 <_sbrk+0x5c>)
 80013b2:	4b15      	ldr	r3, [pc, #84]	@ (8001408 <_sbrk+0x60>)
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013bc:	4b13      	ldr	r3, [pc, #76]	@ (800140c <_sbrk+0x64>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d102      	bne.n	80013ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013c4:	4b11      	ldr	r3, [pc, #68]	@ (800140c <_sbrk+0x64>)
 80013c6:	4a12      	ldr	r2, [pc, #72]	@ (8001410 <_sbrk+0x68>)
 80013c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013ca:	4b10      	ldr	r3, [pc, #64]	@ (800140c <_sbrk+0x64>)
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	18d3      	adds	r3, r2, r3
 80013d2:	693a      	ldr	r2, [r7, #16]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	d207      	bcs.n	80013e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013d8:	f001 ffa4 	bl	8003324 <__errno>
 80013dc:	0003      	movs	r3, r0
 80013de:	220c      	movs	r2, #12
 80013e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013e2:	2301      	movs	r3, #1
 80013e4:	425b      	negs	r3, r3
 80013e6:	e009      	b.n	80013fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013e8:	4b08      	ldr	r3, [pc, #32]	@ (800140c <_sbrk+0x64>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013ee:	4b07      	ldr	r3, [pc, #28]	@ (800140c <_sbrk+0x64>)
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	18d2      	adds	r2, r2, r3
 80013f6:	4b05      	ldr	r3, [pc, #20]	@ (800140c <_sbrk+0x64>)
 80013f8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80013fa:	68fb      	ldr	r3, [r7, #12]
}
 80013fc:	0018      	movs	r0, r3
 80013fe:	46bd      	mov	sp, r7
 8001400:	b006      	add	sp, #24
 8001402:	bd80      	pop	{r7, pc}
 8001404:	20024000 	.word	0x20024000
 8001408:	00000400 	.word	0x00000400
 800140c:	200001a4 	.word	0x200001a4
 8001410:	200002f8 	.word	0x200002f8

08001414 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001418:	46c0      	nop			@ (mov r8, r8)
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
	...

08001420 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001420:	480d      	ldr	r0, [pc, #52]	@ (8001458 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001422:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001424:	f7ff fff6 	bl	8001414 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001428:	480c      	ldr	r0, [pc, #48]	@ (800145c <LoopForever+0x6>)
  ldr r1, =_edata
 800142a:	490d      	ldr	r1, [pc, #52]	@ (8001460 <LoopForever+0xa>)
  ldr r2, =_sidata
 800142c:	4a0d      	ldr	r2, [pc, #52]	@ (8001464 <LoopForever+0xe>)
  movs r3, #0
 800142e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001430:	e002      	b.n	8001438 <LoopCopyDataInit>

08001432 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001432:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001434:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001436:	3304      	adds	r3, #4

08001438 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001438:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800143a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800143c:	d3f9      	bcc.n	8001432 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800143e:	4a0a      	ldr	r2, [pc, #40]	@ (8001468 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001440:	4c0a      	ldr	r4, [pc, #40]	@ (800146c <LoopForever+0x16>)
  movs r3, #0
 8001442:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001444:	e001      	b.n	800144a <LoopFillZerobss>

08001446 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001446:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001448:	3204      	adds	r2, #4

0800144a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800144a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800144c:	d3fb      	bcc.n	8001446 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800144e:	f001 ff6f 	bl	8003330 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001452:	f7ff fd05 	bl	8000e60 <main>

08001456 <LoopForever>:

LoopForever:
  b LoopForever
 8001456:	e7fe      	b.n	8001456 <LoopForever>
  ldr   r0, =_estack
 8001458:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 800145c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001460:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001464:	08004234 	.word	0x08004234
  ldr r2, =_sbss
 8001468:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800146c:	200002f4 	.word	0x200002f4

08001470 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001470:	e7fe      	b.n	8001470 <ADC1_COMP_IRQHandler>
	...

08001474 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800147a:	1dfb      	adds	r3, r7, #7
 800147c:	2200      	movs	r2, #0
 800147e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001480:	4b0b      	ldr	r3, [pc, #44]	@ (80014b0 <HAL_Init+0x3c>)
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	4b0a      	ldr	r3, [pc, #40]	@ (80014b0 <HAL_Init+0x3c>)
 8001486:	2180      	movs	r1, #128	@ 0x80
 8001488:	0049      	lsls	r1, r1, #1
 800148a:	430a      	orrs	r2, r1
 800148c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800148e:	2003      	movs	r0, #3
 8001490:	f000 f810 	bl	80014b4 <HAL_InitTick>
 8001494:	1e03      	subs	r3, r0, #0
 8001496:	d003      	beq.n	80014a0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001498:	1dfb      	adds	r3, r7, #7
 800149a:	2201      	movs	r2, #1
 800149c:	701a      	strb	r2, [r3, #0]
 800149e:	e001      	b.n	80014a4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80014a0:	f7ff fe94 	bl	80011cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014a4:	1dfb      	adds	r3, r7, #7
 80014a6:	781b      	ldrb	r3, [r3, #0]
}
 80014a8:	0018      	movs	r0, r3
 80014aa:	46bd      	mov	sp, r7
 80014ac:	b002      	add	sp, #8
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	40022000 	.word	0x40022000

080014b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014b4:	b590      	push	{r4, r7, lr}
 80014b6:	b085      	sub	sp, #20
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80014bc:	230f      	movs	r3, #15
 80014be:	18fb      	adds	r3, r7, r3
 80014c0:	2200      	movs	r2, #0
 80014c2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80014c4:	4b1d      	ldr	r3, [pc, #116]	@ (800153c <HAL_InitTick+0x88>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d02b      	beq.n	8001524 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80014cc:	4b1c      	ldr	r3, [pc, #112]	@ (8001540 <HAL_InitTick+0x8c>)
 80014ce:	681c      	ldr	r4, [r3, #0]
 80014d0:	4b1a      	ldr	r3, [pc, #104]	@ (800153c <HAL_InitTick+0x88>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	0019      	movs	r1, r3
 80014d6:	23fa      	movs	r3, #250	@ 0xfa
 80014d8:	0098      	lsls	r0, r3, #2
 80014da:	f7fe fe1d 	bl	8000118 <__udivsi3>
 80014de:	0003      	movs	r3, r0
 80014e0:	0019      	movs	r1, r3
 80014e2:	0020      	movs	r0, r4
 80014e4:	f7fe fe18 	bl	8000118 <__udivsi3>
 80014e8:	0003      	movs	r3, r0
 80014ea:	0018      	movs	r0, r3
 80014ec:	f000 f929 	bl	8001742 <HAL_SYSTICK_Config>
 80014f0:	1e03      	subs	r3, r0, #0
 80014f2:	d112      	bne.n	800151a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2b03      	cmp	r3, #3
 80014f8:	d80a      	bhi.n	8001510 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014fa:	6879      	ldr	r1, [r7, #4]
 80014fc:	2301      	movs	r3, #1
 80014fe:	425b      	negs	r3, r3
 8001500:	2200      	movs	r2, #0
 8001502:	0018      	movs	r0, r3
 8001504:	f000 f908 	bl	8001718 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001508:	4b0e      	ldr	r3, [pc, #56]	@ (8001544 <HAL_InitTick+0x90>)
 800150a:	687a      	ldr	r2, [r7, #4]
 800150c:	601a      	str	r2, [r3, #0]
 800150e:	e00d      	b.n	800152c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001510:	230f      	movs	r3, #15
 8001512:	18fb      	adds	r3, r7, r3
 8001514:	2201      	movs	r2, #1
 8001516:	701a      	strb	r2, [r3, #0]
 8001518:	e008      	b.n	800152c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800151a:	230f      	movs	r3, #15
 800151c:	18fb      	adds	r3, r7, r3
 800151e:	2201      	movs	r2, #1
 8001520:	701a      	strb	r2, [r3, #0]
 8001522:	e003      	b.n	800152c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001524:	230f      	movs	r3, #15
 8001526:	18fb      	adds	r3, r7, r3
 8001528:	2201      	movs	r2, #1
 800152a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800152c:	230f      	movs	r3, #15
 800152e:	18fb      	adds	r3, r7, r3
 8001530:	781b      	ldrb	r3, [r3, #0]
}
 8001532:	0018      	movs	r0, r3
 8001534:	46bd      	mov	sp, r7
 8001536:	b005      	add	sp, #20
 8001538:	bd90      	pop	{r4, r7, pc}
 800153a:	46c0      	nop			@ (mov r8, r8)
 800153c:	20000008 	.word	0x20000008
 8001540:	20000000 	.word	0x20000000
 8001544:	20000004 	.word	0x20000004

08001548 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800154c:	4b05      	ldr	r3, [pc, #20]	@ (8001564 <HAL_IncTick+0x1c>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	001a      	movs	r2, r3
 8001552:	4b05      	ldr	r3, [pc, #20]	@ (8001568 <HAL_IncTick+0x20>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	18d2      	adds	r2, r2, r3
 8001558:	4b03      	ldr	r3, [pc, #12]	@ (8001568 <HAL_IncTick+0x20>)
 800155a:	601a      	str	r2, [r3, #0]
}
 800155c:	46c0      	nop			@ (mov r8, r8)
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	46c0      	nop			@ (mov r8, r8)
 8001564:	20000008 	.word	0x20000008
 8001568:	200001a8 	.word	0x200001a8

0800156c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
  return uwTick;
 8001570:	4b02      	ldr	r3, [pc, #8]	@ (800157c <HAL_GetTick+0x10>)
 8001572:	681b      	ldr	r3, [r3, #0]
}
 8001574:	0018      	movs	r0, r3
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	46c0      	nop			@ (mov r8, r8)
 800157c:	200001a8 	.word	0x200001a8

08001580 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b084      	sub	sp, #16
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001588:	f7ff fff0 	bl	800156c <HAL_GetTick>
 800158c:	0003      	movs	r3, r0
 800158e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	3301      	adds	r3, #1
 8001598:	d005      	beq.n	80015a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800159a:	4b0a      	ldr	r3, [pc, #40]	@ (80015c4 <HAL_Delay+0x44>)
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	001a      	movs	r2, r3
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	189b      	adds	r3, r3, r2
 80015a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015a6:	46c0      	nop			@ (mov r8, r8)
 80015a8:	f7ff ffe0 	bl	800156c <HAL_GetTick>
 80015ac:	0002      	movs	r2, r0
 80015ae:	68bb      	ldr	r3, [r7, #8]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	68fa      	ldr	r2, [r7, #12]
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d8f7      	bhi.n	80015a8 <HAL_Delay+0x28>
  {
  }
}
 80015b8:	46c0      	nop			@ (mov r8, r8)
 80015ba:	46c0      	nop			@ (mov r8, r8)
 80015bc:	46bd      	mov	sp, r7
 80015be:	b004      	add	sp, #16
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	46c0      	nop			@ (mov r8, r8)
 80015c4:	20000008 	.word	0x20000008

080015c8 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80015d0:	4b06      	ldr	r3, [pc, #24]	@ (80015ec <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a06      	ldr	r2, [pc, #24]	@ (80015f0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80015d6:	4013      	ands	r3, r2
 80015d8:	0019      	movs	r1, r3
 80015da:	4b04      	ldr	r3, [pc, #16]	@ (80015ec <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80015dc:	687a      	ldr	r2, [r7, #4]
 80015de:	430a      	orrs	r2, r1
 80015e0:	601a      	str	r2, [r3, #0]
}
 80015e2:	46c0      	nop			@ (mov r8, r8)
 80015e4:	46bd      	mov	sp, r7
 80015e6:	b002      	add	sp, #8
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	46c0      	nop			@ (mov r8, r8)
 80015ec:	40010000 	.word	0x40010000
 80015f0:	fffff9ff 	.word	0xfffff9ff

080015f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015f4:	b590      	push	{r4, r7, lr}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	0002      	movs	r2, r0
 80015fc:	6039      	str	r1, [r7, #0]
 80015fe:	1dfb      	adds	r3, r7, #7
 8001600:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001602:	1dfb      	adds	r3, r7, #7
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	2b7f      	cmp	r3, #127	@ 0x7f
 8001608:	d828      	bhi.n	800165c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800160a:	4a2f      	ldr	r2, [pc, #188]	@ (80016c8 <__NVIC_SetPriority+0xd4>)
 800160c:	1dfb      	adds	r3, r7, #7
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	b25b      	sxtb	r3, r3
 8001612:	089b      	lsrs	r3, r3, #2
 8001614:	33c0      	adds	r3, #192	@ 0xc0
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	589b      	ldr	r3, [r3, r2]
 800161a:	1dfa      	adds	r2, r7, #7
 800161c:	7812      	ldrb	r2, [r2, #0]
 800161e:	0011      	movs	r1, r2
 8001620:	2203      	movs	r2, #3
 8001622:	400a      	ands	r2, r1
 8001624:	00d2      	lsls	r2, r2, #3
 8001626:	21ff      	movs	r1, #255	@ 0xff
 8001628:	4091      	lsls	r1, r2
 800162a:	000a      	movs	r2, r1
 800162c:	43d2      	mvns	r2, r2
 800162e:	401a      	ands	r2, r3
 8001630:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	019b      	lsls	r3, r3, #6
 8001636:	22ff      	movs	r2, #255	@ 0xff
 8001638:	401a      	ands	r2, r3
 800163a:	1dfb      	adds	r3, r7, #7
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	0018      	movs	r0, r3
 8001640:	2303      	movs	r3, #3
 8001642:	4003      	ands	r3, r0
 8001644:	00db      	lsls	r3, r3, #3
 8001646:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001648:	481f      	ldr	r0, [pc, #124]	@ (80016c8 <__NVIC_SetPriority+0xd4>)
 800164a:	1dfb      	adds	r3, r7, #7
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	b25b      	sxtb	r3, r3
 8001650:	089b      	lsrs	r3, r3, #2
 8001652:	430a      	orrs	r2, r1
 8001654:	33c0      	adds	r3, #192	@ 0xc0
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800165a:	e031      	b.n	80016c0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800165c:	4a1b      	ldr	r2, [pc, #108]	@ (80016cc <__NVIC_SetPriority+0xd8>)
 800165e:	1dfb      	adds	r3, r7, #7
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	0019      	movs	r1, r3
 8001664:	230f      	movs	r3, #15
 8001666:	400b      	ands	r3, r1
 8001668:	3b08      	subs	r3, #8
 800166a:	089b      	lsrs	r3, r3, #2
 800166c:	3306      	adds	r3, #6
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	18d3      	adds	r3, r2, r3
 8001672:	3304      	adds	r3, #4
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	1dfa      	adds	r2, r7, #7
 8001678:	7812      	ldrb	r2, [r2, #0]
 800167a:	0011      	movs	r1, r2
 800167c:	2203      	movs	r2, #3
 800167e:	400a      	ands	r2, r1
 8001680:	00d2      	lsls	r2, r2, #3
 8001682:	21ff      	movs	r1, #255	@ 0xff
 8001684:	4091      	lsls	r1, r2
 8001686:	000a      	movs	r2, r1
 8001688:	43d2      	mvns	r2, r2
 800168a:	401a      	ands	r2, r3
 800168c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	019b      	lsls	r3, r3, #6
 8001692:	22ff      	movs	r2, #255	@ 0xff
 8001694:	401a      	ands	r2, r3
 8001696:	1dfb      	adds	r3, r7, #7
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	0018      	movs	r0, r3
 800169c:	2303      	movs	r3, #3
 800169e:	4003      	ands	r3, r0
 80016a0:	00db      	lsls	r3, r3, #3
 80016a2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016a4:	4809      	ldr	r0, [pc, #36]	@ (80016cc <__NVIC_SetPriority+0xd8>)
 80016a6:	1dfb      	adds	r3, r7, #7
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	001c      	movs	r4, r3
 80016ac:	230f      	movs	r3, #15
 80016ae:	4023      	ands	r3, r4
 80016b0:	3b08      	subs	r3, #8
 80016b2:	089b      	lsrs	r3, r3, #2
 80016b4:	430a      	orrs	r2, r1
 80016b6:	3306      	adds	r3, #6
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	18c3      	adds	r3, r0, r3
 80016bc:	3304      	adds	r3, #4
 80016be:	601a      	str	r2, [r3, #0]
}
 80016c0:	46c0      	nop			@ (mov r8, r8)
 80016c2:	46bd      	mov	sp, r7
 80016c4:	b003      	add	sp, #12
 80016c6:	bd90      	pop	{r4, r7, pc}
 80016c8:	e000e100 	.word	0xe000e100
 80016cc:	e000ed00 	.word	0xe000ed00

080016d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	1e5a      	subs	r2, r3, #1
 80016dc:	2380      	movs	r3, #128	@ 0x80
 80016de:	045b      	lsls	r3, r3, #17
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d301      	bcc.n	80016e8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016e4:	2301      	movs	r3, #1
 80016e6:	e010      	b.n	800170a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016e8:	4b0a      	ldr	r3, [pc, #40]	@ (8001714 <SysTick_Config+0x44>)
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	3a01      	subs	r2, #1
 80016ee:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016f0:	2301      	movs	r3, #1
 80016f2:	425b      	negs	r3, r3
 80016f4:	2103      	movs	r1, #3
 80016f6:	0018      	movs	r0, r3
 80016f8:	f7ff ff7c 	bl	80015f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016fc:	4b05      	ldr	r3, [pc, #20]	@ (8001714 <SysTick_Config+0x44>)
 80016fe:	2200      	movs	r2, #0
 8001700:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001702:	4b04      	ldr	r3, [pc, #16]	@ (8001714 <SysTick_Config+0x44>)
 8001704:	2207      	movs	r2, #7
 8001706:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001708:	2300      	movs	r3, #0
}
 800170a:	0018      	movs	r0, r3
 800170c:	46bd      	mov	sp, r7
 800170e:	b002      	add	sp, #8
 8001710:	bd80      	pop	{r7, pc}
 8001712:	46c0      	nop			@ (mov r8, r8)
 8001714:	e000e010 	.word	0xe000e010

08001718 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	60b9      	str	r1, [r7, #8]
 8001720:	607a      	str	r2, [r7, #4]
 8001722:	210f      	movs	r1, #15
 8001724:	187b      	adds	r3, r7, r1
 8001726:	1c02      	adds	r2, r0, #0
 8001728:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800172a:	68ba      	ldr	r2, [r7, #8]
 800172c:	187b      	adds	r3, r7, r1
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	b25b      	sxtb	r3, r3
 8001732:	0011      	movs	r1, r2
 8001734:	0018      	movs	r0, r3
 8001736:	f7ff ff5d 	bl	80015f4 <__NVIC_SetPriority>
}
 800173a:	46c0      	nop			@ (mov r8, r8)
 800173c:	46bd      	mov	sp, r7
 800173e:	b004      	add	sp, #16
 8001740:	bd80      	pop	{r7, pc}

08001742 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001742:	b580      	push	{r7, lr}
 8001744:	b082      	sub	sp, #8
 8001746:	af00      	add	r7, sp, #0
 8001748:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	0018      	movs	r0, r3
 800174e:	f7ff ffbf 	bl	80016d0 <SysTick_Config>
 8001752:	0003      	movs	r3, r0
}
 8001754:	0018      	movs	r0, r3
 8001756:	46bd      	mov	sp, r7
 8001758:	b002      	add	sp, #8
 800175a:	bd80      	pop	{r7, pc}

0800175c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b086      	sub	sp, #24
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001766:	2300      	movs	r3, #0
 8001768:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800176a:	e14d      	b.n	8001a08 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2101      	movs	r1, #1
 8001772:	697a      	ldr	r2, [r7, #20]
 8001774:	4091      	lsls	r1, r2
 8001776:	000a      	movs	r2, r1
 8001778:	4013      	ands	r3, r2
 800177a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d100      	bne.n	8001784 <HAL_GPIO_Init+0x28>
 8001782:	e13e      	b.n	8001a02 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	2203      	movs	r2, #3
 800178a:	4013      	ands	r3, r2
 800178c:	2b01      	cmp	r3, #1
 800178e:	d005      	beq.n	800179c <HAL_GPIO_Init+0x40>
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	2203      	movs	r2, #3
 8001796:	4013      	ands	r3, r2
 8001798:	2b02      	cmp	r3, #2
 800179a:	d130      	bne.n	80017fe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	005b      	lsls	r3, r3, #1
 80017a6:	2203      	movs	r2, #3
 80017a8:	409a      	lsls	r2, r3
 80017aa:	0013      	movs	r3, r2
 80017ac:	43da      	mvns	r2, r3
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	4013      	ands	r3, r2
 80017b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	68da      	ldr	r2, [r3, #12]
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	409a      	lsls	r2, r3
 80017be:	0013      	movs	r3, r2
 80017c0:	693a      	ldr	r2, [r7, #16]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	693a      	ldr	r2, [r7, #16]
 80017ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80017d2:	2201      	movs	r2, #1
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	409a      	lsls	r2, r3
 80017d8:	0013      	movs	r3, r2
 80017da:	43da      	mvns	r2, r3
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	4013      	ands	r3, r2
 80017e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	091b      	lsrs	r3, r3, #4
 80017e8:	2201      	movs	r2, #1
 80017ea:	401a      	ands	r2, r3
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	409a      	lsls	r2, r3
 80017f0:	0013      	movs	r3, r2
 80017f2:	693a      	ldr	r2, [r7, #16]
 80017f4:	4313      	orrs	r3, r2
 80017f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	693a      	ldr	r2, [r7, #16]
 80017fc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	2203      	movs	r2, #3
 8001804:	4013      	ands	r3, r2
 8001806:	2b03      	cmp	r3, #3
 8001808:	d017      	beq.n	800183a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	68db      	ldr	r3, [r3, #12]
 800180e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	005b      	lsls	r3, r3, #1
 8001814:	2203      	movs	r2, #3
 8001816:	409a      	lsls	r2, r3
 8001818:	0013      	movs	r3, r2
 800181a:	43da      	mvns	r2, r3
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	4013      	ands	r3, r2
 8001820:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	689a      	ldr	r2, [r3, #8]
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	005b      	lsls	r3, r3, #1
 800182a:	409a      	lsls	r2, r3
 800182c:	0013      	movs	r3, r2
 800182e:	693a      	ldr	r2, [r7, #16]
 8001830:	4313      	orrs	r3, r2
 8001832:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	693a      	ldr	r2, [r7, #16]
 8001838:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	2203      	movs	r2, #3
 8001840:	4013      	ands	r3, r2
 8001842:	2b02      	cmp	r3, #2
 8001844:	d123      	bne.n	800188e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	08da      	lsrs	r2, r3, #3
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	3208      	adds	r2, #8
 800184e:	0092      	lsls	r2, r2, #2
 8001850:	58d3      	ldr	r3, [r2, r3]
 8001852:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	2207      	movs	r2, #7
 8001858:	4013      	ands	r3, r2
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	220f      	movs	r2, #15
 800185e:	409a      	lsls	r2, r3
 8001860:	0013      	movs	r3, r2
 8001862:	43da      	mvns	r2, r3
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	4013      	ands	r3, r2
 8001868:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	691a      	ldr	r2, [r3, #16]
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	2107      	movs	r1, #7
 8001872:	400b      	ands	r3, r1
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	409a      	lsls	r2, r3
 8001878:	0013      	movs	r3, r2
 800187a:	693a      	ldr	r2, [r7, #16]
 800187c:	4313      	orrs	r3, r2
 800187e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	08da      	lsrs	r2, r3, #3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	3208      	adds	r2, #8
 8001888:	0092      	lsls	r2, r2, #2
 800188a:	6939      	ldr	r1, [r7, #16]
 800188c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	005b      	lsls	r3, r3, #1
 8001898:	2203      	movs	r2, #3
 800189a:	409a      	lsls	r2, r3
 800189c:	0013      	movs	r3, r2
 800189e:	43da      	mvns	r2, r3
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	4013      	ands	r3, r2
 80018a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	2203      	movs	r2, #3
 80018ac:	401a      	ands	r2, r3
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	005b      	lsls	r3, r3, #1
 80018b2:	409a      	lsls	r2, r3
 80018b4:	0013      	movs	r3, r2
 80018b6:	693a      	ldr	r2, [r7, #16]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	693a      	ldr	r2, [r7, #16]
 80018c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	685a      	ldr	r2, [r3, #4]
 80018c6:	23c0      	movs	r3, #192	@ 0xc0
 80018c8:	029b      	lsls	r3, r3, #10
 80018ca:	4013      	ands	r3, r2
 80018cc:	d100      	bne.n	80018d0 <HAL_GPIO_Init+0x174>
 80018ce:	e098      	b.n	8001a02 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80018d0:	4a53      	ldr	r2, [pc, #332]	@ (8001a20 <HAL_GPIO_Init+0x2c4>)
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	089b      	lsrs	r3, r3, #2
 80018d6:	3318      	adds	r3, #24
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	589b      	ldr	r3, [r3, r2]
 80018dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	2203      	movs	r2, #3
 80018e2:	4013      	ands	r3, r2
 80018e4:	00db      	lsls	r3, r3, #3
 80018e6:	220f      	movs	r2, #15
 80018e8:	409a      	lsls	r2, r3
 80018ea:	0013      	movs	r3, r2
 80018ec:	43da      	mvns	r2, r3
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	4013      	ands	r3, r2
 80018f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80018f4:	687a      	ldr	r2, [r7, #4]
 80018f6:	23a0      	movs	r3, #160	@ 0xa0
 80018f8:	05db      	lsls	r3, r3, #23
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d019      	beq.n	8001932 <HAL_GPIO_Init+0x1d6>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4a48      	ldr	r2, [pc, #288]	@ (8001a24 <HAL_GPIO_Init+0x2c8>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d013      	beq.n	800192e <HAL_GPIO_Init+0x1d2>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4a47      	ldr	r2, [pc, #284]	@ (8001a28 <HAL_GPIO_Init+0x2cc>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d00d      	beq.n	800192a <HAL_GPIO_Init+0x1ce>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4a46      	ldr	r2, [pc, #280]	@ (8001a2c <HAL_GPIO_Init+0x2d0>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d007      	beq.n	8001926 <HAL_GPIO_Init+0x1ca>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4a45      	ldr	r2, [pc, #276]	@ (8001a30 <HAL_GPIO_Init+0x2d4>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d101      	bne.n	8001922 <HAL_GPIO_Init+0x1c6>
 800191e:	2304      	movs	r3, #4
 8001920:	e008      	b.n	8001934 <HAL_GPIO_Init+0x1d8>
 8001922:	2305      	movs	r3, #5
 8001924:	e006      	b.n	8001934 <HAL_GPIO_Init+0x1d8>
 8001926:	2303      	movs	r3, #3
 8001928:	e004      	b.n	8001934 <HAL_GPIO_Init+0x1d8>
 800192a:	2302      	movs	r3, #2
 800192c:	e002      	b.n	8001934 <HAL_GPIO_Init+0x1d8>
 800192e:	2301      	movs	r3, #1
 8001930:	e000      	b.n	8001934 <HAL_GPIO_Init+0x1d8>
 8001932:	2300      	movs	r3, #0
 8001934:	697a      	ldr	r2, [r7, #20]
 8001936:	2103      	movs	r1, #3
 8001938:	400a      	ands	r2, r1
 800193a:	00d2      	lsls	r2, r2, #3
 800193c:	4093      	lsls	r3, r2
 800193e:	693a      	ldr	r2, [r7, #16]
 8001940:	4313      	orrs	r3, r2
 8001942:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001944:	4936      	ldr	r1, [pc, #216]	@ (8001a20 <HAL_GPIO_Init+0x2c4>)
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	089b      	lsrs	r3, r3, #2
 800194a:	3318      	adds	r3, #24
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	693a      	ldr	r2, [r7, #16]
 8001950:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001952:	4b33      	ldr	r3, [pc, #204]	@ (8001a20 <HAL_GPIO_Init+0x2c4>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	43da      	mvns	r2, r3
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	4013      	ands	r3, r2
 8001960:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	685a      	ldr	r2, [r3, #4]
 8001966:	2380      	movs	r3, #128	@ 0x80
 8001968:	035b      	lsls	r3, r3, #13
 800196a:	4013      	ands	r3, r2
 800196c:	d003      	beq.n	8001976 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800196e:	693a      	ldr	r2, [r7, #16]
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	4313      	orrs	r3, r2
 8001974:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001976:	4b2a      	ldr	r3, [pc, #168]	@ (8001a20 <HAL_GPIO_Init+0x2c4>)
 8001978:	693a      	ldr	r2, [r7, #16]
 800197a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800197c:	4b28      	ldr	r3, [pc, #160]	@ (8001a20 <HAL_GPIO_Init+0x2c4>)
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	43da      	mvns	r2, r3
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	4013      	ands	r3, r2
 800198a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	685a      	ldr	r2, [r3, #4]
 8001990:	2380      	movs	r3, #128	@ 0x80
 8001992:	039b      	lsls	r3, r3, #14
 8001994:	4013      	ands	r3, r2
 8001996:	d003      	beq.n	80019a0 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001998:	693a      	ldr	r2, [r7, #16]
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	4313      	orrs	r3, r2
 800199e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80019a0:	4b1f      	ldr	r3, [pc, #124]	@ (8001a20 <HAL_GPIO_Init+0x2c4>)
 80019a2:	693a      	ldr	r2, [r7, #16]
 80019a4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80019a6:	4a1e      	ldr	r2, [pc, #120]	@ (8001a20 <HAL_GPIO_Init+0x2c4>)
 80019a8:	2384      	movs	r3, #132	@ 0x84
 80019aa:	58d3      	ldr	r3, [r2, r3]
 80019ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	43da      	mvns	r2, r3
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	4013      	ands	r3, r2
 80019b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	685a      	ldr	r2, [r3, #4]
 80019bc:	2380      	movs	r3, #128	@ 0x80
 80019be:	029b      	lsls	r3, r3, #10
 80019c0:	4013      	ands	r3, r2
 80019c2:	d003      	beq.n	80019cc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80019c4:	693a      	ldr	r2, [r7, #16]
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80019cc:	4914      	ldr	r1, [pc, #80]	@ (8001a20 <HAL_GPIO_Init+0x2c4>)
 80019ce:	2284      	movs	r2, #132	@ 0x84
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80019d4:	4a12      	ldr	r2, [pc, #72]	@ (8001a20 <HAL_GPIO_Init+0x2c4>)
 80019d6:	2380      	movs	r3, #128	@ 0x80
 80019d8:	58d3      	ldr	r3, [r2, r3]
 80019da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	43da      	mvns	r2, r3
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	4013      	ands	r3, r2
 80019e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	685a      	ldr	r2, [r3, #4]
 80019ea:	2380      	movs	r3, #128	@ 0x80
 80019ec:	025b      	lsls	r3, r3, #9
 80019ee:	4013      	ands	r3, r2
 80019f0:	d003      	beq.n	80019fa <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80019f2:	693a      	ldr	r2, [r7, #16]
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80019fa:	4909      	ldr	r1, [pc, #36]	@ (8001a20 <HAL_GPIO_Init+0x2c4>)
 80019fc:	2280      	movs	r2, #128	@ 0x80
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	3301      	adds	r3, #1
 8001a06:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	40da      	lsrs	r2, r3
 8001a10:	1e13      	subs	r3, r2, #0
 8001a12:	d000      	beq.n	8001a16 <HAL_GPIO_Init+0x2ba>
 8001a14:	e6aa      	b.n	800176c <HAL_GPIO_Init+0x10>
  }
}
 8001a16:	46c0      	nop			@ (mov r8, r8)
 8001a18:	46c0      	nop			@ (mov r8, r8)
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	b006      	add	sp, #24
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	40021800 	.word	0x40021800
 8001a24:	50000400 	.word	0x50000400
 8001a28:	50000800 	.word	0x50000800
 8001a2c:	50000c00 	.word	0x50000c00
 8001a30:	50001000 	.word	0x50001000

08001a34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	0008      	movs	r0, r1
 8001a3e:	0011      	movs	r1, r2
 8001a40:	1cbb      	adds	r3, r7, #2
 8001a42:	1c02      	adds	r2, r0, #0
 8001a44:	801a      	strh	r2, [r3, #0]
 8001a46:	1c7b      	adds	r3, r7, #1
 8001a48:	1c0a      	adds	r2, r1, #0
 8001a4a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a4c:	1c7b      	adds	r3, r7, #1
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d004      	beq.n	8001a5e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a54:	1cbb      	adds	r3, r7, #2
 8001a56:	881a      	ldrh	r2, [r3, #0]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a5c:	e003      	b.n	8001a66 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a5e:	1cbb      	adds	r3, r7, #2
 8001a60:	881a      	ldrh	r2, [r3, #0]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001a66:	46c0      	nop			@ (mov r8, r8)
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	b002      	add	sp, #8
 8001a6c:	bd80      	pop	{r7, pc}
	...

08001a70 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d101      	bne.n	8001a82 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e08f      	b.n	8001ba2 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2241      	movs	r2, #65	@ 0x41
 8001a86:	5c9b      	ldrb	r3, [r3, r2]
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d107      	bne.n	8001a9e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2240      	movs	r2, #64	@ 0x40
 8001a92:	2100      	movs	r1, #0
 8001a94:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	0018      	movs	r0, r3
 8001a9a:	f7ff fbbf 	bl	800121c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2241      	movs	r2, #65	@ 0x41
 8001aa2:	2124      	movs	r1, #36	@ 0x24
 8001aa4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	2101      	movs	r1, #1
 8001ab2:	438a      	bics	r2, r1
 8001ab4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685a      	ldr	r2, [r3, #4]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	493b      	ldr	r1, [pc, #236]	@ (8001bac <HAL_I2C_Init+0x13c>)
 8001ac0:	400a      	ands	r2, r1
 8001ac2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	689a      	ldr	r2, [r3, #8]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4938      	ldr	r1, [pc, #224]	@ (8001bb0 <HAL_I2C_Init+0x140>)
 8001ad0:	400a      	ands	r2, r1
 8001ad2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d108      	bne.n	8001aee <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	689a      	ldr	r2, [r3, #8]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2180      	movs	r1, #128	@ 0x80
 8001ae6:	0209      	lsls	r1, r1, #8
 8001ae8:	430a      	orrs	r2, r1
 8001aea:	609a      	str	r2, [r3, #8]
 8001aec:	e007      	b.n	8001afe <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	689a      	ldr	r2, [r3, #8]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	2184      	movs	r1, #132	@ 0x84
 8001af8:	0209      	lsls	r1, r1, #8
 8001afa:	430a      	orrs	r2, r1
 8001afc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	68db      	ldr	r3, [r3, #12]
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d109      	bne.n	8001b1a <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	685a      	ldr	r2, [r3, #4]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2180      	movs	r1, #128	@ 0x80
 8001b12:	0109      	lsls	r1, r1, #4
 8001b14:	430a      	orrs	r2, r1
 8001b16:	605a      	str	r2, [r3, #4]
 8001b18:	e007      	b.n	8001b2a <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	685a      	ldr	r2, [r3, #4]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4923      	ldr	r1, [pc, #140]	@ (8001bb4 <HAL_I2C_Init+0x144>)
 8001b26:	400a      	ands	r2, r1
 8001b28:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	685a      	ldr	r2, [r3, #4]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4920      	ldr	r1, [pc, #128]	@ (8001bb8 <HAL_I2C_Init+0x148>)
 8001b36:	430a      	orrs	r2, r1
 8001b38:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	68da      	ldr	r2, [r3, #12]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	491a      	ldr	r1, [pc, #104]	@ (8001bb0 <HAL_I2C_Init+0x140>)
 8001b46:	400a      	ands	r2, r1
 8001b48:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	691a      	ldr	r2, [r3, #16]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	695b      	ldr	r3, [r3, #20]
 8001b52:	431a      	orrs	r2, r3
 8001b54:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	699b      	ldr	r3, [r3, #24]
 8001b5a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	430a      	orrs	r2, r1
 8001b62:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	69d9      	ldr	r1, [r3, #28]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6a1a      	ldr	r2, [r3, #32]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	430a      	orrs	r2, r1
 8001b72:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	2101      	movs	r1, #1
 8001b80:	430a      	orrs	r2, r1
 8001b82:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2200      	movs	r2, #0
 8001b88:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2241      	movs	r2, #65	@ 0x41
 8001b8e:	2120      	movs	r1, #32
 8001b90:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2200      	movs	r2, #0
 8001b96:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2242      	movs	r2, #66	@ 0x42
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001ba0:	2300      	movs	r3, #0
}
 8001ba2:	0018      	movs	r0, r3
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	b002      	add	sp, #8
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	46c0      	nop			@ (mov r8, r8)
 8001bac:	f0ffffff 	.word	0xf0ffffff
 8001bb0:	ffff7fff 	.word	0xffff7fff
 8001bb4:	fffff7ff 	.word	0xfffff7ff
 8001bb8:	02008000 	.word	0x02008000

08001bbc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2241      	movs	r2, #65	@ 0x41
 8001bca:	5c9b      	ldrb	r3, [r3, r2]
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	2b20      	cmp	r3, #32
 8001bd0:	d138      	bne.n	8001c44 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2240      	movs	r2, #64	@ 0x40
 8001bd6:	5c9b      	ldrb	r3, [r3, r2]
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d101      	bne.n	8001be0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001bdc:	2302      	movs	r3, #2
 8001bde:	e032      	b.n	8001c46 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2240      	movs	r2, #64	@ 0x40
 8001be4:	2101      	movs	r1, #1
 8001be6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2241      	movs	r2, #65	@ 0x41
 8001bec:	2124      	movs	r1, #36	@ 0x24
 8001bee:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	2101      	movs	r1, #1
 8001bfc:	438a      	bics	r2, r1
 8001bfe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4911      	ldr	r1, [pc, #68]	@ (8001c50 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001c0c:	400a      	ands	r2, r1
 8001c0e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	6819      	ldr	r1, [r3, #0]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	683a      	ldr	r2, [r7, #0]
 8001c1c:	430a      	orrs	r2, r1
 8001c1e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	2101      	movs	r1, #1
 8001c2c:	430a      	orrs	r2, r1
 8001c2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2241      	movs	r2, #65	@ 0x41
 8001c34:	2120      	movs	r1, #32
 8001c36:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2240      	movs	r2, #64	@ 0x40
 8001c3c:	2100      	movs	r1, #0
 8001c3e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001c40:	2300      	movs	r3, #0
 8001c42:	e000      	b.n	8001c46 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001c44:	2302      	movs	r3, #2
  }
}
 8001c46:	0018      	movs	r0, r3
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	b002      	add	sp, #8
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	46c0      	nop			@ (mov r8, r8)
 8001c50:	ffffefff 	.word	0xffffefff

08001c54 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2241      	movs	r2, #65	@ 0x41
 8001c62:	5c9b      	ldrb	r3, [r3, r2]
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	2b20      	cmp	r3, #32
 8001c68:	d139      	bne.n	8001cde <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2240      	movs	r2, #64	@ 0x40
 8001c6e:	5c9b      	ldrb	r3, [r3, r2]
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d101      	bne.n	8001c78 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001c74:	2302      	movs	r3, #2
 8001c76:	e033      	b.n	8001ce0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2240      	movs	r2, #64	@ 0x40
 8001c7c:	2101      	movs	r1, #1
 8001c7e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2241      	movs	r2, #65	@ 0x41
 8001c84:	2124      	movs	r1, #36	@ 0x24
 8001c86:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	2101      	movs	r1, #1
 8001c94:	438a      	bics	r2, r1
 8001c96:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	4a11      	ldr	r2, [pc, #68]	@ (8001ce8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	021b      	lsls	r3, r3, #8
 8001cac:	68fa      	ldr	r2, [r7, #12]
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	68fa      	ldr	r2, [r7, #12]
 8001cb8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2101      	movs	r1, #1
 8001cc6:	430a      	orrs	r2, r1
 8001cc8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2241      	movs	r2, #65	@ 0x41
 8001cce:	2120      	movs	r1, #32
 8001cd0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2240      	movs	r2, #64	@ 0x40
 8001cd6:	2100      	movs	r1, #0
 8001cd8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	e000      	b.n	8001ce0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001cde:	2302      	movs	r3, #2
  }
}
 8001ce0:	0018      	movs	r0, r3
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	b004      	add	sp, #16
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	fffff0ff 	.word	0xfffff0ff

08001cec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001cf4:	4b19      	ldr	r3, [pc, #100]	@ (8001d5c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a19      	ldr	r2, [pc, #100]	@ (8001d60 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	0019      	movs	r1, r3
 8001cfe:	4b17      	ldr	r3, [pc, #92]	@ (8001d5c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	430a      	orrs	r2, r1
 8001d04:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	2380      	movs	r3, #128	@ 0x80
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d11f      	bne.n	8001d50 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001d10:	4b14      	ldr	r3, [pc, #80]	@ (8001d64 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	0013      	movs	r3, r2
 8001d16:	005b      	lsls	r3, r3, #1
 8001d18:	189b      	adds	r3, r3, r2
 8001d1a:	005b      	lsls	r3, r3, #1
 8001d1c:	4912      	ldr	r1, [pc, #72]	@ (8001d68 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001d1e:	0018      	movs	r0, r3
 8001d20:	f7fe f9fa 	bl	8000118 <__udivsi3>
 8001d24:	0003      	movs	r3, r0
 8001d26:	3301      	adds	r3, #1
 8001d28:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d2a:	e008      	b.n	8001d3e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d003      	beq.n	8001d3a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	3b01      	subs	r3, #1
 8001d36:	60fb      	str	r3, [r7, #12]
 8001d38:	e001      	b.n	8001d3e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e009      	b.n	8001d52 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d3e:	4b07      	ldr	r3, [pc, #28]	@ (8001d5c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001d40:	695a      	ldr	r2, [r3, #20]
 8001d42:	2380      	movs	r3, #128	@ 0x80
 8001d44:	00db      	lsls	r3, r3, #3
 8001d46:	401a      	ands	r2, r3
 8001d48:	2380      	movs	r3, #128	@ 0x80
 8001d4a:	00db      	lsls	r3, r3, #3
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d0ed      	beq.n	8001d2c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001d50:	2300      	movs	r3, #0
}
 8001d52:	0018      	movs	r0, r3
 8001d54:	46bd      	mov	sp, r7
 8001d56:	b004      	add	sp, #16
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	46c0      	nop			@ (mov r8, r8)
 8001d5c:	40007000 	.word	0x40007000
 8001d60:	fffff9ff 	.word	0xfffff9ff
 8001d64:	20000000 	.word	0x20000000
 8001d68:	000f4240 	.word	0x000f4240

08001d6c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b088      	sub	sp, #32
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d102      	bne.n	8001d80 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	f000 fb50 	bl	8002420 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	2201      	movs	r2, #1
 8001d86:	4013      	ands	r3, r2
 8001d88:	d100      	bne.n	8001d8c <HAL_RCC_OscConfig+0x20>
 8001d8a:	e07c      	b.n	8001e86 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d8c:	4bc3      	ldr	r3, [pc, #780]	@ (800209c <HAL_RCC_OscConfig+0x330>)
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	2238      	movs	r2, #56	@ 0x38
 8001d92:	4013      	ands	r3, r2
 8001d94:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d96:	4bc1      	ldr	r3, [pc, #772]	@ (800209c <HAL_RCC_OscConfig+0x330>)
 8001d98:	68db      	ldr	r3, [r3, #12]
 8001d9a:	2203      	movs	r2, #3
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001da0:	69bb      	ldr	r3, [r7, #24]
 8001da2:	2b10      	cmp	r3, #16
 8001da4:	d102      	bne.n	8001dac <HAL_RCC_OscConfig+0x40>
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	2b03      	cmp	r3, #3
 8001daa:	d002      	beq.n	8001db2 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001dac:	69bb      	ldr	r3, [r7, #24]
 8001dae:	2b08      	cmp	r3, #8
 8001db0:	d10b      	bne.n	8001dca <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001db2:	4bba      	ldr	r3, [pc, #744]	@ (800209c <HAL_RCC_OscConfig+0x330>)
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	2380      	movs	r3, #128	@ 0x80
 8001db8:	029b      	lsls	r3, r3, #10
 8001dba:	4013      	ands	r3, r2
 8001dbc:	d062      	beq.n	8001e84 <HAL_RCC_OscConfig+0x118>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d15e      	bne.n	8001e84 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e32a      	b.n	8002420 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	685a      	ldr	r2, [r3, #4]
 8001dce:	2380      	movs	r3, #128	@ 0x80
 8001dd0:	025b      	lsls	r3, r3, #9
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d107      	bne.n	8001de6 <HAL_RCC_OscConfig+0x7a>
 8001dd6:	4bb1      	ldr	r3, [pc, #708]	@ (800209c <HAL_RCC_OscConfig+0x330>)
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	4bb0      	ldr	r3, [pc, #704]	@ (800209c <HAL_RCC_OscConfig+0x330>)
 8001ddc:	2180      	movs	r1, #128	@ 0x80
 8001dde:	0249      	lsls	r1, r1, #9
 8001de0:	430a      	orrs	r2, r1
 8001de2:	601a      	str	r2, [r3, #0]
 8001de4:	e020      	b.n	8001e28 <HAL_RCC_OscConfig+0xbc>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	685a      	ldr	r2, [r3, #4]
 8001dea:	23a0      	movs	r3, #160	@ 0xa0
 8001dec:	02db      	lsls	r3, r3, #11
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d10e      	bne.n	8001e10 <HAL_RCC_OscConfig+0xa4>
 8001df2:	4baa      	ldr	r3, [pc, #680]	@ (800209c <HAL_RCC_OscConfig+0x330>)
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	4ba9      	ldr	r3, [pc, #676]	@ (800209c <HAL_RCC_OscConfig+0x330>)
 8001df8:	2180      	movs	r1, #128	@ 0x80
 8001dfa:	02c9      	lsls	r1, r1, #11
 8001dfc:	430a      	orrs	r2, r1
 8001dfe:	601a      	str	r2, [r3, #0]
 8001e00:	4ba6      	ldr	r3, [pc, #664]	@ (800209c <HAL_RCC_OscConfig+0x330>)
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	4ba5      	ldr	r3, [pc, #660]	@ (800209c <HAL_RCC_OscConfig+0x330>)
 8001e06:	2180      	movs	r1, #128	@ 0x80
 8001e08:	0249      	lsls	r1, r1, #9
 8001e0a:	430a      	orrs	r2, r1
 8001e0c:	601a      	str	r2, [r3, #0]
 8001e0e:	e00b      	b.n	8001e28 <HAL_RCC_OscConfig+0xbc>
 8001e10:	4ba2      	ldr	r3, [pc, #648]	@ (800209c <HAL_RCC_OscConfig+0x330>)
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	4ba1      	ldr	r3, [pc, #644]	@ (800209c <HAL_RCC_OscConfig+0x330>)
 8001e16:	49a2      	ldr	r1, [pc, #648]	@ (80020a0 <HAL_RCC_OscConfig+0x334>)
 8001e18:	400a      	ands	r2, r1
 8001e1a:	601a      	str	r2, [r3, #0]
 8001e1c:	4b9f      	ldr	r3, [pc, #636]	@ (800209c <HAL_RCC_OscConfig+0x330>)
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	4b9e      	ldr	r3, [pc, #632]	@ (800209c <HAL_RCC_OscConfig+0x330>)
 8001e22:	49a0      	ldr	r1, [pc, #640]	@ (80020a4 <HAL_RCC_OscConfig+0x338>)
 8001e24:	400a      	ands	r2, r1
 8001e26:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d014      	beq.n	8001e5a <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e30:	f7ff fb9c 	bl	800156c <HAL_GetTick>
 8001e34:	0003      	movs	r3, r0
 8001e36:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e38:	e008      	b.n	8001e4c <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e3a:	f7ff fb97 	bl	800156c <HAL_GetTick>
 8001e3e:	0002      	movs	r2, r0
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	2b64      	cmp	r3, #100	@ 0x64
 8001e46:	d901      	bls.n	8001e4c <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8001e48:	2303      	movs	r3, #3
 8001e4a:	e2e9      	b.n	8002420 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e4c:	4b93      	ldr	r3, [pc, #588]	@ (800209c <HAL_RCC_OscConfig+0x330>)
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	2380      	movs	r3, #128	@ 0x80
 8001e52:	029b      	lsls	r3, r3, #10
 8001e54:	4013      	ands	r3, r2
 8001e56:	d0f0      	beq.n	8001e3a <HAL_RCC_OscConfig+0xce>
 8001e58:	e015      	b.n	8001e86 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e5a:	f7ff fb87 	bl	800156c <HAL_GetTick>
 8001e5e:	0003      	movs	r3, r0
 8001e60:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e62:	e008      	b.n	8001e76 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e64:	f7ff fb82 	bl	800156c <HAL_GetTick>
 8001e68:	0002      	movs	r2, r0
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	2b64      	cmp	r3, #100	@ 0x64
 8001e70:	d901      	bls.n	8001e76 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8001e72:	2303      	movs	r3, #3
 8001e74:	e2d4      	b.n	8002420 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e76:	4b89      	ldr	r3, [pc, #548]	@ (800209c <HAL_RCC_OscConfig+0x330>)
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	2380      	movs	r3, #128	@ 0x80
 8001e7c:	029b      	lsls	r3, r3, #10
 8001e7e:	4013      	ands	r3, r2
 8001e80:	d1f0      	bne.n	8001e64 <HAL_RCC_OscConfig+0xf8>
 8001e82:	e000      	b.n	8001e86 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e84:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	2202      	movs	r2, #2
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	d100      	bne.n	8001e92 <HAL_RCC_OscConfig+0x126>
 8001e90:	e099      	b.n	8001fc6 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e92:	4b82      	ldr	r3, [pc, #520]	@ (800209c <HAL_RCC_OscConfig+0x330>)
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	2238      	movs	r2, #56	@ 0x38
 8001e98:	4013      	ands	r3, r2
 8001e9a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e9c:	4b7f      	ldr	r3, [pc, #508]	@ (800209c <HAL_RCC_OscConfig+0x330>)
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	2203      	movs	r2, #3
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001ea6:	69bb      	ldr	r3, [r7, #24]
 8001ea8:	2b10      	cmp	r3, #16
 8001eaa:	d102      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x146>
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d002      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001eb2:	69bb      	ldr	r3, [r7, #24]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d135      	bne.n	8001f24 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001eb8:	4b78      	ldr	r3, [pc, #480]	@ (800209c <HAL_RCC_OscConfig+0x330>)
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	2380      	movs	r3, #128	@ 0x80
 8001ebe:	00db      	lsls	r3, r3, #3
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	d005      	beq.n	8001ed0 <HAL_RCC_OscConfig+0x164>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d101      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e2a7      	b.n	8002420 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ed0:	4b72      	ldr	r3, [pc, #456]	@ (800209c <HAL_RCC_OscConfig+0x330>)
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	4a74      	ldr	r2, [pc, #464]	@ (80020a8 <HAL_RCC_OscConfig+0x33c>)
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	0019      	movs	r1, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	695b      	ldr	r3, [r3, #20]
 8001ede:	021a      	lsls	r2, r3, #8
 8001ee0:	4b6e      	ldr	r3, [pc, #440]	@ (800209c <HAL_RCC_OscConfig+0x330>)
 8001ee2:	430a      	orrs	r2, r1
 8001ee4:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ee6:	69bb      	ldr	r3, [r7, #24]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d112      	bne.n	8001f12 <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001eec:	4b6b      	ldr	r3, [pc, #428]	@ (800209c <HAL_RCC_OscConfig+0x330>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a6e      	ldr	r2, [pc, #440]	@ (80020ac <HAL_RCC_OscConfig+0x340>)
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	0019      	movs	r1, r3
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	691a      	ldr	r2, [r3, #16]
 8001efa:	4b68      	ldr	r3, [pc, #416]	@ (800209c <HAL_RCC_OscConfig+0x330>)
 8001efc:	430a      	orrs	r2, r1
 8001efe:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001f00:	4b66      	ldr	r3, [pc, #408]	@ (800209c <HAL_RCC_OscConfig+0x330>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	0adb      	lsrs	r3, r3, #11
 8001f06:	2207      	movs	r2, #7
 8001f08:	4013      	ands	r3, r2
 8001f0a:	4a69      	ldr	r2, [pc, #420]	@ (80020b0 <HAL_RCC_OscConfig+0x344>)
 8001f0c:	40da      	lsrs	r2, r3
 8001f0e:	4b69      	ldr	r3, [pc, #420]	@ (80020b4 <HAL_RCC_OscConfig+0x348>)
 8001f10:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001f12:	4b69      	ldr	r3, [pc, #420]	@ (80020b8 <HAL_RCC_OscConfig+0x34c>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	0018      	movs	r0, r3
 8001f18:	f7ff facc 	bl	80014b4 <HAL_InitTick>
 8001f1c:	1e03      	subs	r3, r0, #0
 8001f1e:	d051      	beq.n	8001fc4 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e27d      	b.n	8002420 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d030      	beq.n	8001f8e <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001f2c:	4b5b      	ldr	r3, [pc, #364]	@ (800209c <HAL_RCC_OscConfig+0x330>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a5e      	ldr	r2, [pc, #376]	@ (80020ac <HAL_RCC_OscConfig+0x340>)
 8001f32:	4013      	ands	r3, r2
 8001f34:	0019      	movs	r1, r3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	691a      	ldr	r2, [r3, #16]
 8001f3a:	4b58      	ldr	r3, [pc, #352]	@ (800209c <HAL_RCC_OscConfig+0x330>)
 8001f3c:	430a      	orrs	r2, r1
 8001f3e:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001f40:	4b56      	ldr	r3, [pc, #344]	@ (800209c <HAL_RCC_OscConfig+0x330>)
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	4b55      	ldr	r3, [pc, #340]	@ (800209c <HAL_RCC_OscConfig+0x330>)
 8001f46:	2180      	movs	r1, #128	@ 0x80
 8001f48:	0049      	lsls	r1, r1, #1
 8001f4a:	430a      	orrs	r2, r1
 8001f4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f4e:	f7ff fb0d 	bl	800156c <HAL_GetTick>
 8001f52:	0003      	movs	r3, r0
 8001f54:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f56:	e008      	b.n	8001f6a <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f58:	f7ff fb08 	bl	800156c <HAL_GetTick>
 8001f5c:	0002      	movs	r2, r0
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d901      	bls.n	8001f6a <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e25a      	b.n	8002420 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f6a:	4b4c      	ldr	r3, [pc, #304]	@ (800209c <HAL_RCC_OscConfig+0x330>)
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	2380      	movs	r3, #128	@ 0x80
 8001f70:	00db      	lsls	r3, r3, #3
 8001f72:	4013      	ands	r3, r2
 8001f74:	d0f0      	beq.n	8001f58 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f76:	4b49      	ldr	r3, [pc, #292]	@ (800209c <HAL_RCC_OscConfig+0x330>)
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	4a4b      	ldr	r2, [pc, #300]	@ (80020a8 <HAL_RCC_OscConfig+0x33c>)
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	0019      	movs	r1, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	695b      	ldr	r3, [r3, #20]
 8001f84:	021a      	lsls	r2, r3, #8
 8001f86:	4b45      	ldr	r3, [pc, #276]	@ (800209c <HAL_RCC_OscConfig+0x330>)
 8001f88:	430a      	orrs	r2, r1
 8001f8a:	605a      	str	r2, [r3, #4]
 8001f8c:	e01b      	b.n	8001fc6 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001f8e:	4b43      	ldr	r3, [pc, #268]	@ (800209c <HAL_RCC_OscConfig+0x330>)
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	4b42      	ldr	r3, [pc, #264]	@ (800209c <HAL_RCC_OscConfig+0x330>)
 8001f94:	4949      	ldr	r1, [pc, #292]	@ (80020bc <HAL_RCC_OscConfig+0x350>)
 8001f96:	400a      	ands	r2, r1
 8001f98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f9a:	f7ff fae7 	bl	800156c <HAL_GetTick>
 8001f9e:	0003      	movs	r3, r0
 8001fa0:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001fa2:	e008      	b.n	8001fb6 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fa4:	f7ff fae2 	bl	800156c <HAL_GetTick>
 8001fa8:	0002      	movs	r2, r0
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d901      	bls.n	8001fb6 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e234      	b.n	8002420 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001fb6:	4b39      	ldr	r3, [pc, #228]	@ (800209c <HAL_RCC_OscConfig+0x330>)
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	2380      	movs	r3, #128	@ 0x80
 8001fbc:	00db      	lsls	r3, r3, #3
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	d1f0      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x238>
 8001fc2:	e000      	b.n	8001fc6 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001fc4:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	2208      	movs	r2, #8
 8001fcc:	4013      	ands	r3, r2
 8001fce:	d047      	beq.n	8002060 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001fd0:	4b32      	ldr	r3, [pc, #200]	@ (800209c <HAL_RCC_OscConfig+0x330>)
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	2238      	movs	r2, #56	@ 0x38
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	2b18      	cmp	r3, #24
 8001fda:	d10a      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001fdc:	4b2f      	ldr	r3, [pc, #188]	@ (800209c <HAL_RCC_OscConfig+0x330>)
 8001fde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fe0:	2202      	movs	r2, #2
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	d03c      	beq.n	8002060 <HAL_RCC_OscConfig+0x2f4>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	699b      	ldr	r3, [r3, #24]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d138      	bne.n	8002060 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e216      	b.n	8002420 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	699b      	ldr	r3, [r3, #24]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d019      	beq.n	800202e <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001ffa:	4b28      	ldr	r3, [pc, #160]	@ (800209c <HAL_RCC_OscConfig+0x330>)
 8001ffc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001ffe:	4b27      	ldr	r3, [pc, #156]	@ (800209c <HAL_RCC_OscConfig+0x330>)
 8002000:	2101      	movs	r1, #1
 8002002:	430a      	orrs	r2, r1
 8002004:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002006:	f7ff fab1 	bl	800156c <HAL_GetTick>
 800200a:	0003      	movs	r3, r0
 800200c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800200e:	e008      	b.n	8002022 <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002010:	f7ff faac 	bl	800156c <HAL_GetTick>
 8002014:	0002      	movs	r2, r0
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	2b02      	cmp	r3, #2
 800201c:	d901      	bls.n	8002022 <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e1fe      	b.n	8002420 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002022:	4b1e      	ldr	r3, [pc, #120]	@ (800209c <HAL_RCC_OscConfig+0x330>)
 8002024:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002026:	2202      	movs	r2, #2
 8002028:	4013      	ands	r3, r2
 800202a:	d0f1      	beq.n	8002010 <HAL_RCC_OscConfig+0x2a4>
 800202c:	e018      	b.n	8002060 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800202e:	4b1b      	ldr	r3, [pc, #108]	@ (800209c <HAL_RCC_OscConfig+0x330>)
 8002030:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002032:	4b1a      	ldr	r3, [pc, #104]	@ (800209c <HAL_RCC_OscConfig+0x330>)
 8002034:	2101      	movs	r1, #1
 8002036:	438a      	bics	r2, r1
 8002038:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800203a:	f7ff fa97 	bl	800156c <HAL_GetTick>
 800203e:	0003      	movs	r3, r0
 8002040:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002042:	e008      	b.n	8002056 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002044:	f7ff fa92 	bl	800156c <HAL_GetTick>
 8002048:	0002      	movs	r2, r0
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	2b02      	cmp	r3, #2
 8002050:	d901      	bls.n	8002056 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e1e4      	b.n	8002420 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002056:	4b11      	ldr	r3, [pc, #68]	@ (800209c <HAL_RCC_OscConfig+0x330>)
 8002058:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800205a:	2202      	movs	r2, #2
 800205c:	4013      	ands	r3, r2
 800205e:	d1f1      	bne.n	8002044 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2204      	movs	r2, #4
 8002066:	4013      	ands	r3, r2
 8002068:	d100      	bne.n	800206c <HAL_RCC_OscConfig+0x300>
 800206a:	e0c7      	b.n	80021fc <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 800206c:	231f      	movs	r3, #31
 800206e:	18fb      	adds	r3, r7, r3
 8002070:	2200      	movs	r2, #0
 8002072:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002074:	4b09      	ldr	r3, [pc, #36]	@ (800209c <HAL_RCC_OscConfig+0x330>)
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	2238      	movs	r2, #56	@ 0x38
 800207a:	4013      	ands	r3, r2
 800207c:	2b20      	cmp	r3, #32
 800207e:	d11f      	bne.n	80020c0 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002080:	4b06      	ldr	r3, [pc, #24]	@ (800209c <HAL_RCC_OscConfig+0x330>)
 8002082:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002084:	2202      	movs	r2, #2
 8002086:	4013      	ands	r3, r2
 8002088:	d100      	bne.n	800208c <HAL_RCC_OscConfig+0x320>
 800208a:	e0b7      	b.n	80021fc <HAL_RCC_OscConfig+0x490>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d000      	beq.n	8002096 <HAL_RCC_OscConfig+0x32a>
 8002094:	e0b2      	b.n	80021fc <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e1c2      	b.n	8002420 <HAL_RCC_OscConfig+0x6b4>
 800209a:	46c0      	nop			@ (mov r8, r8)
 800209c:	40021000 	.word	0x40021000
 80020a0:	fffeffff 	.word	0xfffeffff
 80020a4:	fffbffff 	.word	0xfffbffff
 80020a8:	ffff80ff 	.word	0xffff80ff
 80020ac:	ffffc7ff 	.word	0xffffc7ff
 80020b0:	00f42400 	.word	0x00f42400
 80020b4:	20000000 	.word	0x20000000
 80020b8:	20000004 	.word	0x20000004
 80020bc:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80020c0:	4bb5      	ldr	r3, [pc, #724]	@ (8002398 <HAL_RCC_OscConfig+0x62c>)
 80020c2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80020c4:	2380      	movs	r3, #128	@ 0x80
 80020c6:	055b      	lsls	r3, r3, #21
 80020c8:	4013      	ands	r3, r2
 80020ca:	d101      	bne.n	80020d0 <HAL_RCC_OscConfig+0x364>
 80020cc:	2301      	movs	r3, #1
 80020ce:	e000      	b.n	80020d2 <HAL_RCC_OscConfig+0x366>
 80020d0:	2300      	movs	r3, #0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d011      	beq.n	80020fa <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80020d6:	4bb0      	ldr	r3, [pc, #704]	@ (8002398 <HAL_RCC_OscConfig+0x62c>)
 80020d8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80020da:	4baf      	ldr	r3, [pc, #700]	@ (8002398 <HAL_RCC_OscConfig+0x62c>)
 80020dc:	2180      	movs	r1, #128	@ 0x80
 80020de:	0549      	lsls	r1, r1, #21
 80020e0:	430a      	orrs	r2, r1
 80020e2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80020e4:	4bac      	ldr	r3, [pc, #688]	@ (8002398 <HAL_RCC_OscConfig+0x62c>)
 80020e6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80020e8:	2380      	movs	r3, #128	@ 0x80
 80020ea:	055b      	lsls	r3, r3, #21
 80020ec:	4013      	ands	r3, r2
 80020ee:	60fb      	str	r3, [r7, #12]
 80020f0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80020f2:	231f      	movs	r3, #31
 80020f4:	18fb      	adds	r3, r7, r3
 80020f6:	2201      	movs	r2, #1
 80020f8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020fa:	4ba8      	ldr	r3, [pc, #672]	@ (800239c <HAL_RCC_OscConfig+0x630>)
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	2380      	movs	r3, #128	@ 0x80
 8002100:	005b      	lsls	r3, r3, #1
 8002102:	4013      	ands	r3, r2
 8002104:	d11a      	bne.n	800213c <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002106:	4ba5      	ldr	r3, [pc, #660]	@ (800239c <HAL_RCC_OscConfig+0x630>)
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	4ba4      	ldr	r3, [pc, #656]	@ (800239c <HAL_RCC_OscConfig+0x630>)
 800210c:	2180      	movs	r1, #128	@ 0x80
 800210e:	0049      	lsls	r1, r1, #1
 8002110:	430a      	orrs	r2, r1
 8002112:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002114:	f7ff fa2a 	bl	800156c <HAL_GetTick>
 8002118:	0003      	movs	r3, r0
 800211a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800211c:	e008      	b.n	8002130 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800211e:	f7ff fa25 	bl	800156c <HAL_GetTick>
 8002122:	0002      	movs	r2, r0
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	2b02      	cmp	r3, #2
 800212a:	d901      	bls.n	8002130 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 800212c:	2303      	movs	r3, #3
 800212e:	e177      	b.n	8002420 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002130:	4b9a      	ldr	r3, [pc, #616]	@ (800239c <HAL_RCC_OscConfig+0x630>)
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	2380      	movs	r3, #128	@ 0x80
 8002136:	005b      	lsls	r3, r3, #1
 8002138:	4013      	ands	r3, r2
 800213a:	d0f0      	beq.n	800211e <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	2b01      	cmp	r3, #1
 8002142:	d106      	bne.n	8002152 <HAL_RCC_OscConfig+0x3e6>
 8002144:	4b94      	ldr	r3, [pc, #592]	@ (8002398 <HAL_RCC_OscConfig+0x62c>)
 8002146:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002148:	4b93      	ldr	r3, [pc, #588]	@ (8002398 <HAL_RCC_OscConfig+0x62c>)
 800214a:	2101      	movs	r1, #1
 800214c:	430a      	orrs	r2, r1
 800214e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002150:	e01c      	b.n	800218c <HAL_RCC_OscConfig+0x420>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	2b05      	cmp	r3, #5
 8002158:	d10c      	bne.n	8002174 <HAL_RCC_OscConfig+0x408>
 800215a:	4b8f      	ldr	r3, [pc, #572]	@ (8002398 <HAL_RCC_OscConfig+0x62c>)
 800215c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800215e:	4b8e      	ldr	r3, [pc, #568]	@ (8002398 <HAL_RCC_OscConfig+0x62c>)
 8002160:	2104      	movs	r1, #4
 8002162:	430a      	orrs	r2, r1
 8002164:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002166:	4b8c      	ldr	r3, [pc, #560]	@ (8002398 <HAL_RCC_OscConfig+0x62c>)
 8002168:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800216a:	4b8b      	ldr	r3, [pc, #556]	@ (8002398 <HAL_RCC_OscConfig+0x62c>)
 800216c:	2101      	movs	r1, #1
 800216e:	430a      	orrs	r2, r1
 8002170:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002172:	e00b      	b.n	800218c <HAL_RCC_OscConfig+0x420>
 8002174:	4b88      	ldr	r3, [pc, #544]	@ (8002398 <HAL_RCC_OscConfig+0x62c>)
 8002176:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002178:	4b87      	ldr	r3, [pc, #540]	@ (8002398 <HAL_RCC_OscConfig+0x62c>)
 800217a:	2101      	movs	r1, #1
 800217c:	438a      	bics	r2, r1
 800217e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002180:	4b85      	ldr	r3, [pc, #532]	@ (8002398 <HAL_RCC_OscConfig+0x62c>)
 8002182:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002184:	4b84      	ldr	r3, [pc, #528]	@ (8002398 <HAL_RCC_OscConfig+0x62c>)
 8002186:	2104      	movs	r1, #4
 8002188:	438a      	bics	r2, r1
 800218a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d014      	beq.n	80021be <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002194:	f7ff f9ea 	bl	800156c <HAL_GetTick>
 8002198:	0003      	movs	r3, r0
 800219a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800219c:	e009      	b.n	80021b2 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800219e:	f7ff f9e5 	bl	800156c <HAL_GetTick>
 80021a2:	0002      	movs	r2, r0
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	4a7d      	ldr	r2, [pc, #500]	@ (80023a0 <HAL_RCC_OscConfig+0x634>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d901      	bls.n	80021b2 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e136      	b.n	8002420 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021b2:	4b79      	ldr	r3, [pc, #484]	@ (8002398 <HAL_RCC_OscConfig+0x62c>)
 80021b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021b6:	2202      	movs	r2, #2
 80021b8:	4013      	ands	r3, r2
 80021ba:	d0f0      	beq.n	800219e <HAL_RCC_OscConfig+0x432>
 80021bc:	e013      	b.n	80021e6 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021be:	f7ff f9d5 	bl	800156c <HAL_GetTick>
 80021c2:	0003      	movs	r3, r0
 80021c4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021c6:	e009      	b.n	80021dc <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021c8:	f7ff f9d0 	bl	800156c <HAL_GetTick>
 80021cc:	0002      	movs	r2, r0
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	4a73      	ldr	r2, [pc, #460]	@ (80023a0 <HAL_RCC_OscConfig+0x634>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d901      	bls.n	80021dc <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 80021d8:	2303      	movs	r3, #3
 80021da:	e121      	b.n	8002420 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021dc:	4b6e      	ldr	r3, [pc, #440]	@ (8002398 <HAL_RCC_OscConfig+0x62c>)
 80021de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021e0:	2202      	movs	r2, #2
 80021e2:	4013      	ands	r3, r2
 80021e4:	d1f0      	bne.n	80021c8 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80021e6:	231f      	movs	r3, #31
 80021e8:	18fb      	adds	r3, r7, r3
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d105      	bne.n	80021fc <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80021f0:	4b69      	ldr	r3, [pc, #420]	@ (8002398 <HAL_RCC_OscConfig+0x62c>)
 80021f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80021f4:	4b68      	ldr	r3, [pc, #416]	@ (8002398 <HAL_RCC_OscConfig+0x62c>)
 80021f6:	496b      	ldr	r1, [pc, #428]	@ (80023a4 <HAL_RCC_OscConfig+0x638>)
 80021f8:	400a      	ands	r2, r1
 80021fa:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2220      	movs	r2, #32
 8002202:	4013      	ands	r3, r2
 8002204:	d039      	beq.n	800227a <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	69db      	ldr	r3, [r3, #28]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d01b      	beq.n	8002246 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800220e:	4b62      	ldr	r3, [pc, #392]	@ (8002398 <HAL_RCC_OscConfig+0x62c>)
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	4b61      	ldr	r3, [pc, #388]	@ (8002398 <HAL_RCC_OscConfig+0x62c>)
 8002214:	2180      	movs	r1, #128	@ 0x80
 8002216:	03c9      	lsls	r1, r1, #15
 8002218:	430a      	orrs	r2, r1
 800221a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800221c:	f7ff f9a6 	bl	800156c <HAL_GetTick>
 8002220:	0003      	movs	r3, r0
 8002222:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002224:	e008      	b.n	8002238 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002226:	f7ff f9a1 	bl	800156c <HAL_GetTick>
 800222a:	0002      	movs	r2, r0
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	2b02      	cmp	r3, #2
 8002232:	d901      	bls.n	8002238 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8002234:	2303      	movs	r3, #3
 8002236:	e0f3      	b.n	8002420 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002238:	4b57      	ldr	r3, [pc, #348]	@ (8002398 <HAL_RCC_OscConfig+0x62c>)
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	2380      	movs	r3, #128	@ 0x80
 800223e:	041b      	lsls	r3, r3, #16
 8002240:	4013      	ands	r3, r2
 8002242:	d0f0      	beq.n	8002226 <HAL_RCC_OscConfig+0x4ba>
 8002244:	e019      	b.n	800227a <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002246:	4b54      	ldr	r3, [pc, #336]	@ (8002398 <HAL_RCC_OscConfig+0x62c>)
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	4b53      	ldr	r3, [pc, #332]	@ (8002398 <HAL_RCC_OscConfig+0x62c>)
 800224c:	4956      	ldr	r1, [pc, #344]	@ (80023a8 <HAL_RCC_OscConfig+0x63c>)
 800224e:	400a      	ands	r2, r1
 8002250:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002252:	f7ff f98b 	bl	800156c <HAL_GetTick>
 8002256:	0003      	movs	r3, r0
 8002258:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800225a:	e008      	b.n	800226e <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800225c:	f7ff f986 	bl	800156c <HAL_GetTick>
 8002260:	0002      	movs	r2, r0
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	2b02      	cmp	r3, #2
 8002268:	d901      	bls.n	800226e <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 800226a:	2303      	movs	r3, #3
 800226c:	e0d8      	b.n	8002420 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800226e:	4b4a      	ldr	r3, [pc, #296]	@ (8002398 <HAL_RCC_OscConfig+0x62c>)
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	2380      	movs	r3, #128	@ 0x80
 8002274:	041b      	lsls	r3, r3, #16
 8002276:	4013      	ands	r3, r2
 8002278:	d1f0      	bne.n	800225c <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6a1b      	ldr	r3, [r3, #32]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d100      	bne.n	8002284 <HAL_RCC_OscConfig+0x518>
 8002282:	e0cc      	b.n	800241e <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002284:	4b44      	ldr	r3, [pc, #272]	@ (8002398 <HAL_RCC_OscConfig+0x62c>)
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	2238      	movs	r2, #56	@ 0x38
 800228a:	4013      	ands	r3, r2
 800228c:	2b10      	cmp	r3, #16
 800228e:	d100      	bne.n	8002292 <HAL_RCC_OscConfig+0x526>
 8002290:	e07b      	b.n	800238a <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6a1b      	ldr	r3, [r3, #32]
 8002296:	2b02      	cmp	r3, #2
 8002298:	d156      	bne.n	8002348 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800229a:	4b3f      	ldr	r3, [pc, #252]	@ (8002398 <HAL_RCC_OscConfig+0x62c>)
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	4b3e      	ldr	r3, [pc, #248]	@ (8002398 <HAL_RCC_OscConfig+0x62c>)
 80022a0:	4942      	ldr	r1, [pc, #264]	@ (80023ac <HAL_RCC_OscConfig+0x640>)
 80022a2:	400a      	ands	r2, r1
 80022a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022a6:	f7ff f961 	bl	800156c <HAL_GetTick>
 80022aa:	0003      	movs	r3, r0
 80022ac:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022ae:	e008      	b.n	80022c2 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022b0:	f7ff f95c 	bl	800156c <HAL_GetTick>
 80022b4:	0002      	movs	r2, r0
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d901      	bls.n	80022c2 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e0ae      	b.n	8002420 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022c2:	4b35      	ldr	r3, [pc, #212]	@ (8002398 <HAL_RCC_OscConfig+0x62c>)
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	2380      	movs	r3, #128	@ 0x80
 80022c8:	049b      	lsls	r3, r3, #18
 80022ca:	4013      	ands	r3, r2
 80022cc:	d1f0      	bne.n	80022b0 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022ce:	4b32      	ldr	r3, [pc, #200]	@ (8002398 <HAL_RCC_OscConfig+0x62c>)
 80022d0:	68db      	ldr	r3, [r3, #12]
 80022d2:	4a37      	ldr	r2, [pc, #220]	@ (80023b0 <HAL_RCC_OscConfig+0x644>)
 80022d4:	4013      	ands	r3, r2
 80022d6:	0019      	movs	r1, r3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022e0:	431a      	orrs	r2, r3
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022e6:	021b      	lsls	r3, r3, #8
 80022e8:	431a      	orrs	r2, r3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ee:	431a      	orrs	r2, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022f4:	431a      	orrs	r2, r3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022fa:	431a      	orrs	r2, r3
 80022fc:	4b26      	ldr	r3, [pc, #152]	@ (8002398 <HAL_RCC_OscConfig+0x62c>)
 80022fe:	430a      	orrs	r2, r1
 8002300:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002302:	4b25      	ldr	r3, [pc, #148]	@ (8002398 <HAL_RCC_OscConfig+0x62c>)
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	4b24      	ldr	r3, [pc, #144]	@ (8002398 <HAL_RCC_OscConfig+0x62c>)
 8002308:	2180      	movs	r1, #128	@ 0x80
 800230a:	0449      	lsls	r1, r1, #17
 800230c:	430a      	orrs	r2, r1
 800230e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002310:	4b21      	ldr	r3, [pc, #132]	@ (8002398 <HAL_RCC_OscConfig+0x62c>)
 8002312:	68da      	ldr	r2, [r3, #12]
 8002314:	4b20      	ldr	r3, [pc, #128]	@ (8002398 <HAL_RCC_OscConfig+0x62c>)
 8002316:	2180      	movs	r1, #128	@ 0x80
 8002318:	0549      	lsls	r1, r1, #21
 800231a:	430a      	orrs	r2, r1
 800231c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800231e:	f7ff f925 	bl	800156c <HAL_GetTick>
 8002322:	0003      	movs	r3, r0
 8002324:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002326:	e008      	b.n	800233a <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002328:	f7ff f920 	bl	800156c <HAL_GetTick>
 800232c:	0002      	movs	r2, r0
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	2b02      	cmp	r3, #2
 8002334:	d901      	bls.n	800233a <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e072      	b.n	8002420 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800233a:	4b17      	ldr	r3, [pc, #92]	@ (8002398 <HAL_RCC_OscConfig+0x62c>)
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	2380      	movs	r3, #128	@ 0x80
 8002340:	049b      	lsls	r3, r3, #18
 8002342:	4013      	ands	r3, r2
 8002344:	d0f0      	beq.n	8002328 <HAL_RCC_OscConfig+0x5bc>
 8002346:	e06a      	b.n	800241e <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002348:	4b13      	ldr	r3, [pc, #76]	@ (8002398 <HAL_RCC_OscConfig+0x62c>)
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	4b12      	ldr	r3, [pc, #72]	@ (8002398 <HAL_RCC_OscConfig+0x62c>)
 800234e:	4917      	ldr	r1, [pc, #92]	@ (80023ac <HAL_RCC_OscConfig+0x640>)
 8002350:	400a      	ands	r2, r1
 8002352:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002354:	f7ff f90a 	bl	800156c <HAL_GetTick>
 8002358:	0003      	movs	r3, r0
 800235a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800235c:	e008      	b.n	8002370 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800235e:	f7ff f905 	bl	800156c <HAL_GetTick>
 8002362:	0002      	movs	r2, r0
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	2b02      	cmp	r3, #2
 800236a:	d901      	bls.n	8002370 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	e057      	b.n	8002420 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002370:	4b09      	ldr	r3, [pc, #36]	@ (8002398 <HAL_RCC_OscConfig+0x62c>)
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	2380      	movs	r3, #128	@ 0x80
 8002376:	049b      	lsls	r3, r3, #18
 8002378:	4013      	ands	r3, r2
 800237a:	d1f0      	bne.n	800235e <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800237c:	4b06      	ldr	r3, [pc, #24]	@ (8002398 <HAL_RCC_OscConfig+0x62c>)
 800237e:	68da      	ldr	r2, [r3, #12]
 8002380:	4b05      	ldr	r3, [pc, #20]	@ (8002398 <HAL_RCC_OscConfig+0x62c>)
 8002382:	490c      	ldr	r1, [pc, #48]	@ (80023b4 <HAL_RCC_OscConfig+0x648>)
 8002384:	400a      	ands	r2, r1
 8002386:	60da      	str	r2, [r3, #12]
 8002388:	e049      	b.n	800241e <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6a1b      	ldr	r3, [r3, #32]
 800238e:	2b01      	cmp	r3, #1
 8002390:	d112      	bne.n	80023b8 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e044      	b.n	8002420 <HAL_RCC_OscConfig+0x6b4>
 8002396:	46c0      	nop			@ (mov r8, r8)
 8002398:	40021000 	.word	0x40021000
 800239c:	40007000 	.word	0x40007000
 80023a0:	00001388 	.word	0x00001388
 80023a4:	efffffff 	.word	0xefffffff
 80023a8:	ffbfffff 	.word	0xffbfffff
 80023ac:	feffffff 	.word	0xfeffffff
 80023b0:	11c1808c 	.word	0x11c1808c
 80023b4:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80023b8:	4b1b      	ldr	r3, [pc, #108]	@ (8002428 <HAL_RCC_OscConfig+0x6bc>)
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	2203      	movs	r2, #3
 80023c2:	401a      	ands	r2, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d126      	bne.n	800241a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	2270      	movs	r2, #112	@ 0x70
 80023d0:	401a      	ands	r2, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d11f      	bne.n	800241a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023da:	697a      	ldr	r2, [r7, #20]
 80023dc:	23fe      	movs	r3, #254	@ 0xfe
 80023de:	01db      	lsls	r3, r3, #7
 80023e0:	401a      	ands	r2, r3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023e6:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d116      	bne.n	800241a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80023ec:	697a      	ldr	r2, [r7, #20]
 80023ee:	23f8      	movs	r3, #248	@ 0xf8
 80023f0:	039b      	lsls	r3, r3, #14
 80023f2:	401a      	ands	r2, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d10e      	bne.n	800241a <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80023fc:	697a      	ldr	r2, [r7, #20]
 80023fe:	23e0      	movs	r3, #224	@ 0xe0
 8002400:	051b      	lsls	r3, r3, #20
 8002402:	401a      	ands	r2, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002408:	429a      	cmp	r2, r3
 800240a:	d106      	bne.n	800241a <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	0f5b      	lsrs	r3, r3, #29
 8002410:	075a      	lsls	r2, r3, #29
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002416:	429a      	cmp	r2, r3
 8002418:	d001      	beq.n	800241e <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e000      	b.n	8002420 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 800241e:	2300      	movs	r3, #0
}
 8002420:	0018      	movs	r0, r3
 8002422:	46bd      	mov	sp, r7
 8002424:	b008      	add	sp, #32
 8002426:	bd80      	pop	{r7, pc}
 8002428:	40021000 	.word	0x40021000

0800242c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d101      	bne.n	8002440 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e0e9      	b.n	8002614 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002440:	4b76      	ldr	r3, [pc, #472]	@ (800261c <HAL_RCC_ClockConfig+0x1f0>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2207      	movs	r2, #7
 8002446:	4013      	ands	r3, r2
 8002448:	683a      	ldr	r2, [r7, #0]
 800244a:	429a      	cmp	r2, r3
 800244c:	d91e      	bls.n	800248c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800244e:	4b73      	ldr	r3, [pc, #460]	@ (800261c <HAL_RCC_ClockConfig+0x1f0>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	2207      	movs	r2, #7
 8002454:	4393      	bics	r3, r2
 8002456:	0019      	movs	r1, r3
 8002458:	4b70      	ldr	r3, [pc, #448]	@ (800261c <HAL_RCC_ClockConfig+0x1f0>)
 800245a:	683a      	ldr	r2, [r7, #0]
 800245c:	430a      	orrs	r2, r1
 800245e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002460:	f7ff f884 	bl	800156c <HAL_GetTick>
 8002464:	0003      	movs	r3, r0
 8002466:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002468:	e009      	b.n	800247e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800246a:	f7ff f87f 	bl	800156c <HAL_GetTick>
 800246e:	0002      	movs	r2, r0
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	4a6a      	ldr	r2, [pc, #424]	@ (8002620 <HAL_RCC_ClockConfig+0x1f4>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d901      	bls.n	800247e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e0ca      	b.n	8002614 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800247e:	4b67      	ldr	r3, [pc, #412]	@ (800261c <HAL_RCC_ClockConfig+0x1f0>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	2207      	movs	r2, #7
 8002484:	4013      	ands	r3, r2
 8002486:	683a      	ldr	r2, [r7, #0]
 8002488:	429a      	cmp	r2, r3
 800248a:	d1ee      	bne.n	800246a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2202      	movs	r2, #2
 8002492:	4013      	ands	r3, r2
 8002494:	d015      	beq.n	80024c2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	2204      	movs	r2, #4
 800249c:	4013      	ands	r3, r2
 800249e:	d006      	beq.n	80024ae <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80024a0:	4b60      	ldr	r3, [pc, #384]	@ (8002624 <HAL_RCC_ClockConfig+0x1f8>)
 80024a2:	689a      	ldr	r2, [r3, #8]
 80024a4:	4b5f      	ldr	r3, [pc, #380]	@ (8002624 <HAL_RCC_ClockConfig+0x1f8>)
 80024a6:	21e0      	movs	r1, #224	@ 0xe0
 80024a8:	01c9      	lsls	r1, r1, #7
 80024aa:	430a      	orrs	r2, r1
 80024ac:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024ae:	4b5d      	ldr	r3, [pc, #372]	@ (8002624 <HAL_RCC_ClockConfig+0x1f8>)
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	4a5d      	ldr	r2, [pc, #372]	@ (8002628 <HAL_RCC_ClockConfig+0x1fc>)
 80024b4:	4013      	ands	r3, r2
 80024b6:	0019      	movs	r1, r3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	689a      	ldr	r2, [r3, #8]
 80024bc:	4b59      	ldr	r3, [pc, #356]	@ (8002624 <HAL_RCC_ClockConfig+0x1f8>)
 80024be:	430a      	orrs	r2, r1
 80024c0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	2201      	movs	r2, #1
 80024c8:	4013      	ands	r3, r2
 80024ca:	d057      	beq.n	800257c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d107      	bne.n	80024e4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024d4:	4b53      	ldr	r3, [pc, #332]	@ (8002624 <HAL_RCC_ClockConfig+0x1f8>)
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	2380      	movs	r3, #128	@ 0x80
 80024da:	029b      	lsls	r3, r3, #10
 80024dc:	4013      	ands	r3, r2
 80024de:	d12b      	bne.n	8002538 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e097      	b.n	8002614 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d107      	bne.n	80024fc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024ec:	4b4d      	ldr	r3, [pc, #308]	@ (8002624 <HAL_RCC_ClockConfig+0x1f8>)
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	2380      	movs	r3, #128	@ 0x80
 80024f2:	049b      	lsls	r3, r3, #18
 80024f4:	4013      	ands	r3, r2
 80024f6:	d11f      	bne.n	8002538 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e08b      	b.n	8002614 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d107      	bne.n	8002514 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002504:	4b47      	ldr	r3, [pc, #284]	@ (8002624 <HAL_RCC_ClockConfig+0x1f8>)
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	2380      	movs	r3, #128	@ 0x80
 800250a:	00db      	lsls	r3, r3, #3
 800250c:	4013      	ands	r3, r2
 800250e:	d113      	bne.n	8002538 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e07f      	b.n	8002614 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	2b03      	cmp	r3, #3
 800251a:	d106      	bne.n	800252a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800251c:	4b41      	ldr	r3, [pc, #260]	@ (8002624 <HAL_RCC_ClockConfig+0x1f8>)
 800251e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002520:	2202      	movs	r2, #2
 8002522:	4013      	ands	r3, r2
 8002524:	d108      	bne.n	8002538 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e074      	b.n	8002614 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800252a:	4b3e      	ldr	r3, [pc, #248]	@ (8002624 <HAL_RCC_ClockConfig+0x1f8>)
 800252c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800252e:	2202      	movs	r2, #2
 8002530:	4013      	ands	r3, r2
 8002532:	d101      	bne.n	8002538 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e06d      	b.n	8002614 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002538:	4b3a      	ldr	r3, [pc, #232]	@ (8002624 <HAL_RCC_ClockConfig+0x1f8>)
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	2207      	movs	r2, #7
 800253e:	4393      	bics	r3, r2
 8002540:	0019      	movs	r1, r3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685a      	ldr	r2, [r3, #4]
 8002546:	4b37      	ldr	r3, [pc, #220]	@ (8002624 <HAL_RCC_ClockConfig+0x1f8>)
 8002548:	430a      	orrs	r2, r1
 800254a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800254c:	f7ff f80e 	bl	800156c <HAL_GetTick>
 8002550:	0003      	movs	r3, r0
 8002552:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002554:	e009      	b.n	800256a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002556:	f7ff f809 	bl	800156c <HAL_GetTick>
 800255a:	0002      	movs	r2, r0
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	4a2f      	ldr	r2, [pc, #188]	@ (8002620 <HAL_RCC_ClockConfig+0x1f4>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d901      	bls.n	800256a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e054      	b.n	8002614 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800256a:	4b2e      	ldr	r3, [pc, #184]	@ (8002624 <HAL_RCC_ClockConfig+0x1f8>)
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	2238      	movs	r2, #56	@ 0x38
 8002570:	401a      	ands	r2, r3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	00db      	lsls	r3, r3, #3
 8002578:	429a      	cmp	r2, r3
 800257a:	d1ec      	bne.n	8002556 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800257c:	4b27      	ldr	r3, [pc, #156]	@ (800261c <HAL_RCC_ClockConfig+0x1f0>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2207      	movs	r2, #7
 8002582:	4013      	ands	r3, r2
 8002584:	683a      	ldr	r2, [r7, #0]
 8002586:	429a      	cmp	r2, r3
 8002588:	d21e      	bcs.n	80025c8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800258a:	4b24      	ldr	r3, [pc, #144]	@ (800261c <HAL_RCC_ClockConfig+0x1f0>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	2207      	movs	r2, #7
 8002590:	4393      	bics	r3, r2
 8002592:	0019      	movs	r1, r3
 8002594:	4b21      	ldr	r3, [pc, #132]	@ (800261c <HAL_RCC_ClockConfig+0x1f0>)
 8002596:	683a      	ldr	r2, [r7, #0]
 8002598:	430a      	orrs	r2, r1
 800259a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800259c:	f7fe ffe6 	bl	800156c <HAL_GetTick>
 80025a0:	0003      	movs	r3, r0
 80025a2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80025a4:	e009      	b.n	80025ba <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025a6:	f7fe ffe1 	bl	800156c <HAL_GetTick>
 80025aa:	0002      	movs	r2, r0
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	4a1b      	ldr	r2, [pc, #108]	@ (8002620 <HAL_RCC_ClockConfig+0x1f4>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d901      	bls.n	80025ba <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e02c      	b.n	8002614 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80025ba:	4b18      	ldr	r3, [pc, #96]	@ (800261c <HAL_RCC_ClockConfig+0x1f0>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	2207      	movs	r2, #7
 80025c0:	4013      	ands	r3, r2
 80025c2:	683a      	ldr	r2, [r7, #0]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d1ee      	bne.n	80025a6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	2204      	movs	r2, #4
 80025ce:	4013      	ands	r3, r2
 80025d0:	d009      	beq.n	80025e6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80025d2:	4b14      	ldr	r3, [pc, #80]	@ (8002624 <HAL_RCC_ClockConfig+0x1f8>)
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	4a15      	ldr	r2, [pc, #84]	@ (800262c <HAL_RCC_ClockConfig+0x200>)
 80025d8:	4013      	ands	r3, r2
 80025da:	0019      	movs	r1, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	68da      	ldr	r2, [r3, #12]
 80025e0:	4b10      	ldr	r3, [pc, #64]	@ (8002624 <HAL_RCC_ClockConfig+0x1f8>)
 80025e2:	430a      	orrs	r2, r1
 80025e4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80025e6:	f000 f829 	bl	800263c <HAL_RCC_GetSysClockFreq>
 80025ea:	0001      	movs	r1, r0
 80025ec:	4b0d      	ldr	r3, [pc, #52]	@ (8002624 <HAL_RCC_ClockConfig+0x1f8>)
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	0a1b      	lsrs	r3, r3, #8
 80025f2:	220f      	movs	r2, #15
 80025f4:	401a      	ands	r2, r3
 80025f6:	4b0e      	ldr	r3, [pc, #56]	@ (8002630 <HAL_RCC_ClockConfig+0x204>)
 80025f8:	0092      	lsls	r2, r2, #2
 80025fa:	58d3      	ldr	r3, [r2, r3]
 80025fc:	221f      	movs	r2, #31
 80025fe:	4013      	ands	r3, r2
 8002600:	000a      	movs	r2, r1
 8002602:	40da      	lsrs	r2, r3
 8002604:	4b0b      	ldr	r3, [pc, #44]	@ (8002634 <HAL_RCC_ClockConfig+0x208>)
 8002606:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002608:	4b0b      	ldr	r3, [pc, #44]	@ (8002638 <HAL_RCC_ClockConfig+0x20c>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	0018      	movs	r0, r3
 800260e:	f7fe ff51 	bl	80014b4 <HAL_InitTick>
 8002612:	0003      	movs	r3, r0
}
 8002614:	0018      	movs	r0, r3
 8002616:	46bd      	mov	sp, r7
 8002618:	b004      	add	sp, #16
 800261a:	bd80      	pop	{r7, pc}
 800261c:	40022000 	.word	0x40022000
 8002620:	00001388 	.word	0x00001388
 8002624:	40021000 	.word	0x40021000
 8002628:	fffff0ff 	.word	0xfffff0ff
 800262c:	ffff8fff 	.word	0xffff8fff
 8002630:	080041b8 	.word	0x080041b8
 8002634:	20000000 	.word	0x20000000
 8002638:	20000004 	.word	0x20000004

0800263c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b086      	sub	sp, #24
 8002640:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002642:	4b3c      	ldr	r3, [pc, #240]	@ (8002734 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	2238      	movs	r2, #56	@ 0x38
 8002648:	4013      	ands	r3, r2
 800264a:	d10f      	bne.n	800266c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800264c:	4b39      	ldr	r3, [pc, #228]	@ (8002734 <HAL_RCC_GetSysClockFreq+0xf8>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	0adb      	lsrs	r3, r3, #11
 8002652:	2207      	movs	r2, #7
 8002654:	4013      	ands	r3, r2
 8002656:	2201      	movs	r2, #1
 8002658:	409a      	lsls	r2, r3
 800265a:	0013      	movs	r3, r2
 800265c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800265e:	6839      	ldr	r1, [r7, #0]
 8002660:	4835      	ldr	r0, [pc, #212]	@ (8002738 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002662:	f7fd fd59 	bl	8000118 <__udivsi3>
 8002666:	0003      	movs	r3, r0
 8002668:	613b      	str	r3, [r7, #16]
 800266a:	e05d      	b.n	8002728 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800266c:	4b31      	ldr	r3, [pc, #196]	@ (8002734 <HAL_RCC_GetSysClockFreq+0xf8>)
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	2238      	movs	r2, #56	@ 0x38
 8002672:	4013      	ands	r3, r2
 8002674:	2b08      	cmp	r3, #8
 8002676:	d102      	bne.n	800267e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002678:	4b30      	ldr	r3, [pc, #192]	@ (800273c <HAL_RCC_GetSysClockFreq+0x100>)
 800267a:	613b      	str	r3, [r7, #16]
 800267c:	e054      	b.n	8002728 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800267e:	4b2d      	ldr	r3, [pc, #180]	@ (8002734 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	2238      	movs	r2, #56	@ 0x38
 8002684:	4013      	ands	r3, r2
 8002686:	2b10      	cmp	r3, #16
 8002688:	d138      	bne.n	80026fc <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800268a:	4b2a      	ldr	r3, [pc, #168]	@ (8002734 <HAL_RCC_GetSysClockFreq+0xf8>)
 800268c:	68db      	ldr	r3, [r3, #12]
 800268e:	2203      	movs	r2, #3
 8002690:	4013      	ands	r3, r2
 8002692:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002694:	4b27      	ldr	r3, [pc, #156]	@ (8002734 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	091b      	lsrs	r3, r3, #4
 800269a:	2207      	movs	r2, #7
 800269c:	4013      	ands	r3, r2
 800269e:	3301      	adds	r3, #1
 80026a0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2b03      	cmp	r3, #3
 80026a6:	d10d      	bne.n	80026c4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80026a8:	68b9      	ldr	r1, [r7, #8]
 80026aa:	4824      	ldr	r0, [pc, #144]	@ (800273c <HAL_RCC_GetSysClockFreq+0x100>)
 80026ac:	f7fd fd34 	bl	8000118 <__udivsi3>
 80026b0:	0003      	movs	r3, r0
 80026b2:	0019      	movs	r1, r3
 80026b4:	4b1f      	ldr	r3, [pc, #124]	@ (8002734 <HAL_RCC_GetSysClockFreq+0xf8>)
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	0a1b      	lsrs	r3, r3, #8
 80026ba:	227f      	movs	r2, #127	@ 0x7f
 80026bc:	4013      	ands	r3, r2
 80026be:	434b      	muls	r3, r1
 80026c0:	617b      	str	r3, [r7, #20]
        break;
 80026c2:	e00d      	b.n	80026e0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80026c4:	68b9      	ldr	r1, [r7, #8]
 80026c6:	481c      	ldr	r0, [pc, #112]	@ (8002738 <HAL_RCC_GetSysClockFreq+0xfc>)
 80026c8:	f7fd fd26 	bl	8000118 <__udivsi3>
 80026cc:	0003      	movs	r3, r0
 80026ce:	0019      	movs	r1, r3
 80026d0:	4b18      	ldr	r3, [pc, #96]	@ (8002734 <HAL_RCC_GetSysClockFreq+0xf8>)
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	0a1b      	lsrs	r3, r3, #8
 80026d6:	227f      	movs	r2, #127	@ 0x7f
 80026d8:	4013      	ands	r3, r2
 80026da:	434b      	muls	r3, r1
 80026dc:	617b      	str	r3, [r7, #20]
        break;
 80026de:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80026e0:	4b14      	ldr	r3, [pc, #80]	@ (8002734 <HAL_RCC_GetSysClockFreq+0xf8>)
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	0f5b      	lsrs	r3, r3, #29
 80026e6:	2207      	movs	r2, #7
 80026e8:	4013      	ands	r3, r2
 80026ea:	3301      	adds	r3, #1
 80026ec:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80026ee:	6879      	ldr	r1, [r7, #4]
 80026f0:	6978      	ldr	r0, [r7, #20]
 80026f2:	f7fd fd11 	bl	8000118 <__udivsi3>
 80026f6:	0003      	movs	r3, r0
 80026f8:	613b      	str	r3, [r7, #16]
 80026fa:	e015      	b.n	8002728 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80026fc:	4b0d      	ldr	r3, [pc, #52]	@ (8002734 <HAL_RCC_GetSysClockFreq+0xf8>)
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	2238      	movs	r2, #56	@ 0x38
 8002702:	4013      	ands	r3, r2
 8002704:	2b20      	cmp	r3, #32
 8002706:	d103      	bne.n	8002710 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002708:	2380      	movs	r3, #128	@ 0x80
 800270a:	021b      	lsls	r3, r3, #8
 800270c:	613b      	str	r3, [r7, #16]
 800270e:	e00b      	b.n	8002728 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002710:	4b08      	ldr	r3, [pc, #32]	@ (8002734 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	2238      	movs	r2, #56	@ 0x38
 8002716:	4013      	ands	r3, r2
 8002718:	2b18      	cmp	r3, #24
 800271a:	d103      	bne.n	8002724 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800271c:	23fa      	movs	r3, #250	@ 0xfa
 800271e:	01db      	lsls	r3, r3, #7
 8002720:	613b      	str	r3, [r7, #16]
 8002722:	e001      	b.n	8002728 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002724:	2300      	movs	r3, #0
 8002726:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002728:	693b      	ldr	r3, [r7, #16]
}
 800272a:	0018      	movs	r0, r3
 800272c:	46bd      	mov	sp, r7
 800272e:	b006      	add	sp, #24
 8002730:	bd80      	pop	{r7, pc}
 8002732:	46c0      	nop			@ (mov r8, r8)
 8002734:	40021000 	.word	0x40021000
 8002738:	00f42400 	.word	0x00f42400
 800273c:	007a1200 	.word	0x007a1200

08002740 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b086      	sub	sp, #24
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002748:	2313      	movs	r3, #19
 800274a:	18fb      	adds	r3, r7, r3
 800274c:	2200      	movs	r2, #0
 800274e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002750:	2312      	movs	r3, #18
 8002752:	18fb      	adds	r3, r7, r3
 8002754:	2200      	movs	r2, #0
 8002756:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	2380      	movs	r3, #128	@ 0x80
 800275e:	029b      	lsls	r3, r3, #10
 8002760:	4013      	ands	r3, r2
 8002762:	d100      	bne.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002764:	e0ad      	b.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002766:	2011      	movs	r0, #17
 8002768:	183b      	adds	r3, r7, r0
 800276a:	2200      	movs	r2, #0
 800276c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800276e:	4b47      	ldr	r3, [pc, #284]	@ (800288c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002770:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002772:	2380      	movs	r3, #128	@ 0x80
 8002774:	055b      	lsls	r3, r3, #21
 8002776:	4013      	ands	r3, r2
 8002778:	d110      	bne.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800277a:	4b44      	ldr	r3, [pc, #272]	@ (800288c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800277c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800277e:	4b43      	ldr	r3, [pc, #268]	@ (800288c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002780:	2180      	movs	r1, #128	@ 0x80
 8002782:	0549      	lsls	r1, r1, #21
 8002784:	430a      	orrs	r2, r1
 8002786:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002788:	4b40      	ldr	r3, [pc, #256]	@ (800288c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800278a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800278c:	2380      	movs	r3, #128	@ 0x80
 800278e:	055b      	lsls	r3, r3, #21
 8002790:	4013      	ands	r3, r2
 8002792:	60bb      	str	r3, [r7, #8]
 8002794:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002796:	183b      	adds	r3, r7, r0
 8002798:	2201      	movs	r2, #1
 800279a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800279c:	4b3c      	ldr	r3, [pc, #240]	@ (8002890 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	4b3b      	ldr	r3, [pc, #236]	@ (8002890 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80027a2:	2180      	movs	r1, #128	@ 0x80
 80027a4:	0049      	lsls	r1, r1, #1
 80027a6:	430a      	orrs	r2, r1
 80027a8:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80027aa:	f7fe fedf 	bl	800156c <HAL_GetTick>
 80027ae:	0003      	movs	r3, r0
 80027b0:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80027b2:	e00b      	b.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027b4:	f7fe feda 	bl	800156c <HAL_GetTick>
 80027b8:	0002      	movs	r2, r0
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d904      	bls.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80027c2:	2313      	movs	r3, #19
 80027c4:	18fb      	adds	r3, r7, r3
 80027c6:	2203      	movs	r2, #3
 80027c8:	701a      	strb	r2, [r3, #0]
        break;
 80027ca:	e005      	b.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80027cc:	4b30      	ldr	r3, [pc, #192]	@ (8002890 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	2380      	movs	r3, #128	@ 0x80
 80027d2:	005b      	lsls	r3, r3, #1
 80027d4:	4013      	ands	r3, r2
 80027d6:	d0ed      	beq.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80027d8:	2313      	movs	r3, #19
 80027da:	18fb      	adds	r3, r7, r3
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d15e      	bne.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80027e2:	4b2a      	ldr	r3, [pc, #168]	@ (800288c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80027e4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80027e6:	23c0      	movs	r3, #192	@ 0xc0
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	4013      	ands	r3, r2
 80027ec:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d019      	beq.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f8:	697a      	ldr	r2, [r7, #20]
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d014      	beq.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80027fe:	4b23      	ldr	r3, [pc, #140]	@ (800288c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002800:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002802:	4a24      	ldr	r2, [pc, #144]	@ (8002894 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8002804:	4013      	ands	r3, r2
 8002806:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002808:	4b20      	ldr	r3, [pc, #128]	@ (800288c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800280a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800280c:	4b1f      	ldr	r3, [pc, #124]	@ (800288c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800280e:	2180      	movs	r1, #128	@ 0x80
 8002810:	0249      	lsls	r1, r1, #9
 8002812:	430a      	orrs	r2, r1
 8002814:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002816:	4b1d      	ldr	r3, [pc, #116]	@ (800288c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002818:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800281a:	4b1c      	ldr	r3, [pc, #112]	@ (800288c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800281c:	491e      	ldr	r1, [pc, #120]	@ (8002898 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 800281e:	400a      	ands	r2, r1
 8002820:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002822:	4b1a      	ldr	r3, [pc, #104]	@ (800288c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002824:	697a      	ldr	r2, [r7, #20]
 8002826:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	2201      	movs	r2, #1
 800282c:	4013      	ands	r3, r2
 800282e:	d016      	beq.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002830:	f7fe fe9c 	bl	800156c <HAL_GetTick>
 8002834:	0003      	movs	r3, r0
 8002836:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002838:	e00c      	b.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800283a:	f7fe fe97 	bl	800156c <HAL_GetTick>
 800283e:	0002      	movs	r2, r0
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	4a15      	ldr	r2, [pc, #84]	@ (800289c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d904      	bls.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800284a:	2313      	movs	r3, #19
 800284c:	18fb      	adds	r3, r7, r3
 800284e:	2203      	movs	r2, #3
 8002850:	701a      	strb	r2, [r3, #0]
            break;
 8002852:	e004      	b.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002854:	4b0d      	ldr	r3, [pc, #52]	@ (800288c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002856:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002858:	2202      	movs	r2, #2
 800285a:	4013      	ands	r3, r2
 800285c:	d0ed      	beq.n	800283a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800285e:	2313      	movs	r3, #19
 8002860:	18fb      	adds	r3, r7, r3
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d10a      	bne.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002868:	4b08      	ldr	r3, [pc, #32]	@ (800288c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800286a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800286c:	4a09      	ldr	r2, [pc, #36]	@ (8002894 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800286e:	4013      	ands	r3, r2
 8002870:	0019      	movs	r1, r3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002876:	4b05      	ldr	r3, [pc, #20]	@ (800288c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002878:	430a      	orrs	r2, r1
 800287a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800287c:	e016      	b.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800287e:	2312      	movs	r3, #18
 8002880:	18fb      	adds	r3, r7, r3
 8002882:	2213      	movs	r2, #19
 8002884:	18ba      	adds	r2, r7, r2
 8002886:	7812      	ldrb	r2, [r2, #0]
 8002888:	701a      	strb	r2, [r3, #0]
 800288a:	e00f      	b.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800288c:	40021000 	.word	0x40021000
 8002890:	40007000 	.word	0x40007000
 8002894:	fffffcff 	.word	0xfffffcff
 8002898:	fffeffff 	.word	0xfffeffff
 800289c:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028a0:	2312      	movs	r3, #18
 80028a2:	18fb      	adds	r3, r7, r3
 80028a4:	2213      	movs	r2, #19
 80028a6:	18ba      	adds	r2, r7, r2
 80028a8:	7812      	ldrb	r2, [r2, #0]
 80028aa:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80028ac:	2311      	movs	r3, #17
 80028ae:	18fb      	adds	r3, r7, r3
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d105      	bne.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028b6:	4bb6      	ldr	r3, [pc, #728]	@ (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80028b8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80028ba:	4bb5      	ldr	r3, [pc, #724]	@ (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80028bc:	49b5      	ldr	r1, [pc, #724]	@ (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80028be:	400a      	ands	r2, r1
 80028c0:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	2201      	movs	r2, #1
 80028c8:	4013      	ands	r3, r2
 80028ca:	d009      	beq.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028cc:	4bb0      	ldr	r3, [pc, #704]	@ (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80028ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028d0:	2203      	movs	r2, #3
 80028d2:	4393      	bics	r3, r2
 80028d4:	0019      	movs	r1, r3
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	685a      	ldr	r2, [r3, #4]
 80028da:	4bad      	ldr	r3, [pc, #692]	@ (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80028dc:	430a      	orrs	r2, r1
 80028de:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	2202      	movs	r2, #2
 80028e6:	4013      	ands	r3, r2
 80028e8:	d009      	beq.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80028ea:	4ba9      	ldr	r3, [pc, #676]	@ (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80028ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028ee:	220c      	movs	r2, #12
 80028f0:	4393      	bics	r3, r2
 80028f2:	0019      	movs	r1, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	689a      	ldr	r2, [r3, #8]
 80028f8:	4ba5      	ldr	r3, [pc, #660]	@ (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80028fa:	430a      	orrs	r2, r1
 80028fc:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	2204      	movs	r2, #4
 8002904:	4013      	ands	r3, r2
 8002906:	d009      	beq.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002908:	4ba1      	ldr	r3, [pc, #644]	@ (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800290a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800290c:	2230      	movs	r2, #48	@ 0x30
 800290e:	4393      	bics	r3, r2
 8002910:	0019      	movs	r1, r3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	68da      	ldr	r2, [r3, #12]
 8002916:	4b9e      	ldr	r3, [pc, #632]	@ (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002918:	430a      	orrs	r2, r1
 800291a:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2210      	movs	r2, #16
 8002922:	4013      	ands	r3, r2
 8002924:	d009      	beq.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002926:	4b9a      	ldr	r3, [pc, #616]	@ (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002928:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800292a:	4a9b      	ldr	r2, [pc, #620]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800292c:	4013      	ands	r3, r2
 800292e:	0019      	movs	r1, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	691a      	ldr	r2, [r3, #16]
 8002934:	4b96      	ldr	r3, [pc, #600]	@ (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002936:	430a      	orrs	r2, r1
 8002938:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	2380      	movs	r3, #128	@ 0x80
 8002940:	015b      	lsls	r3, r3, #5
 8002942:	4013      	ands	r3, r2
 8002944:	d009      	beq.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8002946:	4b92      	ldr	r3, [pc, #584]	@ (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002948:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800294a:	4a94      	ldr	r2, [pc, #592]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800294c:	4013      	ands	r3, r2
 800294e:	0019      	movs	r1, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	695a      	ldr	r2, [r3, #20]
 8002954:	4b8e      	ldr	r3, [pc, #568]	@ (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002956:	430a      	orrs	r2, r1
 8002958:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	2380      	movs	r3, #128	@ 0x80
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	4013      	ands	r3, r2
 8002964:	d009      	beq.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002966:	4b8a      	ldr	r3, [pc, #552]	@ (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002968:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800296a:	4a8d      	ldr	r2, [pc, #564]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 800296c:	4013      	ands	r3, r2
 800296e:	0019      	movs	r1, r3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002974:	4b86      	ldr	r3, [pc, #536]	@ (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002976:	430a      	orrs	r2, r1
 8002978:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	2380      	movs	r3, #128	@ 0x80
 8002980:	00db      	lsls	r3, r3, #3
 8002982:	4013      	ands	r3, r2
 8002984:	d009      	beq.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002986:	4b82      	ldr	r3, [pc, #520]	@ (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002988:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800298a:	4a86      	ldr	r2, [pc, #536]	@ (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 800298c:	4013      	ands	r3, r2
 800298e:	0019      	movs	r1, r3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002994:	4b7e      	ldr	r3, [pc, #504]	@ (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002996:	430a      	orrs	r2, r1
 8002998:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	2220      	movs	r2, #32
 80029a0:	4013      	ands	r3, r2
 80029a2:	d009      	beq.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80029a4:	4b7a      	ldr	r3, [pc, #488]	@ (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80029a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029a8:	4a7f      	ldr	r2, [pc, #508]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80029aa:	4013      	ands	r3, r2
 80029ac:	0019      	movs	r1, r3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	699a      	ldr	r2, [r3, #24]
 80029b2:	4b77      	ldr	r3, [pc, #476]	@ (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80029b4:	430a      	orrs	r2, r1
 80029b6:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	2240      	movs	r2, #64	@ 0x40
 80029be:	4013      	ands	r3, r2
 80029c0:	d009      	beq.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80029c2:	4b73      	ldr	r3, [pc, #460]	@ (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80029c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029c6:	4a79      	ldr	r2, [pc, #484]	@ (8002bac <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80029c8:	4013      	ands	r3, r2
 80029ca:	0019      	movs	r1, r3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	69da      	ldr	r2, [r3, #28]
 80029d0:	4b6f      	ldr	r3, [pc, #444]	@ (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80029d2:	430a      	orrs	r2, r1
 80029d4:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	2380      	movs	r3, #128	@ 0x80
 80029dc:	01db      	lsls	r3, r3, #7
 80029de:	4013      	ands	r3, r2
 80029e0:	d015      	beq.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80029e2:	4b6b      	ldr	r3, [pc, #428]	@ (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80029e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	0899      	lsrs	r1, r3, #2
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80029ee:	4b68      	ldr	r3, [pc, #416]	@ (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80029f0:	430a      	orrs	r2, r1
 80029f2:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80029f8:	2380      	movs	r3, #128	@ 0x80
 80029fa:	05db      	lsls	r3, r3, #23
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d106      	bne.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002a00:	4b63      	ldr	r3, [pc, #396]	@ (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002a02:	68da      	ldr	r2, [r3, #12]
 8002a04:	4b62      	ldr	r3, [pc, #392]	@ (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002a06:	2180      	movs	r1, #128	@ 0x80
 8002a08:	0249      	lsls	r1, r1, #9
 8002a0a:	430a      	orrs	r2, r1
 8002a0c:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	2380      	movs	r3, #128	@ 0x80
 8002a14:	031b      	lsls	r3, r3, #12
 8002a16:	4013      	ands	r3, r2
 8002a18:	d009      	beq.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002a1a:	4b5d      	ldr	r3, [pc, #372]	@ (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002a1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a1e:	2240      	movs	r2, #64	@ 0x40
 8002a20:	4393      	bics	r3, r2
 8002a22:	0019      	movs	r1, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a28:	4b59      	ldr	r3, [pc, #356]	@ (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002a2a:	430a      	orrs	r2, r1
 8002a2c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	2380      	movs	r3, #128	@ 0x80
 8002a34:	039b      	lsls	r3, r3, #14
 8002a36:	4013      	ands	r3, r2
 8002a38:	d016      	beq.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002a3a:	4b55      	ldr	r3, [pc, #340]	@ (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002a3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a3e:	4a5c      	ldr	r2, [pc, #368]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002a40:	4013      	ands	r3, r2
 8002a42:	0019      	movs	r1, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002a48:	4b51      	ldr	r3, [pc, #324]	@ (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002a4a:	430a      	orrs	r2, r1
 8002a4c:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002a52:	2380      	movs	r3, #128	@ 0x80
 8002a54:	03db      	lsls	r3, r3, #15
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d106      	bne.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002a5a:	4b4d      	ldr	r3, [pc, #308]	@ (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002a5c:	68da      	ldr	r2, [r3, #12]
 8002a5e:	4b4c      	ldr	r3, [pc, #304]	@ (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002a60:	2180      	movs	r1, #128	@ 0x80
 8002a62:	0449      	lsls	r1, r1, #17
 8002a64:	430a      	orrs	r2, r1
 8002a66:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	2380      	movs	r3, #128	@ 0x80
 8002a6e:	03db      	lsls	r3, r3, #15
 8002a70:	4013      	ands	r3, r2
 8002a72:	d016      	beq.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002a74:	4b46      	ldr	r3, [pc, #280]	@ (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002a76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a78:	4a4e      	ldr	r2, [pc, #312]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	0019      	movs	r1, r3
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002a82:	4b43      	ldr	r3, [pc, #268]	@ (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002a84:	430a      	orrs	r2, r1
 8002a86:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002a8c:	2380      	movs	r3, #128	@ 0x80
 8002a8e:	045b      	lsls	r3, r3, #17
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d106      	bne.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002a94:	4b3e      	ldr	r3, [pc, #248]	@ (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002a96:	68da      	ldr	r2, [r3, #12]
 8002a98:	4b3d      	ldr	r3, [pc, #244]	@ (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002a9a:	2180      	movs	r1, #128	@ 0x80
 8002a9c:	0449      	lsls	r1, r1, #17
 8002a9e:	430a      	orrs	r2, r1
 8002aa0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	2380      	movs	r3, #128	@ 0x80
 8002aa8:	011b      	lsls	r3, r3, #4
 8002aaa:	4013      	ands	r3, r2
 8002aac:	d014      	beq.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002aae:	4b38      	ldr	r3, [pc, #224]	@ (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002ab0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ab2:	2203      	movs	r2, #3
 8002ab4:	4393      	bics	r3, r2
 8002ab6:	0019      	movs	r1, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6a1a      	ldr	r2, [r3, #32]
 8002abc:	4b34      	ldr	r3, [pc, #208]	@ (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002abe:	430a      	orrs	r2, r1
 8002ac0:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6a1b      	ldr	r3, [r3, #32]
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d106      	bne.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002aca:	4b31      	ldr	r3, [pc, #196]	@ (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002acc:	68da      	ldr	r2, [r3, #12]
 8002ace:	4b30      	ldr	r3, [pc, #192]	@ (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002ad0:	2180      	movs	r1, #128	@ 0x80
 8002ad2:	0249      	lsls	r1, r1, #9
 8002ad4:	430a      	orrs	r2, r1
 8002ad6:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	2380      	movs	r3, #128	@ 0x80
 8002ade:	019b      	lsls	r3, r3, #6
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	d014      	beq.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8002ae4:	4b2a      	ldr	r3, [pc, #168]	@ (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002ae6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ae8:	220c      	movs	r2, #12
 8002aea:	4393      	bics	r3, r2
 8002aec:	0019      	movs	r1, r3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002af2:	4b27      	ldr	r3, [pc, #156]	@ (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002af4:	430a      	orrs	r2, r1
 8002af6:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002afc:	2b04      	cmp	r3, #4
 8002afe:	d106      	bne.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002b00:	4b23      	ldr	r3, [pc, #140]	@ (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002b02:	68da      	ldr	r2, [r3, #12]
 8002b04:	4b22      	ldr	r3, [pc, #136]	@ (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002b06:	2180      	movs	r1, #128	@ 0x80
 8002b08:	0249      	lsls	r1, r1, #9
 8002b0a:	430a      	orrs	r2, r1
 8002b0c:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	2380      	movs	r3, #128	@ 0x80
 8002b14:	045b      	lsls	r3, r3, #17
 8002b16:	4013      	ands	r3, r2
 8002b18:	d016      	beq.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b1a:	4b1d      	ldr	r3, [pc, #116]	@ (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002b1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b1e:	4a22      	ldr	r2, [pc, #136]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8002b20:	4013      	ands	r3, r2
 8002b22:	0019      	movs	r1, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002b28:	4b19      	ldr	r3, [pc, #100]	@ (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002b2a:	430a      	orrs	r2, r1
 8002b2c:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002b32:	2380      	movs	r3, #128	@ 0x80
 8002b34:	019b      	lsls	r3, r3, #6
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d106      	bne.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002b3a:	4b15      	ldr	r3, [pc, #84]	@ (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002b3c:	68da      	ldr	r2, [r3, #12]
 8002b3e:	4b14      	ldr	r3, [pc, #80]	@ (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002b40:	2180      	movs	r1, #128	@ 0x80
 8002b42:	0449      	lsls	r1, r1, #17
 8002b44:	430a      	orrs	r2, r1
 8002b46:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	2380      	movs	r3, #128	@ 0x80
 8002b4e:	049b      	lsls	r3, r3, #18
 8002b50:	4013      	ands	r3, r2
 8002b52:	d016      	beq.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002b54:	4b0e      	ldr	r3, [pc, #56]	@ (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002b56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b58:	4a10      	ldr	r2, [pc, #64]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	0019      	movs	r1, r3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002b62:	4b0b      	ldr	r3, [pc, #44]	@ (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002b64:	430a      	orrs	r2, r1
 8002b66:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002b6c:	2380      	movs	r3, #128	@ 0x80
 8002b6e:	005b      	lsls	r3, r3, #1
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d106      	bne.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002b74:	4b06      	ldr	r3, [pc, #24]	@ (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002b76:	68da      	ldr	r2, [r3, #12]
 8002b78:	4b05      	ldr	r3, [pc, #20]	@ (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002b7a:	2180      	movs	r1, #128	@ 0x80
 8002b7c:	0449      	lsls	r1, r1, #17
 8002b7e:	430a      	orrs	r2, r1
 8002b80:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002b82:	2312      	movs	r3, #18
 8002b84:	18fb      	adds	r3, r7, r3
 8002b86:	781b      	ldrb	r3, [r3, #0]
}
 8002b88:	0018      	movs	r0, r3
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	b006      	add	sp, #24
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	40021000 	.word	0x40021000
 8002b94:	efffffff 	.word	0xefffffff
 8002b98:	fffff3ff 	.word	0xfffff3ff
 8002b9c:	fffffcff 	.word	0xfffffcff
 8002ba0:	fff3ffff 	.word	0xfff3ffff
 8002ba4:	ffcfffff 	.word	0xffcfffff
 8002ba8:	ffffcfff 	.word	0xffffcfff
 8002bac:	ffff3fff 	.word	0xffff3fff
 8002bb0:	ffbfffff 	.word	0xffbfffff
 8002bb4:	feffffff 	.word	0xfeffffff

08002bb8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b084      	sub	sp, #16
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d101      	bne.n	8002bca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e0a8      	b.n	8002d1c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d109      	bne.n	8002be6 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685a      	ldr	r2, [r3, #4]
 8002bd6:	2382      	movs	r3, #130	@ 0x82
 8002bd8:	005b      	lsls	r3, r3, #1
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d009      	beq.n	8002bf2 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2200      	movs	r2, #0
 8002be2:	61da      	str	r2, [r3, #28]
 8002be4:	e005      	b.n	8002bf2 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	225d      	movs	r2, #93	@ 0x5d
 8002bfc:	5c9b      	ldrb	r3, [r3, r2]
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d107      	bne.n	8002c14 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	225c      	movs	r2, #92	@ 0x5c
 8002c08:	2100      	movs	r1, #0
 8002c0a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	0018      	movs	r0, r3
 8002c10:	f7fe fb66 	bl	80012e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	225d      	movs	r2, #93	@ 0x5d
 8002c18:	2102      	movs	r1, #2
 8002c1a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	2140      	movs	r1, #64	@ 0x40
 8002c28:	438a      	bics	r2, r1
 8002c2a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	68da      	ldr	r2, [r3, #12]
 8002c30:	23e0      	movs	r3, #224	@ 0xe0
 8002c32:	00db      	lsls	r3, r3, #3
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d902      	bls.n	8002c3e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	60fb      	str	r3, [r7, #12]
 8002c3c:	e002      	b.n	8002c44 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002c3e:	2380      	movs	r3, #128	@ 0x80
 8002c40:	015b      	lsls	r3, r3, #5
 8002c42:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	68da      	ldr	r2, [r3, #12]
 8002c48:	23f0      	movs	r3, #240	@ 0xf0
 8002c4a:	011b      	lsls	r3, r3, #4
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d008      	beq.n	8002c62 <HAL_SPI_Init+0xaa>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	68da      	ldr	r2, [r3, #12]
 8002c54:	23e0      	movs	r3, #224	@ 0xe0
 8002c56:	00db      	lsls	r3, r3, #3
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d002      	beq.n	8002c62 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685a      	ldr	r2, [r3, #4]
 8002c66:	2382      	movs	r3, #130	@ 0x82
 8002c68:	005b      	lsls	r3, r3, #1
 8002c6a:	401a      	ands	r2, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6899      	ldr	r1, [r3, #8]
 8002c70:	2384      	movs	r3, #132	@ 0x84
 8002c72:	021b      	lsls	r3, r3, #8
 8002c74:	400b      	ands	r3, r1
 8002c76:	431a      	orrs	r2, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	691b      	ldr	r3, [r3, #16]
 8002c7c:	2102      	movs	r1, #2
 8002c7e:	400b      	ands	r3, r1
 8002c80:	431a      	orrs	r2, r3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	695b      	ldr	r3, [r3, #20]
 8002c86:	2101      	movs	r1, #1
 8002c88:	400b      	ands	r3, r1
 8002c8a:	431a      	orrs	r2, r3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6999      	ldr	r1, [r3, #24]
 8002c90:	2380      	movs	r3, #128	@ 0x80
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	400b      	ands	r3, r1
 8002c96:	431a      	orrs	r2, r3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	69db      	ldr	r3, [r3, #28]
 8002c9c:	2138      	movs	r1, #56	@ 0x38
 8002c9e:	400b      	ands	r3, r1
 8002ca0:	431a      	orrs	r2, r3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6a1b      	ldr	r3, [r3, #32]
 8002ca6:	2180      	movs	r1, #128	@ 0x80
 8002ca8:	400b      	ands	r3, r1
 8002caa:	431a      	orrs	r2, r3
 8002cac:	0011      	movs	r1, r2
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002cb2:	2380      	movs	r3, #128	@ 0x80
 8002cb4:	019b      	lsls	r3, r3, #6
 8002cb6:	401a      	ands	r2, r3
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	430a      	orrs	r2, r1
 8002cbe:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	699b      	ldr	r3, [r3, #24]
 8002cc4:	0c1b      	lsrs	r3, r3, #16
 8002cc6:	2204      	movs	r2, #4
 8002cc8:	401a      	ands	r2, r3
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cce:	2110      	movs	r1, #16
 8002cd0:	400b      	ands	r3, r1
 8002cd2:	431a      	orrs	r2, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cd8:	2108      	movs	r1, #8
 8002cda:	400b      	ands	r3, r1
 8002cdc:	431a      	orrs	r2, r3
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	68d9      	ldr	r1, [r3, #12]
 8002ce2:	23f0      	movs	r3, #240	@ 0xf0
 8002ce4:	011b      	lsls	r3, r3, #4
 8002ce6:	400b      	ands	r3, r1
 8002ce8:	431a      	orrs	r2, r3
 8002cea:	0011      	movs	r1, r2
 8002cec:	68fa      	ldr	r2, [r7, #12]
 8002cee:	2380      	movs	r3, #128	@ 0x80
 8002cf0:	015b      	lsls	r3, r3, #5
 8002cf2:	401a      	ands	r2, r3
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	430a      	orrs	r2, r1
 8002cfa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	69da      	ldr	r2, [r3, #28]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4907      	ldr	r1, [pc, #28]	@ (8002d24 <HAL_SPI_Init+0x16c>)
 8002d08:	400a      	ands	r2, r1
 8002d0a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	225d      	movs	r2, #93	@ 0x5d
 8002d16:	2101      	movs	r1, #1
 8002d18:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002d1a:	2300      	movs	r3, #0
}
 8002d1c:	0018      	movs	r0, r3
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	b004      	add	sp, #16
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	fffff7ff 	.word	0xfffff7ff

08002d28 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b088      	sub	sp, #32
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	60f8      	str	r0, [r7, #12]
 8002d30:	60b9      	str	r1, [r7, #8]
 8002d32:	603b      	str	r3, [r7, #0]
 8002d34:	1dbb      	adds	r3, r7, #6
 8002d36:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002d38:	231f      	movs	r3, #31
 8002d3a:	18fb      	adds	r3, r7, r3
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	225c      	movs	r2, #92	@ 0x5c
 8002d44:	5c9b      	ldrb	r3, [r3, r2]
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d101      	bne.n	8002d4e <HAL_SPI_Transmit+0x26>
 8002d4a:	2302      	movs	r3, #2
 8002d4c:	e147      	b.n	8002fde <HAL_SPI_Transmit+0x2b6>
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	225c      	movs	r2, #92	@ 0x5c
 8002d52:	2101      	movs	r1, #1
 8002d54:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d56:	f7fe fc09 	bl	800156c <HAL_GetTick>
 8002d5a:	0003      	movs	r3, r0
 8002d5c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002d5e:	2316      	movs	r3, #22
 8002d60:	18fb      	adds	r3, r7, r3
 8002d62:	1dba      	adds	r2, r7, #6
 8002d64:	8812      	ldrh	r2, [r2, #0]
 8002d66:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	225d      	movs	r2, #93	@ 0x5d
 8002d6c:	5c9b      	ldrb	r3, [r3, r2]
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d004      	beq.n	8002d7e <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8002d74:	231f      	movs	r3, #31
 8002d76:	18fb      	adds	r3, r7, r3
 8002d78:	2202      	movs	r2, #2
 8002d7a:	701a      	strb	r2, [r3, #0]
    goto error;
 8002d7c:	e128      	b.n	8002fd0 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d003      	beq.n	8002d8c <HAL_SPI_Transmit+0x64>
 8002d84:	1dbb      	adds	r3, r7, #6
 8002d86:	881b      	ldrh	r3, [r3, #0]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d104      	bne.n	8002d96 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8002d8c:	231f      	movs	r3, #31
 8002d8e:	18fb      	adds	r3, r7, r3
 8002d90:	2201      	movs	r2, #1
 8002d92:	701a      	strb	r2, [r3, #0]
    goto error;
 8002d94:	e11c      	b.n	8002fd0 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	225d      	movs	r2, #93	@ 0x5d
 8002d9a:	2103      	movs	r1, #3
 8002d9c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2200      	movs	r2, #0
 8002da2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	68ba      	ldr	r2, [r7, #8]
 8002da8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	1dba      	adds	r2, r7, #6
 8002dae:	8812      	ldrh	r2, [r2, #0]
 8002db0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	1dba      	adds	r2, r7, #6
 8002db6:	8812      	ldrh	r2, [r2, #0]
 8002db8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2244      	movs	r2, #68	@ 0x44
 8002dc4:	2100      	movs	r1, #0
 8002dc6:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2246      	movs	r2, #70	@ 0x46
 8002dcc:	2100      	movs	r1, #0
 8002dce:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	689a      	ldr	r2, [r3, #8]
 8002de0:	2380      	movs	r3, #128	@ 0x80
 8002de2:	021b      	lsls	r3, r3, #8
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d110      	bne.n	8002e0a <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	2140      	movs	r1, #64	@ 0x40
 8002df4:	438a      	bics	r2, r1
 8002df6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	2180      	movs	r1, #128	@ 0x80
 8002e04:	01c9      	lsls	r1, r1, #7
 8002e06:	430a      	orrs	r2, r1
 8002e08:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	2240      	movs	r2, #64	@ 0x40
 8002e12:	4013      	ands	r3, r2
 8002e14:	2b40      	cmp	r3, #64	@ 0x40
 8002e16:	d007      	beq.n	8002e28 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	2140      	movs	r1, #64	@ 0x40
 8002e24:	430a      	orrs	r2, r1
 8002e26:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	68da      	ldr	r2, [r3, #12]
 8002e2c:	23e0      	movs	r3, #224	@ 0xe0
 8002e2e:	00db      	lsls	r3, r3, #3
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d952      	bls.n	8002eda <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d004      	beq.n	8002e46 <HAL_SPI_Transmit+0x11e>
 8002e3c:	2316      	movs	r3, #22
 8002e3e:	18fb      	adds	r3, r7, r3
 8002e40:	881b      	ldrh	r3, [r3, #0]
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d143      	bne.n	8002ece <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e4a:	881a      	ldrh	r2, [r3, #0]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e56:	1c9a      	adds	r2, r3, #2
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e60:	b29b      	uxth	r3, r3
 8002e62:	3b01      	subs	r3, #1
 8002e64:	b29a      	uxth	r2, r3
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002e6a:	e030      	b.n	8002ece <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	2202      	movs	r2, #2
 8002e74:	4013      	ands	r3, r2
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d112      	bne.n	8002ea0 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e7e:	881a      	ldrh	r2, [r3, #0]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e8a:	1c9a      	adds	r2, r3, #2
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	3b01      	subs	r3, #1
 8002e98:	b29a      	uxth	r2, r3
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002e9e:	e016      	b.n	8002ece <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ea0:	f7fe fb64 	bl	800156c <HAL_GetTick>
 8002ea4:	0002      	movs	r2, r0
 8002ea6:	69bb      	ldr	r3, [r7, #24]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	683a      	ldr	r2, [r7, #0]
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d802      	bhi.n	8002eb6 <HAL_SPI_Transmit+0x18e>
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	d102      	bne.n	8002ebc <HAL_SPI_Transmit+0x194>
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d108      	bne.n	8002ece <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8002ebc:	231f      	movs	r3, #31
 8002ebe:	18fb      	adds	r3, r7, r3
 8002ec0:	2203      	movs	r2, #3
 8002ec2:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	225d      	movs	r2, #93	@ 0x5d
 8002ec8:	2101      	movs	r1, #1
 8002eca:	5499      	strb	r1, [r3, r2]
          goto error;
 8002ecc:	e080      	b.n	8002fd0 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d1c9      	bne.n	8002e6c <HAL_SPI_Transmit+0x144>
 8002ed8:	e053      	b.n	8002f82 <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d004      	beq.n	8002eec <HAL_SPI_Transmit+0x1c4>
 8002ee2:	2316      	movs	r3, #22
 8002ee4:	18fb      	adds	r3, r7, r3
 8002ee6:	881b      	ldrh	r3, [r3, #0]
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d145      	bne.n	8002f78 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	330c      	adds	r3, #12
 8002ef6:	7812      	ldrb	r2, [r2, #0]
 8002ef8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002efe:	1c5a      	adds	r2, r3, #1
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	3b01      	subs	r3, #1
 8002f0c:	b29a      	uxth	r2, r3
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8002f12:	e031      	b.n	8002f78 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	2202      	movs	r2, #2
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d113      	bne.n	8002f4a <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	330c      	adds	r3, #12
 8002f2c:	7812      	ldrb	r2, [r2, #0]
 8002f2e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f34:	1c5a      	adds	r2, r3, #1
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	3b01      	subs	r3, #1
 8002f42:	b29a      	uxth	r2, r3
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002f48:	e016      	b.n	8002f78 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f4a:	f7fe fb0f 	bl	800156c <HAL_GetTick>
 8002f4e:	0002      	movs	r2, r0
 8002f50:	69bb      	ldr	r3, [r7, #24]
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	683a      	ldr	r2, [r7, #0]
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d802      	bhi.n	8002f60 <HAL_SPI_Transmit+0x238>
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	3301      	adds	r3, #1
 8002f5e:	d102      	bne.n	8002f66 <HAL_SPI_Transmit+0x23e>
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d108      	bne.n	8002f78 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 8002f66:	231f      	movs	r3, #31
 8002f68:	18fb      	adds	r3, r7, r3
 8002f6a:	2203      	movs	r2, #3
 8002f6c:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	225d      	movs	r2, #93	@ 0x5d
 8002f72:	2101      	movs	r1, #1
 8002f74:	5499      	strb	r1, [r3, r2]
          goto error;
 8002f76:	e02b      	b.n	8002fd0 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d1c8      	bne.n	8002f14 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002f82:	69ba      	ldr	r2, [r7, #24]
 8002f84:	6839      	ldr	r1, [r7, #0]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	0018      	movs	r0, r3
 8002f8a:	f000 f95d 	bl	8003248 <SPI_EndRxTxTransaction>
 8002f8e:	1e03      	subs	r3, r0, #0
 8002f90:	d002      	beq.n	8002f98 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2220      	movs	r2, #32
 8002f96:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d10a      	bne.n	8002fb6 <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	613b      	str	r3, [r7, #16]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	68db      	ldr	r3, [r3, #12]
 8002faa:	613b      	str	r3, [r7, #16]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	613b      	str	r3, [r7, #16]
 8002fb4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d004      	beq.n	8002fc8 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8002fbe:	231f      	movs	r3, #31
 8002fc0:	18fb      	adds	r3, r7, r3
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	701a      	strb	r2, [r3, #0]
 8002fc6:	e003      	b.n	8002fd0 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	225d      	movs	r2, #93	@ 0x5d
 8002fcc:	2101      	movs	r1, #1
 8002fce:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	225c      	movs	r2, #92	@ 0x5c
 8002fd4:	2100      	movs	r1, #0
 8002fd6:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002fd8:	231f      	movs	r3, #31
 8002fda:	18fb      	adds	r3, r7, r3
 8002fdc:	781b      	ldrb	r3, [r3, #0]
}
 8002fde:	0018      	movs	r0, r3
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	b008      	add	sp, #32
 8002fe4:	bd80      	pop	{r7, pc}
	...

08002fe8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b088      	sub	sp, #32
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	60b9      	str	r1, [r7, #8]
 8002ff2:	603b      	str	r3, [r7, #0]
 8002ff4:	1dfb      	adds	r3, r7, #7
 8002ff6:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002ff8:	f7fe fab8 	bl	800156c <HAL_GetTick>
 8002ffc:	0002      	movs	r2, r0
 8002ffe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003000:	1a9b      	subs	r3, r3, r2
 8003002:	683a      	ldr	r2, [r7, #0]
 8003004:	18d3      	adds	r3, r2, r3
 8003006:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003008:	f7fe fab0 	bl	800156c <HAL_GetTick>
 800300c:	0003      	movs	r3, r0
 800300e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003010:	4b3a      	ldr	r3, [pc, #232]	@ (80030fc <SPI_WaitFlagStateUntilTimeout+0x114>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	015b      	lsls	r3, r3, #5
 8003016:	0d1b      	lsrs	r3, r3, #20
 8003018:	69fa      	ldr	r2, [r7, #28]
 800301a:	4353      	muls	r3, r2
 800301c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800301e:	e058      	b.n	80030d2 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	3301      	adds	r3, #1
 8003024:	d055      	beq.n	80030d2 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003026:	f7fe faa1 	bl	800156c <HAL_GetTick>
 800302a:	0002      	movs	r2, r0
 800302c:	69bb      	ldr	r3, [r7, #24]
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	69fa      	ldr	r2, [r7, #28]
 8003032:	429a      	cmp	r2, r3
 8003034:	d902      	bls.n	800303c <SPI_WaitFlagStateUntilTimeout+0x54>
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d142      	bne.n	80030c2 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	685a      	ldr	r2, [r3, #4]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	21e0      	movs	r1, #224	@ 0xe0
 8003048:	438a      	bics	r2, r1
 800304a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	685a      	ldr	r2, [r3, #4]
 8003050:	2382      	movs	r3, #130	@ 0x82
 8003052:	005b      	lsls	r3, r3, #1
 8003054:	429a      	cmp	r2, r3
 8003056:	d113      	bne.n	8003080 <SPI_WaitFlagStateUntilTimeout+0x98>
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	689a      	ldr	r2, [r3, #8]
 800305c:	2380      	movs	r3, #128	@ 0x80
 800305e:	021b      	lsls	r3, r3, #8
 8003060:	429a      	cmp	r2, r3
 8003062:	d005      	beq.n	8003070 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	689a      	ldr	r2, [r3, #8]
 8003068:	2380      	movs	r3, #128	@ 0x80
 800306a:	00db      	lsls	r3, r3, #3
 800306c:	429a      	cmp	r2, r3
 800306e:	d107      	bne.n	8003080 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	2140      	movs	r1, #64	@ 0x40
 800307c:	438a      	bics	r2, r1
 800307e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003084:	2380      	movs	r3, #128	@ 0x80
 8003086:	019b      	lsls	r3, r3, #6
 8003088:	429a      	cmp	r2, r3
 800308a:	d110      	bne.n	80030ae <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	491a      	ldr	r1, [pc, #104]	@ (8003100 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8003098:	400a      	ands	r2, r1
 800309a:	601a      	str	r2, [r3, #0]
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	2180      	movs	r1, #128	@ 0x80
 80030a8:	0189      	lsls	r1, r1, #6
 80030aa:	430a      	orrs	r2, r1
 80030ac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	225d      	movs	r2, #93	@ 0x5d
 80030b2:	2101      	movs	r1, #1
 80030b4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	225c      	movs	r2, #92	@ 0x5c
 80030ba:	2100      	movs	r1, #0
 80030bc:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e017      	b.n	80030f2 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d101      	bne.n	80030cc <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80030c8:	2300      	movs	r3, #0
 80030ca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	3b01      	subs	r3, #1
 80030d0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	68ba      	ldr	r2, [r7, #8]
 80030da:	4013      	ands	r3, r2
 80030dc:	68ba      	ldr	r2, [r7, #8]
 80030de:	1ad3      	subs	r3, r2, r3
 80030e0:	425a      	negs	r2, r3
 80030e2:	4153      	adcs	r3, r2
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	001a      	movs	r2, r3
 80030e8:	1dfb      	adds	r3, r7, #7
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d197      	bne.n	8003020 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80030f0:	2300      	movs	r3, #0
}
 80030f2:	0018      	movs	r0, r3
 80030f4:	46bd      	mov	sp, r7
 80030f6:	b008      	add	sp, #32
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	46c0      	nop			@ (mov r8, r8)
 80030fc:	20000000 	.word	0x20000000
 8003100:	ffffdfff 	.word	0xffffdfff

08003104 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b08a      	sub	sp, #40	@ 0x28
 8003108:	af00      	add	r7, sp, #0
 800310a:	60f8      	str	r0, [r7, #12]
 800310c:	60b9      	str	r1, [r7, #8]
 800310e:	607a      	str	r2, [r7, #4]
 8003110:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003112:	2317      	movs	r3, #23
 8003114:	18fb      	adds	r3, r7, r3
 8003116:	2200      	movs	r2, #0
 8003118:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800311a:	f7fe fa27 	bl	800156c <HAL_GetTick>
 800311e:	0002      	movs	r2, r0
 8003120:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003122:	1a9b      	subs	r3, r3, r2
 8003124:	683a      	ldr	r2, [r7, #0]
 8003126:	18d3      	adds	r3, r2, r3
 8003128:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800312a:	f7fe fa1f 	bl	800156c <HAL_GetTick>
 800312e:	0003      	movs	r3, r0
 8003130:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	330c      	adds	r3, #12
 8003138:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800313a:	4b41      	ldr	r3, [pc, #260]	@ (8003240 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	0013      	movs	r3, r2
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	189b      	adds	r3, r3, r2
 8003144:	00da      	lsls	r2, r3, #3
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	0d1b      	lsrs	r3, r3, #20
 800314a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800314c:	4353      	muls	r3, r2
 800314e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003150:	e068      	b.n	8003224 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003152:	68ba      	ldr	r2, [r7, #8]
 8003154:	23c0      	movs	r3, #192	@ 0xc0
 8003156:	00db      	lsls	r3, r3, #3
 8003158:	429a      	cmp	r2, r3
 800315a:	d10a      	bne.n	8003172 <SPI_WaitFifoStateUntilTimeout+0x6e>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d107      	bne.n	8003172 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	b2da      	uxtb	r2, r3
 8003168:	2117      	movs	r1, #23
 800316a:	187b      	adds	r3, r7, r1
 800316c:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800316e:	187b      	adds	r3, r7, r1
 8003170:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	3301      	adds	r3, #1
 8003176:	d055      	beq.n	8003224 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003178:	f7fe f9f8 	bl	800156c <HAL_GetTick>
 800317c:	0002      	movs	r2, r0
 800317e:	6a3b      	ldr	r3, [r7, #32]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003184:	429a      	cmp	r2, r3
 8003186:	d902      	bls.n	800318e <SPI_WaitFifoStateUntilTimeout+0x8a>
 8003188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800318a:	2b00      	cmp	r3, #0
 800318c:	d142      	bne.n	8003214 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	685a      	ldr	r2, [r3, #4]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	21e0      	movs	r1, #224	@ 0xe0
 800319a:	438a      	bics	r2, r1
 800319c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	685a      	ldr	r2, [r3, #4]
 80031a2:	2382      	movs	r3, #130	@ 0x82
 80031a4:	005b      	lsls	r3, r3, #1
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d113      	bne.n	80031d2 <SPI_WaitFifoStateUntilTimeout+0xce>
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	689a      	ldr	r2, [r3, #8]
 80031ae:	2380      	movs	r3, #128	@ 0x80
 80031b0:	021b      	lsls	r3, r3, #8
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d005      	beq.n	80031c2 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	689a      	ldr	r2, [r3, #8]
 80031ba:	2380      	movs	r3, #128	@ 0x80
 80031bc:	00db      	lsls	r3, r3, #3
 80031be:	429a      	cmp	r2, r3
 80031c0:	d107      	bne.n	80031d2 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	2140      	movs	r1, #64	@ 0x40
 80031ce:	438a      	bics	r2, r1
 80031d0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80031d6:	2380      	movs	r3, #128	@ 0x80
 80031d8:	019b      	lsls	r3, r3, #6
 80031da:	429a      	cmp	r2, r3
 80031dc:	d110      	bne.n	8003200 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4916      	ldr	r1, [pc, #88]	@ (8003244 <SPI_WaitFifoStateUntilTimeout+0x140>)
 80031ea:	400a      	ands	r2, r1
 80031ec:	601a      	str	r2, [r3, #0]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	2180      	movs	r1, #128	@ 0x80
 80031fa:	0189      	lsls	r1, r1, #6
 80031fc:	430a      	orrs	r2, r1
 80031fe:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	225d      	movs	r2, #93	@ 0x5d
 8003204:	2101      	movs	r1, #1
 8003206:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	225c      	movs	r2, #92	@ 0x5c
 800320c:	2100      	movs	r1, #0
 800320e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003210:	2303      	movs	r3, #3
 8003212:	e010      	b.n	8003236 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003214:	69bb      	ldr	r3, [r7, #24]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d101      	bne.n	800321e <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800321a:	2300      	movs	r3, #0
 800321c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800321e:	69bb      	ldr	r3, [r7, #24]
 8003220:	3b01      	subs	r3, #1
 8003222:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	68ba      	ldr	r2, [r7, #8]
 800322c:	4013      	ands	r3, r2
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	429a      	cmp	r2, r3
 8003232:	d18e      	bne.n	8003152 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8003234:	2300      	movs	r3, #0
}
 8003236:	0018      	movs	r0, r3
 8003238:	46bd      	mov	sp, r7
 800323a:	b00a      	add	sp, #40	@ 0x28
 800323c:	bd80      	pop	{r7, pc}
 800323e:	46c0      	nop			@ (mov r8, r8)
 8003240:	20000000 	.word	0x20000000
 8003244:	ffffdfff 	.word	0xffffdfff

08003248 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b086      	sub	sp, #24
 800324c:	af02      	add	r7, sp, #8
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	60b9      	str	r1, [r7, #8]
 8003252:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003254:	68ba      	ldr	r2, [r7, #8]
 8003256:	23c0      	movs	r3, #192	@ 0xc0
 8003258:	0159      	lsls	r1, r3, #5
 800325a:	68f8      	ldr	r0, [r7, #12]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	9300      	str	r3, [sp, #0]
 8003260:	0013      	movs	r3, r2
 8003262:	2200      	movs	r2, #0
 8003264:	f7ff ff4e 	bl	8003104 <SPI_WaitFifoStateUntilTimeout>
 8003268:	1e03      	subs	r3, r0, #0
 800326a:	d007      	beq.n	800327c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003270:	2220      	movs	r2, #32
 8003272:	431a      	orrs	r2, r3
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003278:	2303      	movs	r3, #3
 800327a:	e027      	b.n	80032cc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800327c:	68ba      	ldr	r2, [r7, #8]
 800327e:	68f8      	ldr	r0, [r7, #12]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	9300      	str	r3, [sp, #0]
 8003284:	0013      	movs	r3, r2
 8003286:	2200      	movs	r2, #0
 8003288:	2180      	movs	r1, #128	@ 0x80
 800328a:	f7ff fead 	bl	8002fe8 <SPI_WaitFlagStateUntilTimeout>
 800328e:	1e03      	subs	r3, r0, #0
 8003290:	d007      	beq.n	80032a2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003296:	2220      	movs	r2, #32
 8003298:	431a      	orrs	r2, r3
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e014      	b.n	80032cc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80032a2:	68ba      	ldr	r2, [r7, #8]
 80032a4:	23c0      	movs	r3, #192	@ 0xc0
 80032a6:	00d9      	lsls	r1, r3, #3
 80032a8:	68f8      	ldr	r0, [r7, #12]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	9300      	str	r3, [sp, #0]
 80032ae:	0013      	movs	r3, r2
 80032b0:	2200      	movs	r2, #0
 80032b2:	f7ff ff27 	bl	8003104 <SPI_WaitFifoStateUntilTimeout>
 80032b6:	1e03      	subs	r3, r0, #0
 80032b8:	d007      	beq.n	80032ca <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032be:	2220      	movs	r2, #32
 80032c0:	431a      	orrs	r2, r3
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80032c6:	2303      	movs	r3, #3
 80032c8:	e000      	b.n	80032cc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80032ca:	2300      	movs	r3, #0
}
 80032cc:	0018      	movs	r0, r3
 80032ce:	46bd      	mov	sp, r7
 80032d0:	b004      	add	sp, #16
 80032d2:	bd80      	pop	{r7, pc}

080032d4 <siprintf>:
 80032d4:	b40e      	push	{r1, r2, r3}
 80032d6:	b500      	push	{lr}
 80032d8:	490b      	ldr	r1, [pc, #44]	@ (8003308 <siprintf+0x34>)
 80032da:	b09c      	sub	sp, #112	@ 0x70
 80032dc:	ab1d      	add	r3, sp, #116	@ 0x74
 80032de:	9002      	str	r0, [sp, #8]
 80032e0:	9006      	str	r0, [sp, #24]
 80032e2:	9107      	str	r1, [sp, #28]
 80032e4:	9104      	str	r1, [sp, #16]
 80032e6:	4809      	ldr	r0, [pc, #36]	@ (800330c <siprintf+0x38>)
 80032e8:	4909      	ldr	r1, [pc, #36]	@ (8003310 <siprintf+0x3c>)
 80032ea:	cb04      	ldmia	r3!, {r2}
 80032ec:	9105      	str	r1, [sp, #20]
 80032ee:	6800      	ldr	r0, [r0, #0]
 80032f0:	a902      	add	r1, sp, #8
 80032f2:	9301      	str	r3, [sp, #4]
 80032f4:	f000 f9a8 	bl	8003648 <_svfiprintf_r>
 80032f8:	2200      	movs	r2, #0
 80032fa:	9b02      	ldr	r3, [sp, #8]
 80032fc:	701a      	strb	r2, [r3, #0]
 80032fe:	b01c      	add	sp, #112	@ 0x70
 8003300:	bc08      	pop	{r3}
 8003302:	b003      	add	sp, #12
 8003304:	4718      	bx	r3
 8003306:	46c0      	nop			@ (mov r8, r8)
 8003308:	7fffffff 	.word	0x7fffffff
 800330c:	2000000c 	.word	0x2000000c
 8003310:	ffff0208 	.word	0xffff0208

08003314 <memset>:
 8003314:	0003      	movs	r3, r0
 8003316:	1882      	adds	r2, r0, r2
 8003318:	4293      	cmp	r3, r2
 800331a:	d100      	bne.n	800331e <memset+0xa>
 800331c:	4770      	bx	lr
 800331e:	7019      	strb	r1, [r3, #0]
 8003320:	3301      	adds	r3, #1
 8003322:	e7f9      	b.n	8003318 <memset+0x4>

08003324 <__errno>:
 8003324:	4b01      	ldr	r3, [pc, #4]	@ (800332c <__errno+0x8>)
 8003326:	6818      	ldr	r0, [r3, #0]
 8003328:	4770      	bx	lr
 800332a:	46c0      	nop			@ (mov r8, r8)
 800332c:	2000000c 	.word	0x2000000c

08003330 <__libc_init_array>:
 8003330:	b570      	push	{r4, r5, r6, lr}
 8003332:	2600      	movs	r6, #0
 8003334:	4c0c      	ldr	r4, [pc, #48]	@ (8003368 <__libc_init_array+0x38>)
 8003336:	4d0d      	ldr	r5, [pc, #52]	@ (800336c <__libc_init_array+0x3c>)
 8003338:	1b64      	subs	r4, r4, r5
 800333a:	10a4      	asrs	r4, r4, #2
 800333c:	42a6      	cmp	r6, r4
 800333e:	d109      	bne.n	8003354 <__libc_init_array+0x24>
 8003340:	2600      	movs	r6, #0
 8003342:	f000 fc65 	bl	8003c10 <_init>
 8003346:	4c0a      	ldr	r4, [pc, #40]	@ (8003370 <__libc_init_array+0x40>)
 8003348:	4d0a      	ldr	r5, [pc, #40]	@ (8003374 <__libc_init_array+0x44>)
 800334a:	1b64      	subs	r4, r4, r5
 800334c:	10a4      	asrs	r4, r4, #2
 800334e:	42a6      	cmp	r6, r4
 8003350:	d105      	bne.n	800335e <__libc_init_array+0x2e>
 8003352:	bd70      	pop	{r4, r5, r6, pc}
 8003354:	00b3      	lsls	r3, r6, #2
 8003356:	58eb      	ldr	r3, [r5, r3]
 8003358:	4798      	blx	r3
 800335a:	3601      	adds	r6, #1
 800335c:	e7ee      	b.n	800333c <__libc_init_array+0xc>
 800335e:	00b3      	lsls	r3, r6, #2
 8003360:	58eb      	ldr	r3, [r5, r3]
 8003362:	4798      	blx	r3
 8003364:	3601      	adds	r6, #1
 8003366:	e7f2      	b.n	800334e <__libc_init_array+0x1e>
 8003368:	0800422c 	.word	0x0800422c
 800336c:	0800422c 	.word	0x0800422c
 8003370:	08004230 	.word	0x08004230
 8003374:	0800422c 	.word	0x0800422c

08003378 <__retarget_lock_acquire_recursive>:
 8003378:	4770      	bx	lr

0800337a <__retarget_lock_release_recursive>:
 800337a:	4770      	bx	lr

0800337c <memcpy>:
 800337c:	2300      	movs	r3, #0
 800337e:	b510      	push	{r4, lr}
 8003380:	429a      	cmp	r2, r3
 8003382:	d100      	bne.n	8003386 <memcpy+0xa>
 8003384:	bd10      	pop	{r4, pc}
 8003386:	5ccc      	ldrb	r4, [r1, r3]
 8003388:	54c4      	strb	r4, [r0, r3]
 800338a:	3301      	adds	r3, #1
 800338c:	e7f8      	b.n	8003380 <memcpy+0x4>
	...

08003390 <_free_r>:
 8003390:	b570      	push	{r4, r5, r6, lr}
 8003392:	0005      	movs	r5, r0
 8003394:	1e0c      	subs	r4, r1, #0
 8003396:	d010      	beq.n	80033ba <_free_r+0x2a>
 8003398:	3c04      	subs	r4, #4
 800339a:	6823      	ldr	r3, [r4, #0]
 800339c:	2b00      	cmp	r3, #0
 800339e:	da00      	bge.n	80033a2 <_free_r+0x12>
 80033a0:	18e4      	adds	r4, r4, r3
 80033a2:	0028      	movs	r0, r5
 80033a4:	f000 f8e0 	bl	8003568 <__malloc_lock>
 80033a8:	4a1d      	ldr	r2, [pc, #116]	@ (8003420 <_free_r+0x90>)
 80033aa:	6813      	ldr	r3, [r2, #0]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d105      	bne.n	80033bc <_free_r+0x2c>
 80033b0:	6063      	str	r3, [r4, #4]
 80033b2:	6014      	str	r4, [r2, #0]
 80033b4:	0028      	movs	r0, r5
 80033b6:	f000 f8df 	bl	8003578 <__malloc_unlock>
 80033ba:	bd70      	pop	{r4, r5, r6, pc}
 80033bc:	42a3      	cmp	r3, r4
 80033be:	d908      	bls.n	80033d2 <_free_r+0x42>
 80033c0:	6820      	ldr	r0, [r4, #0]
 80033c2:	1821      	adds	r1, r4, r0
 80033c4:	428b      	cmp	r3, r1
 80033c6:	d1f3      	bne.n	80033b0 <_free_r+0x20>
 80033c8:	6819      	ldr	r1, [r3, #0]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	1809      	adds	r1, r1, r0
 80033ce:	6021      	str	r1, [r4, #0]
 80033d0:	e7ee      	b.n	80033b0 <_free_r+0x20>
 80033d2:	001a      	movs	r2, r3
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d001      	beq.n	80033de <_free_r+0x4e>
 80033da:	42a3      	cmp	r3, r4
 80033dc:	d9f9      	bls.n	80033d2 <_free_r+0x42>
 80033de:	6811      	ldr	r1, [r2, #0]
 80033e0:	1850      	adds	r0, r2, r1
 80033e2:	42a0      	cmp	r0, r4
 80033e4:	d10b      	bne.n	80033fe <_free_r+0x6e>
 80033e6:	6820      	ldr	r0, [r4, #0]
 80033e8:	1809      	adds	r1, r1, r0
 80033ea:	1850      	adds	r0, r2, r1
 80033ec:	6011      	str	r1, [r2, #0]
 80033ee:	4283      	cmp	r3, r0
 80033f0:	d1e0      	bne.n	80033b4 <_free_r+0x24>
 80033f2:	6818      	ldr	r0, [r3, #0]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	1841      	adds	r1, r0, r1
 80033f8:	6011      	str	r1, [r2, #0]
 80033fa:	6053      	str	r3, [r2, #4]
 80033fc:	e7da      	b.n	80033b4 <_free_r+0x24>
 80033fe:	42a0      	cmp	r0, r4
 8003400:	d902      	bls.n	8003408 <_free_r+0x78>
 8003402:	230c      	movs	r3, #12
 8003404:	602b      	str	r3, [r5, #0]
 8003406:	e7d5      	b.n	80033b4 <_free_r+0x24>
 8003408:	6820      	ldr	r0, [r4, #0]
 800340a:	1821      	adds	r1, r4, r0
 800340c:	428b      	cmp	r3, r1
 800340e:	d103      	bne.n	8003418 <_free_r+0x88>
 8003410:	6819      	ldr	r1, [r3, #0]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	1809      	adds	r1, r1, r0
 8003416:	6021      	str	r1, [r4, #0]
 8003418:	6063      	str	r3, [r4, #4]
 800341a:	6054      	str	r4, [r2, #4]
 800341c:	e7ca      	b.n	80033b4 <_free_r+0x24>
 800341e:	46c0      	nop			@ (mov r8, r8)
 8003420:	200002f0 	.word	0x200002f0

08003424 <sbrk_aligned>:
 8003424:	b570      	push	{r4, r5, r6, lr}
 8003426:	4e0f      	ldr	r6, [pc, #60]	@ (8003464 <sbrk_aligned+0x40>)
 8003428:	000d      	movs	r5, r1
 800342a:	6831      	ldr	r1, [r6, #0]
 800342c:	0004      	movs	r4, r0
 800342e:	2900      	cmp	r1, #0
 8003430:	d102      	bne.n	8003438 <sbrk_aligned+0x14>
 8003432:	f000 fb99 	bl	8003b68 <_sbrk_r>
 8003436:	6030      	str	r0, [r6, #0]
 8003438:	0029      	movs	r1, r5
 800343a:	0020      	movs	r0, r4
 800343c:	f000 fb94 	bl	8003b68 <_sbrk_r>
 8003440:	1c43      	adds	r3, r0, #1
 8003442:	d103      	bne.n	800344c <sbrk_aligned+0x28>
 8003444:	2501      	movs	r5, #1
 8003446:	426d      	negs	r5, r5
 8003448:	0028      	movs	r0, r5
 800344a:	bd70      	pop	{r4, r5, r6, pc}
 800344c:	2303      	movs	r3, #3
 800344e:	1cc5      	adds	r5, r0, #3
 8003450:	439d      	bics	r5, r3
 8003452:	42a8      	cmp	r0, r5
 8003454:	d0f8      	beq.n	8003448 <sbrk_aligned+0x24>
 8003456:	1a29      	subs	r1, r5, r0
 8003458:	0020      	movs	r0, r4
 800345a:	f000 fb85 	bl	8003b68 <_sbrk_r>
 800345e:	3001      	adds	r0, #1
 8003460:	d1f2      	bne.n	8003448 <sbrk_aligned+0x24>
 8003462:	e7ef      	b.n	8003444 <sbrk_aligned+0x20>
 8003464:	200002ec 	.word	0x200002ec

08003468 <_malloc_r>:
 8003468:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800346a:	2203      	movs	r2, #3
 800346c:	1ccb      	adds	r3, r1, #3
 800346e:	4393      	bics	r3, r2
 8003470:	3308      	adds	r3, #8
 8003472:	0005      	movs	r5, r0
 8003474:	001f      	movs	r7, r3
 8003476:	2b0c      	cmp	r3, #12
 8003478:	d234      	bcs.n	80034e4 <_malloc_r+0x7c>
 800347a:	270c      	movs	r7, #12
 800347c:	42b9      	cmp	r1, r7
 800347e:	d833      	bhi.n	80034e8 <_malloc_r+0x80>
 8003480:	0028      	movs	r0, r5
 8003482:	f000 f871 	bl	8003568 <__malloc_lock>
 8003486:	4e37      	ldr	r6, [pc, #220]	@ (8003564 <_malloc_r+0xfc>)
 8003488:	6833      	ldr	r3, [r6, #0]
 800348a:	001c      	movs	r4, r3
 800348c:	2c00      	cmp	r4, #0
 800348e:	d12f      	bne.n	80034f0 <_malloc_r+0x88>
 8003490:	0039      	movs	r1, r7
 8003492:	0028      	movs	r0, r5
 8003494:	f7ff ffc6 	bl	8003424 <sbrk_aligned>
 8003498:	0004      	movs	r4, r0
 800349a:	1c43      	adds	r3, r0, #1
 800349c:	d15f      	bne.n	800355e <_malloc_r+0xf6>
 800349e:	6834      	ldr	r4, [r6, #0]
 80034a0:	9400      	str	r4, [sp, #0]
 80034a2:	9b00      	ldr	r3, [sp, #0]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d14a      	bne.n	800353e <_malloc_r+0xd6>
 80034a8:	2c00      	cmp	r4, #0
 80034aa:	d052      	beq.n	8003552 <_malloc_r+0xea>
 80034ac:	6823      	ldr	r3, [r4, #0]
 80034ae:	0028      	movs	r0, r5
 80034b0:	18e3      	adds	r3, r4, r3
 80034b2:	9900      	ldr	r1, [sp, #0]
 80034b4:	9301      	str	r3, [sp, #4]
 80034b6:	f000 fb57 	bl	8003b68 <_sbrk_r>
 80034ba:	9b01      	ldr	r3, [sp, #4]
 80034bc:	4283      	cmp	r3, r0
 80034be:	d148      	bne.n	8003552 <_malloc_r+0xea>
 80034c0:	6823      	ldr	r3, [r4, #0]
 80034c2:	0028      	movs	r0, r5
 80034c4:	1aff      	subs	r7, r7, r3
 80034c6:	0039      	movs	r1, r7
 80034c8:	f7ff ffac 	bl	8003424 <sbrk_aligned>
 80034cc:	3001      	adds	r0, #1
 80034ce:	d040      	beq.n	8003552 <_malloc_r+0xea>
 80034d0:	6823      	ldr	r3, [r4, #0]
 80034d2:	19db      	adds	r3, r3, r7
 80034d4:	6023      	str	r3, [r4, #0]
 80034d6:	6833      	ldr	r3, [r6, #0]
 80034d8:	685a      	ldr	r2, [r3, #4]
 80034da:	2a00      	cmp	r2, #0
 80034dc:	d133      	bne.n	8003546 <_malloc_r+0xde>
 80034de:	9b00      	ldr	r3, [sp, #0]
 80034e0:	6033      	str	r3, [r6, #0]
 80034e2:	e019      	b.n	8003518 <_malloc_r+0xb0>
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	dac9      	bge.n	800347c <_malloc_r+0x14>
 80034e8:	230c      	movs	r3, #12
 80034ea:	602b      	str	r3, [r5, #0]
 80034ec:	2000      	movs	r0, #0
 80034ee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80034f0:	6821      	ldr	r1, [r4, #0]
 80034f2:	1bc9      	subs	r1, r1, r7
 80034f4:	d420      	bmi.n	8003538 <_malloc_r+0xd0>
 80034f6:	290b      	cmp	r1, #11
 80034f8:	d90a      	bls.n	8003510 <_malloc_r+0xa8>
 80034fa:	19e2      	adds	r2, r4, r7
 80034fc:	6027      	str	r7, [r4, #0]
 80034fe:	42a3      	cmp	r3, r4
 8003500:	d104      	bne.n	800350c <_malloc_r+0xa4>
 8003502:	6032      	str	r2, [r6, #0]
 8003504:	6863      	ldr	r3, [r4, #4]
 8003506:	6011      	str	r1, [r2, #0]
 8003508:	6053      	str	r3, [r2, #4]
 800350a:	e005      	b.n	8003518 <_malloc_r+0xb0>
 800350c:	605a      	str	r2, [r3, #4]
 800350e:	e7f9      	b.n	8003504 <_malloc_r+0x9c>
 8003510:	6862      	ldr	r2, [r4, #4]
 8003512:	42a3      	cmp	r3, r4
 8003514:	d10e      	bne.n	8003534 <_malloc_r+0xcc>
 8003516:	6032      	str	r2, [r6, #0]
 8003518:	0028      	movs	r0, r5
 800351a:	f000 f82d 	bl	8003578 <__malloc_unlock>
 800351e:	0020      	movs	r0, r4
 8003520:	2207      	movs	r2, #7
 8003522:	300b      	adds	r0, #11
 8003524:	1d23      	adds	r3, r4, #4
 8003526:	4390      	bics	r0, r2
 8003528:	1ac2      	subs	r2, r0, r3
 800352a:	4298      	cmp	r0, r3
 800352c:	d0df      	beq.n	80034ee <_malloc_r+0x86>
 800352e:	1a1b      	subs	r3, r3, r0
 8003530:	50a3      	str	r3, [r4, r2]
 8003532:	e7dc      	b.n	80034ee <_malloc_r+0x86>
 8003534:	605a      	str	r2, [r3, #4]
 8003536:	e7ef      	b.n	8003518 <_malloc_r+0xb0>
 8003538:	0023      	movs	r3, r4
 800353a:	6864      	ldr	r4, [r4, #4]
 800353c:	e7a6      	b.n	800348c <_malloc_r+0x24>
 800353e:	9c00      	ldr	r4, [sp, #0]
 8003540:	6863      	ldr	r3, [r4, #4]
 8003542:	9300      	str	r3, [sp, #0]
 8003544:	e7ad      	b.n	80034a2 <_malloc_r+0x3a>
 8003546:	001a      	movs	r2, r3
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	42a3      	cmp	r3, r4
 800354c:	d1fb      	bne.n	8003546 <_malloc_r+0xde>
 800354e:	2300      	movs	r3, #0
 8003550:	e7da      	b.n	8003508 <_malloc_r+0xa0>
 8003552:	230c      	movs	r3, #12
 8003554:	0028      	movs	r0, r5
 8003556:	602b      	str	r3, [r5, #0]
 8003558:	f000 f80e 	bl	8003578 <__malloc_unlock>
 800355c:	e7c6      	b.n	80034ec <_malloc_r+0x84>
 800355e:	6007      	str	r7, [r0, #0]
 8003560:	e7da      	b.n	8003518 <_malloc_r+0xb0>
 8003562:	46c0      	nop			@ (mov r8, r8)
 8003564:	200002f0 	.word	0x200002f0

08003568 <__malloc_lock>:
 8003568:	b510      	push	{r4, lr}
 800356a:	4802      	ldr	r0, [pc, #8]	@ (8003574 <__malloc_lock+0xc>)
 800356c:	f7ff ff04 	bl	8003378 <__retarget_lock_acquire_recursive>
 8003570:	bd10      	pop	{r4, pc}
 8003572:	46c0      	nop			@ (mov r8, r8)
 8003574:	200002e8 	.word	0x200002e8

08003578 <__malloc_unlock>:
 8003578:	b510      	push	{r4, lr}
 800357a:	4802      	ldr	r0, [pc, #8]	@ (8003584 <__malloc_unlock+0xc>)
 800357c:	f7ff fefd 	bl	800337a <__retarget_lock_release_recursive>
 8003580:	bd10      	pop	{r4, pc}
 8003582:	46c0      	nop			@ (mov r8, r8)
 8003584:	200002e8 	.word	0x200002e8

08003588 <__ssputs_r>:
 8003588:	b5f0      	push	{r4, r5, r6, r7, lr}
 800358a:	688e      	ldr	r6, [r1, #8]
 800358c:	b085      	sub	sp, #20
 800358e:	001f      	movs	r7, r3
 8003590:	000c      	movs	r4, r1
 8003592:	680b      	ldr	r3, [r1, #0]
 8003594:	9002      	str	r0, [sp, #8]
 8003596:	9203      	str	r2, [sp, #12]
 8003598:	42be      	cmp	r6, r7
 800359a:	d830      	bhi.n	80035fe <__ssputs_r+0x76>
 800359c:	210c      	movs	r1, #12
 800359e:	5e62      	ldrsh	r2, [r4, r1]
 80035a0:	2190      	movs	r1, #144	@ 0x90
 80035a2:	00c9      	lsls	r1, r1, #3
 80035a4:	420a      	tst	r2, r1
 80035a6:	d028      	beq.n	80035fa <__ssputs_r+0x72>
 80035a8:	2003      	movs	r0, #3
 80035aa:	6921      	ldr	r1, [r4, #16]
 80035ac:	1a5b      	subs	r3, r3, r1
 80035ae:	9301      	str	r3, [sp, #4]
 80035b0:	6963      	ldr	r3, [r4, #20]
 80035b2:	4343      	muls	r3, r0
 80035b4:	9801      	ldr	r0, [sp, #4]
 80035b6:	0fdd      	lsrs	r5, r3, #31
 80035b8:	18ed      	adds	r5, r5, r3
 80035ba:	1c7b      	adds	r3, r7, #1
 80035bc:	181b      	adds	r3, r3, r0
 80035be:	106d      	asrs	r5, r5, #1
 80035c0:	42ab      	cmp	r3, r5
 80035c2:	d900      	bls.n	80035c6 <__ssputs_r+0x3e>
 80035c4:	001d      	movs	r5, r3
 80035c6:	0552      	lsls	r2, r2, #21
 80035c8:	d528      	bpl.n	800361c <__ssputs_r+0x94>
 80035ca:	0029      	movs	r1, r5
 80035cc:	9802      	ldr	r0, [sp, #8]
 80035ce:	f7ff ff4b 	bl	8003468 <_malloc_r>
 80035d2:	1e06      	subs	r6, r0, #0
 80035d4:	d02c      	beq.n	8003630 <__ssputs_r+0xa8>
 80035d6:	9a01      	ldr	r2, [sp, #4]
 80035d8:	6921      	ldr	r1, [r4, #16]
 80035da:	f7ff fecf 	bl	800337c <memcpy>
 80035de:	89a2      	ldrh	r2, [r4, #12]
 80035e0:	4b18      	ldr	r3, [pc, #96]	@ (8003644 <__ssputs_r+0xbc>)
 80035e2:	401a      	ands	r2, r3
 80035e4:	2380      	movs	r3, #128	@ 0x80
 80035e6:	4313      	orrs	r3, r2
 80035e8:	81a3      	strh	r3, [r4, #12]
 80035ea:	9b01      	ldr	r3, [sp, #4]
 80035ec:	6126      	str	r6, [r4, #16]
 80035ee:	18f6      	adds	r6, r6, r3
 80035f0:	6026      	str	r6, [r4, #0]
 80035f2:	003e      	movs	r6, r7
 80035f4:	6165      	str	r5, [r4, #20]
 80035f6:	1aed      	subs	r5, r5, r3
 80035f8:	60a5      	str	r5, [r4, #8]
 80035fa:	42be      	cmp	r6, r7
 80035fc:	d900      	bls.n	8003600 <__ssputs_r+0x78>
 80035fe:	003e      	movs	r6, r7
 8003600:	0032      	movs	r2, r6
 8003602:	9903      	ldr	r1, [sp, #12]
 8003604:	6820      	ldr	r0, [r4, #0]
 8003606:	f000 fa9b 	bl	8003b40 <memmove>
 800360a:	2000      	movs	r0, #0
 800360c:	68a3      	ldr	r3, [r4, #8]
 800360e:	1b9b      	subs	r3, r3, r6
 8003610:	60a3      	str	r3, [r4, #8]
 8003612:	6823      	ldr	r3, [r4, #0]
 8003614:	199b      	adds	r3, r3, r6
 8003616:	6023      	str	r3, [r4, #0]
 8003618:	b005      	add	sp, #20
 800361a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800361c:	002a      	movs	r2, r5
 800361e:	9802      	ldr	r0, [sp, #8]
 8003620:	f000 fabf 	bl	8003ba2 <_realloc_r>
 8003624:	1e06      	subs	r6, r0, #0
 8003626:	d1e0      	bne.n	80035ea <__ssputs_r+0x62>
 8003628:	6921      	ldr	r1, [r4, #16]
 800362a:	9802      	ldr	r0, [sp, #8]
 800362c:	f7ff feb0 	bl	8003390 <_free_r>
 8003630:	230c      	movs	r3, #12
 8003632:	2001      	movs	r0, #1
 8003634:	9a02      	ldr	r2, [sp, #8]
 8003636:	4240      	negs	r0, r0
 8003638:	6013      	str	r3, [r2, #0]
 800363a:	89a2      	ldrh	r2, [r4, #12]
 800363c:	3334      	adds	r3, #52	@ 0x34
 800363e:	4313      	orrs	r3, r2
 8003640:	81a3      	strh	r3, [r4, #12]
 8003642:	e7e9      	b.n	8003618 <__ssputs_r+0x90>
 8003644:	fffffb7f 	.word	0xfffffb7f

08003648 <_svfiprintf_r>:
 8003648:	b5f0      	push	{r4, r5, r6, r7, lr}
 800364a:	b0a1      	sub	sp, #132	@ 0x84
 800364c:	9003      	str	r0, [sp, #12]
 800364e:	001d      	movs	r5, r3
 8003650:	898b      	ldrh	r3, [r1, #12]
 8003652:	000f      	movs	r7, r1
 8003654:	0016      	movs	r6, r2
 8003656:	061b      	lsls	r3, r3, #24
 8003658:	d511      	bpl.n	800367e <_svfiprintf_r+0x36>
 800365a:	690b      	ldr	r3, [r1, #16]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d10e      	bne.n	800367e <_svfiprintf_r+0x36>
 8003660:	2140      	movs	r1, #64	@ 0x40
 8003662:	f7ff ff01 	bl	8003468 <_malloc_r>
 8003666:	6038      	str	r0, [r7, #0]
 8003668:	6138      	str	r0, [r7, #16]
 800366a:	2800      	cmp	r0, #0
 800366c:	d105      	bne.n	800367a <_svfiprintf_r+0x32>
 800366e:	230c      	movs	r3, #12
 8003670:	9a03      	ldr	r2, [sp, #12]
 8003672:	6013      	str	r3, [r2, #0]
 8003674:	2001      	movs	r0, #1
 8003676:	4240      	negs	r0, r0
 8003678:	e0cf      	b.n	800381a <_svfiprintf_r+0x1d2>
 800367a:	2340      	movs	r3, #64	@ 0x40
 800367c:	617b      	str	r3, [r7, #20]
 800367e:	2300      	movs	r3, #0
 8003680:	ac08      	add	r4, sp, #32
 8003682:	6163      	str	r3, [r4, #20]
 8003684:	3320      	adds	r3, #32
 8003686:	7663      	strb	r3, [r4, #25]
 8003688:	3310      	adds	r3, #16
 800368a:	76a3      	strb	r3, [r4, #26]
 800368c:	9507      	str	r5, [sp, #28]
 800368e:	0035      	movs	r5, r6
 8003690:	782b      	ldrb	r3, [r5, #0]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d001      	beq.n	800369a <_svfiprintf_r+0x52>
 8003696:	2b25      	cmp	r3, #37	@ 0x25
 8003698:	d148      	bne.n	800372c <_svfiprintf_r+0xe4>
 800369a:	1bab      	subs	r3, r5, r6
 800369c:	9305      	str	r3, [sp, #20]
 800369e:	42b5      	cmp	r5, r6
 80036a0:	d00b      	beq.n	80036ba <_svfiprintf_r+0x72>
 80036a2:	0032      	movs	r2, r6
 80036a4:	0039      	movs	r1, r7
 80036a6:	9803      	ldr	r0, [sp, #12]
 80036a8:	f7ff ff6e 	bl	8003588 <__ssputs_r>
 80036ac:	3001      	adds	r0, #1
 80036ae:	d100      	bne.n	80036b2 <_svfiprintf_r+0x6a>
 80036b0:	e0ae      	b.n	8003810 <_svfiprintf_r+0x1c8>
 80036b2:	6963      	ldr	r3, [r4, #20]
 80036b4:	9a05      	ldr	r2, [sp, #20]
 80036b6:	189b      	adds	r3, r3, r2
 80036b8:	6163      	str	r3, [r4, #20]
 80036ba:	782b      	ldrb	r3, [r5, #0]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d100      	bne.n	80036c2 <_svfiprintf_r+0x7a>
 80036c0:	e0a6      	b.n	8003810 <_svfiprintf_r+0x1c8>
 80036c2:	2201      	movs	r2, #1
 80036c4:	2300      	movs	r3, #0
 80036c6:	4252      	negs	r2, r2
 80036c8:	6062      	str	r2, [r4, #4]
 80036ca:	a904      	add	r1, sp, #16
 80036cc:	3254      	adds	r2, #84	@ 0x54
 80036ce:	1852      	adds	r2, r2, r1
 80036d0:	1c6e      	adds	r6, r5, #1
 80036d2:	6023      	str	r3, [r4, #0]
 80036d4:	60e3      	str	r3, [r4, #12]
 80036d6:	60a3      	str	r3, [r4, #8]
 80036d8:	7013      	strb	r3, [r2, #0]
 80036da:	65a3      	str	r3, [r4, #88]	@ 0x58
 80036dc:	4b54      	ldr	r3, [pc, #336]	@ (8003830 <_svfiprintf_r+0x1e8>)
 80036de:	2205      	movs	r2, #5
 80036e0:	0018      	movs	r0, r3
 80036e2:	7831      	ldrb	r1, [r6, #0]
 80036e4:	9305      	str	r3, [sp, #20]
 80036e6:	f000 fa51 	bl	8003b8c <memchr>
 80036ea:	1c75      	adds	r5, r6, #1
 80036ec:	2800      	cmp	r0, #0
 80036ee:	d11f      	bne.n	8003730 <_svfiprintf_r+0xe8>
 80036f0:	6822      	ldr	r2, [r4, #0]
 80036f2:	06d3      	lsls	r3, r2, #27
 80036f4:	d504      	bpl.n	8003700 <_svfiprintf_r+0xb8>
 80036f6:	2353      	movs	r3, #83	@ 0x53
 80036f8:	a904      	add	r1, sp, #16
 80036fa:	185b      	adds	r3, r3, r1
 80036fc:	2120      	movs	r1, #32
 80036fe:	7019      	strb	r1, [r3, #0]
 8003700:	0713      	lsls	r3, r2, #28
 8003702:	d504      	bpl.n	800370e <_svfiprintf_r+0xc6>
 8003704:	2353      	movs	r3, #83	@ 0x53
 8003706:	a904      	add	r1, sp, #16
 8003708:	185b      	adds	r3, r3, r1
 800370a:	212b      	movs	r1, #43	@ 0x2b
 800370c:	7019      	strb	r1, [r3, #0]
 800370e:	7833      	ldrb	r3, [r6, #0]
 8003710:	2b2a      	cmp	r3, #42	@ 0x2a
 8003712:	d016      	beq.n	8003742 <_svfiprintf_r+0xfa>
 8003714:	0035      	movs	r5, r6
 8003716:	2100      	movs	r1, #0
 8003718:	200a      	movs	r0, #10
 800371a:	68e3      	ldr	r3, [r4, #12]
 800371c:	782a      	ldrb	r2, [r5, #0]
 800371e:	1c6e      	adds	r6, r5, #1
 8003720:	3a30      	subs	r2, #48	@ 0x30
 8003722:	2a09      	cmp	r2, #9
 8003724:	d950      	bls.n	80037c8 <_svfiprintf_r+0x180>
 8003726:	2900      	cmp	r1, #0
 8003728:	d111      	bne.n	800374e <_svfiprintf_r+0x106>
 800372a:	e017      	b.n	800375c <_svfiprintf_r+0x114>
 800372c:	3501      	adds	r5, #1
 800372e:	e7af      	b.n	8003690 <_svfiprintf_r+0x48>
 8003730:	9b05      	ldr	r3, [sp, #20]
 8003732:	6822      	ldr	r2, [r4, #0]
 8003734:	1ac0      	subs	r0, r0, r3
 8003736:	2301      	movs	r3, #1
 8003738:	4083      	lsls	r3, r0
 800373a:	4313      	orrs	r3, r2
 800373c:	002e      	movs	r6, r5
 800373e:	6023      	str	r3, [r4, #0]
 8003740:	e7cc      	b.n	80036dc <_svfiprintf_r+0x94>
 8003742:	9b07      	ldr	r3, [sp, #28]
 8003744:	1d19      	adds	r1, r3, #4
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	9107      	str	r1, [sp, #28]
 800374a:	2b00      	cmp	r3, #0
 800374c:	db01      	blt.n	8003752 <_svfiprintf_r+0x10a>
 800374e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003750:	e004      	b.n	800375c <_svfiprintf_r+0x114>
 8003752:	425b      	negs	r3, r3
 8003754:	60e3      	str	r3, [r4, #12]
 8003756:	2302      	movs	r3, #2
 8003758:	4313      	orrs	r3, r2
 800375a:	6023      	str	r3, [r4, #0]
 800375c:	782b      	ldrb	r3, [r5, #0]
 800375e:	2b2e      	cmp	r3, #46	@ 0x2e
 8003760:	d10c      	bne.n	800377c <_svfiprintf_r+0x134>
 8003762:	786b      	ldrb	r3, [r5, #1]
 8003764:	2b2a      	cmp	r3, #42	@ 0x2a
 8003766:	d134      	bne.n	80037d2 <_svfiprintf_r+0x18a>
 8003768:	9b07      	ldr	r3, [sp, #28]
 800376a:	3502      	adds	r5, #2
 800376c:	1d1a      	adds	r2, r3, #4
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	9207      	str	r2, [sp, #28]
 8003772:	2b00      	cmp	r3, #0
 8003774:	da01      	bge.n	800377a <_svfiprintf_r+0x132>
 8003776:	2301      	movs	r3, #1
 8003778:	425b      	negs	r3, r3
 800377a:	9309      	str	r3, [sp, #36]	@ 0x24
 800377c:	4e2d      	ldr	r6, [pc, #180]	@ (8003834 <_svfiprintf_r+0x1ec>)
 800377e:	2203      	movs	r2, #3
 8003780:	0030      	movs	r0, r6
 8003782:	7829      	ldrb	r1, [r5, #0]
 8003784:	f000 fa02 	bl	8003b8c <memchr>
 8003788:	2800      	cmp	r0, #0
 800378a:	d006      	beq.n	800379a <_svfiprintf_r+0x152>
 800378c:	2340      	movs	r3, #64	@ 0x40
 800378e:	1b80      	subs	r0, r0, r6
 8003790:	4083      	lsls	r3, r0
 8003792:	6822      	ldr	r2, [r4, #0]
 8003794:	3501      	adds	r5, #1
 8003796:	4313      	orrs	r3, r2
 8003798:	6023      	str	r3, [r4, #0]
 800379a:	7829      	ldrb	r1, [r5, #0]
 800379c:	2206      	movs	r2, #6
 800379e:	4826      	ldr	r0, [pc, #152]	@ (8003838 <_svfiprintf_r+0x1f0>)
 80037a0:	1c6e      	adds	r6, r5, #1
 80037a2:	7621      	strb	r1, [r4, #24]
 80037a4:	f000 f9f2 	bl	8003b8c <memchr>
 80037a8:	2800      	cmp	r0, #0
 80037aa:	d038      	beq.n	800381e <_svfiprintf_r+0x1d6>
 80037ac:	4b23      	ldr	r3, [pc, #140]	@ (800383c <_svfiprintf_r+0x1f4>)
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d122      	bne.n	80037f8 <_svfiprintf_r+0x1b0>
 80037b2:	2207      	movs	r2, #7
 80037b4:	9b07      	ldr	r3, [sp, #28]
 80037b6:	3307      	adds	r3, #7
 80037b8:	4393      	bics	r3, r2
 80037ba:	3308      	adds	r3, #8
 80037bc:	9307      	str	r3, [sp, #28]
 80037be:	6963      	ldr	r3, [r4, #20]
 80037c0:	9a04      	ldr	r2, [sp, #16]
 80037c2:	189b      	adds	r3, r3, r2
 80037c4:	6163      	str	r3, [r4, #20]
 80037c6:	e762      	b.n	800368e <_svfiprintf_r+0x46>
 80037c8:	4343      	muls	r3, r0
 80037ca:	0035      	movs	r5, r6
 80037cc:	2101      	movs	r1, #1
 80037ce:	189b      	adds	r3, r3, r2
 80037d0:	e7a4      	b.n	800371c <_svfiprintf_r+0xd4>
 80037d2:	2300      	movs	r3, #0
 80037d4:	200a      	movs	r0, #10
 80037d6:	0019      	movs	r1, r3
 80037d8:	3501      	adds	r5, #1
 80037da:	6063      	str	r3, [r4, #4]
 80037dc:	782a      	ldrb	r2, [r5, #0]
 80037de:	1c6e      	adds	r6, r5, #1
 80037e0:	3a30      	subs	r2, #48	@ 0x30
 80037e2:	2a09      	cmp	r2, #9
 80037e4:	d903      	bls.n	80037ee <_svfiprintf_r+0x1a6>
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d0c8      	beq.n	800377c <_svfiprintf_r+0x134>
 80037ea:	9109      	str	r1, [sp, #36]	@ 0x24
 80037ec:	e7c6      	b.n	800377c <_svfiprintf_r+0x134>
 80037ee:	4341      	muls	r1, r0
 80037f0:	0035      	movs	r5, r6
 80037f2:	2301      	movs	r3, #1
 80037f4:	1889      	adds	r1, r1, r2
 80037f6:	e7f1      	b.n	80037dc <_svfiprintf_r+0x194>
 80037f8:	aa07      	add	r2, sp, #28
 80037fa:	9200      	str	r2, [sp, #0]
 80037fc:	0021      	movs	r1, r4
 80037fe:	003a      	movs	r2, r7
 8003800:	4b0f      	ldr	r3, [pc, #60]	@ (8003840 <_svfiprintf_r+0x1f8>)
 8003802:	9803      	ldr	r0, [sp, #12]
 8003804:	e000      	b.n	8003808 <_svfiprintf_r+0x1c0>
 8003806:	bf00      	nop
 8003808:	9004      	str	r0, [sp, #16]
 800380a:	9b04      	ldr	r3, [sp, #16]
 800380c:	3301      	adds	r3, #1
 800380e:	d1d6      	bne.n	80037be <_svfiprintf_r+0x176>
 8003810:	89bb      	ldrh	r3, [r7, #12]
 8003812:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8003814:	065b      	lsls	r3, r3, #25
 8003816:	d500      	bpl.n	800381a <_svfiprintf_r+0x1d2>
 8003818:	e72c      	b.n	8003674 <_svfiprintf_r+0x2c>
 800381a:	b021      	add	sp, #132	@ 0x84
 800381c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800381e:	aa07      	add	r2, sp, #28
 8003820:	9200      	str	r2, [sp, #0]
 8003822:	0021      	movs	r1, r4
 8003824:	003a      	movs	r2, r7
 8003826:	4b06      	ldr	r3, [pc, #24]	@ (8003840 <_svfiprintf_r+0x1f8>)
 8003828:	9803      	ldr	r0, [sp, #12]
 800382a:	f000 f87b 	bl	8003924 <_printf_i>
 800382e:	e7eb      	b.n	8003808 <_svfiprintf_r+0x1c0>
 8003830:	080041f8 	.word	0x080041f8
 8003834:	080041fe 	.word	0x080041fe
 8003838:	08004202 	.word	0x08004202
 800383c:	00000000 	.word	0x00000000
 8003840:	08003589 	.word	0x08003589

08003844 <_printf_common>:
 8003844:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003846:	0016      	movs	r6, r2
 8003848:	9301      	str	r3, [sp, #4]
 800384a:	688a      	ldr	r2, [r1, #8]
 800384c:	690b      	ldr	r3, [r1, #16]
 800384e:	000c      	movs	r4, r1
 8003850:	9000      	str	r0, [sp, #0]
 8003852:	4293      	cmp	r3, r2
 8003854:	da00      	bge.n	8003858 <_printf_common+0x14>
 8003856:	0013      	movs	r3, r2
 8003858:	0022      	movs	r2, r4
 800385a:	6033      	str	r3, [r6, #0]
 800385c:	3243      	adds	r2, #67	@ 0x43
 800385e:	7812      	ldrb	r2, [r2, #0]
 8003860:	2a00      	cmp	r2, #0
 8003862:	d001      	beq.n	8003868 <_printf_common+0x24>
 8003864:	3301      	adds	r3, #1
 8003866:	6033      	str	r3, [r6, #0]
 8003868:	6823      	ldr	r3, [r4, #0]
 800386a:	069b      	lsls	r3, r3, #26
 800386c:	d502      	bpl.n	8003874 <_printf_common+0x30>
 800386e:	6833      	ldr	r3, [r6, #0]
 8003870:	3302      	adds	r3, #2
 8003872:	6033      	str	r3, [r6, #0]
 8003874:	6822      	ldr	r2, [r4, #0]
 8003876:	2306      	movs	r3, #6
 8003878:	0015      	movs	r5, r2
 800387a:	401d      	ands	r5, r3
 800387c:	421a      	tst	r2, r3
 800387e:	d027      	beq.n	80038d0 <_printf_common+0x8c>
 8003880:	0023      	movs	r3, r4
 8003882:	3343      	adds	r3, #67	@ 0x43
 8003884:	781b      	ldrb	r3, [r3, #0]
 8003886:	1e5a      	subs	r2, r3, #1
 8003888:	4193      	sbcs	r3, r2
 800388a:	6822      	ldr	r2, [r4, #0]
 800388c:	0692      	lsls	r2, r2, #26
 800388e:	d430      	bmi.n	80038f2 <_printf_common+0xae>
 8003890:	0022      	movs	r2, r4
 8003892:	9901      	ldr	r1, [sp, #4]
 8003894:	9800      	ldr	r0, [sp, #0]
 8003896:	9d08      	ldr	r5, [sp, #32]
 8003898:	3243      	adds	r2, #67	@ 0x43
 800389a:	47a8      	blx	r5
 800389c:	3001      	adds	r0, #1
 800389e:	d025      	beq.n	80038ec <_printf_common+0xa8>
 80038a0:	2206      	movs	r2, #6
 80038a2:	6823      	ldr	r3, [r4, #0]
 80038a4:	2500      	movs	r5, #0
 80038a6:	4013      	ands	r3, r2
 80038a8:	2b04      	cmp	r3, #4
 80038aa:	d105      	bne.n	80038b8 <_printf_common+0x74>
 80038ac:	6833      	ldr	r3, [r6, #0]
 80038ae:	68e5      	ldr	r5, [r4, #12]
 80038b0:	1aed      	subs	r5, r5, r3
 80038b2:	43eb      	mvns	r3, r5
 80038b4:	17db      	asrs	r3, r3, #31
 80038b6:	401d      	ands	r5, r3
 80038b8:	68a3      	ldr	r3, [r4, #8]
 80038ba:	6922      	ldr	r2, [r4, #16]
 80038bc:	4293      	cmp	r3, r2
 80038be:	dd01      	ble.n	80038c4 <_printf_common+0x80>
 80038c0:	1a9b      	subs	r3, r3, r2
 80038c2:	18ed      	adds	r5, r5, r3
 80038c4:	2600      	movs	r6, #0
 80038c6:	42b5      	cmp	r5, r6
 80038c8:	d120      	bne.n	800390c <_printf_common+0xc8>
 80038ca:	2000      	movs	r0, #0
 80038cc:	e010      	b.n	80038f0 <_printf_common+0xac>
 80038ce:	3501      	adds	r5, #1
 80038d0:	68e3      	ldr	r3, [r4, #12]
 80038d2:	6832      	ldr	r2, [r6, #0]
 80038d4:	1a9b      	subs	r3, r3, r2
 80038d6:	42ab      	cmp	r3, r5
 80038d8:	ddd2      	ble.n	8003880 <_printf_common+0x3c>
 80038da:	0022      	movs	r2, r4
 80038dc:	2301      	movs	r3, #1
 80038de:	9901      	ldr	r1, [sp, #4]
 80038e0:	9800      	ldr	r0, [sp, #0]
 80038e2:	9f08      	ldr	r7, [sp, #32]
 80038e4:	3219      	adds	r2, #25
 80038e6:	47b8      	blx	r7
 80038e8:	3001      	adds	r0, #1
 80038ea:	d1f0      	bne.n	80038ce <_printf_common+0x8a>
 80038ec:	2001      	movs	r0, #1
 80038ee:	4240      	negs	r0, r0
 80038f0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80038f2:	2030      	movs	r0, #48	@ 0x30
 80038f4:	18e1      	adds	r1, r4, r3
 80038f6:	3143      	adds	r1, #67	@ 0x43
 80038f8:	7008      	strb	r0, [r1, #0]
 80038fa:	0021      	movs	r1, r4
 80038fc:	1c5a      	adds	r2, r3, #1
 80038fe:	3145      	adds	r1, #69	@ 0x45
 8003900:	7809      	ldrb	r1, [r1, #0]
 8003902:	18a2      	adds	r2, r4, r2
 8003904:	3243      	adds	r2, #67	@ 0x43
 8003906:	3302      	adds	r3, #2
 8003908:	7011      	strb	r1, [r2, #0]
 800390a:	e7c1      	b.n	8003890 <_printf_common+0x4c>
 800390c:	0022      	movs	r2, r4
 800390e:	2301      	movs	r3, #1
 8003910:	9901      	ldr	r1, [sp, #4]
 8003912:	9800      	ldr	r0, [sp, #0]
 8003914:	9f08      	ldr	r7, [sp, #32]
 8003916:	321a      	adds	r2, #26
 8003918:	47b8      	blx	r7
 800391a:	3001      	adds	r0, #1
 800391c:	d0e6      	beq.n	80038ec <_printf_common+0xa8>
 800391e:	3601      	adds	r6, #1
 8003920:	e7d1      	b.n	80038c6 <_printf_common+0x82>
	...

08003924 <_printf_i>:
 8003924:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003926:	b08b      	sub	sp, #44	@ 0x2c
 8003928:	9206      	str	r2, [sp, #24]
 800392a:	000a      	movs	r2, r1
 800392c:	3243      	adds	r2, #67	@ 0x43
 800392e:	9307      	str	r3, [sp, #28]
 8003930:	9005      	str	r0, [sp, #20]
 8003932:	9203      	str	r2, [sp, #12]
 8003934:	7e0a      	ldrb	r2, [r1, #24]
 8003936:	000c      	movs	r4, r1
 8003938:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800393a:	2a78      	cmp	r2, #120	@ 0x78
 800393c:	d809      	bhi.n	8003952 <_printf_i+0x2e>
 800393e:	2a62      	cmp	r2, #98	@ 0x62
 8003940:	d80b      	bhi.n	800395a <_printf_i+0x36>
 8003942:	2a00      	cmp	r2, #0
 8003944:	d100      	bne.n	8003948 <_printf_i+0x24>
 8003946:	e0bc      	b.n	8003ac2 <_printf_i+0x19e>
 8003948:	497b      	ldr	r1, [pc, #492]	@ (8003b38 <_printf_i+0x214>)
 800394a:	9104      	str	r1, [sp, #16]
 800394c:	2a58      	cmp	r2, #88	@ 0x58
 800394e:	d100      	bne.n	8003952 <_printf_i+0x2e>
 8003950:	e090      	b.n	8003a74 <_printf_i+0x150>
 8003952:	0025      	movs	r5, r4
 8003954:	3542      	adds	r5, #66	@ 0x42
 8003956:	702a      	strb	r2, [r5, #0]
 8003958:	e022      	b.n	80039a0 <_printf_i+0x7c>
 800395a:	0010      	movs	r0, r2
 800395c:	3863      	subs	r0, #99	@ 0x63
 800395e:	2815      	cmp	r0, #21
 8003960:	d8f7      	bhi.n	8003952 <_printf_i+0x2e>
 8003962:	f7fc fbcf 	bl	8000104 <__gnu_thumb1_case_shi>
 8003966:	0016      	.short	0x0016
 8003968:	fff6001f 	.word	0xfff6001f
 800396c:	fff6fff6 	.word	0xfff6fff6
 8003970:	001ffff6 	.word	0x001ffff6
 8003974:	fff6fff6 	.word	0xfff6fff6
 8003978:	fff6fff6 	.word	0xfff6fff6
 800397c:	003600a1 	.word	0x003600a1
 8003980:	fff60080 	.word	0xfff60080
 8003984:	00b2fff6 	.word	0x00b2fff6
 8003988:	0036fff6 	.word	0x0036fff6
 800398c:	fff6fff6 	.word	0xfff6fff6
 8003990:	0084      	.short	0x0084
 8003992:	0025      	movs	r5, r4
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	3542      	adds	r5, #66	@ 0x42
 8003998:	1d11      	adds	r1, r2, #4
 800399a:	6019      	str	r1, [r3, #0]
 800399c:	6813      	ldr	r3, [r2, #0]
 800399e:	702b      	strb	r3, [r5, #0]
 80039a0:	2301      	movs	r3, #1
 80039a2:	e0a0      	b.n	8003ae6 <_printf_i+0x1c2>
 80039a4:	6818      	ldr	r0, [r3, #0]
 80039a6:	6809      	ldr	r1, [r1, #0]
 80039a8:	1d02      	adds	r2, r0, #4
 80039aa:	060d      	lsls	r5, r1, #24
 80039ac:	d50b      	bpl.n	80039c6 <_printf_i+0xa2>
 80039ae:	6806      	ldr	r6, [r0, #0]
 80039b0:	601a      	str	r2, [r3, #0]
 80039b2:	2e00      	cmp	r6, #0
 80039b4:	da03      	bge.n	80039be <_printf_i+0x9a>
 80039b6:	232d      	movs	r3, #45	@ 0x2d
 80039b8:	9a03      	ldr	r2, [sp, #12]
 80039ba:	4276      	negs	r6, r6
 80039bc:	7013      	strb	r3, [r2, #0]
 80039be:	4b5e      	ldr	r3, [pc, #376]	@ (8003b38 <_printf_i+0x214>)
 80039c0:	270a      	movs	r7, #10
 80039c2:	9304      	str	r3, [sp, #16]
 80039c4:	e018      	b.n	80039f8 <_printf_i+0xd4>
 80039c6:	6806      	ldr	r6, [r0, #0]
 80039c8:	601a      	str	r2, [r3, #0]
 80039ca:	0649      	lsls	r1, r1, #25
 80039cc:	d5f1      	bpl.n	80039b2 <_printf_i+0x8e>
 80039ce:	b236      	sxth	r6, r6
 80039d0:	e7ef      	b.n	80039b2 <_printf_i+0x8e>
 80039d2:	6808      	ldr	r0, [r1, #0]
 80039d4:	6819      	ldr	r1, [r3, #0]
 80039d6:	c940      	ldmia	r1!, {r6}
 80039d8:	0605      	lsls	r5, r0, #24
 80039da:	d402      	bmi.n	80039e2 <_printf_i+0xbe>
 80039dc:	0640      	lsls	r0, r0, #25
 80039de:	d500      	bpl.n	80039e2 <_printf_i+0xbe>
 80039e0:	b2b6      	uxth	r6, r6
 80039e2:	6019      	str	r1, [r3, #0]
 80039e4:	4b54      	ldr	r3, [pc, #336]	@ (8003b38 <_printf_i+0x214>)
 80039e6:	270a      	movs	r7, #10
 80039e8:	9304      	str	r3, [sp, #16]
 80039ea:	2a6f      	cmp	r2, #111	@ 0x6f
 80039ec:	d100      	bne.n	80039f0 <_printf_i+0xcc>
 80039ee:	3f02      	subs	r7, #2
 80039f0:	0023      	movs	r3, r4
 80039f2:	2200      	movs	r2, #0
 80039f4:	3343      	adds	r3, #67	@ 0x43
 80039f6:	701a      	strb	r2, [r3, #0]
 80039f8:	6863      	ldr	r3, [r4, #4]
 80039fa:	60a3      	str	r3, [r4, #8]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	db03      	blt.n	8003a08 <_printf_i+0xe4>
 8003a00:	2104      	movs	r1, #4
 8003a02:	6822      	ldr	r2, [r4, #0]
 8003a04:	438a      	bics	r2, r1
 8003a06:	6022      	str	r2, [r4, #0]
 8003a08:	2e00      	cmp	r6, #0
 8003a0a:	d102      	bne.n	8003a12 <_printf_i+0xee>
 8003a0c:	9d03      	ldr	r5, [sp, #12]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d00c      	beq.n	8003a2c <_printf_i+0x108>
 8003a12:	9d03      	ldr	r5, [sp, #12]
 8003a14:	0030      	movs	r0, r6
 8003a16:	0039      	movs	r1, r7
 8003a18:	f7fc fc04 	bl	8000224 <__aeabi_uidivmod>
 8003a1c:	9b04      	ldr	r3, [sp, #16]
 8003a1e:	3d01      	subs	r5, #1
 8003a20:	5c5b      	ldrb	r3, [r3, r1]
 8003a22:	702b      	strb	r3, [r5, #0]
 8003a24:	0033      	movs	r3, r6
 8003a26:	0006      	movs	r6, r0
 8003a28:	429f      	cmp	r7, r3
 8003a2a:	d9f3      	bls.n	8003a14 <_printf_i+0xf0>
 8003a2c:	2f08      	cmp	r7, #8
 8003a2e:	d109      	bne.n	8003a44 <_printf_i+0x120>
 8003a30:	6823      	ldr	r3, [r4, #0]
 8003a32:	07db      	lsls	r3, r3, #31
 8003a34:	d506      	bpl.n	8003a44 <_printf_i+0x120>
 8003a36:	6862      	ldr	r2, [r4, #4]
 8003a38:	6923      	ldr	r3, [r4, #16]
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	dc02      	bgt.n	8003a44 <_printf_i+0x120>
 8003a3e:	2330      	movs	r3, #48	@ 0x30
 8003a40:	3d01      	subs	r5, #1
 8003a42:	702b      	strb	r3, [r5, #0]
 8003a44:	9b03      	ldr	r3, [sp, #12]
 8003a46:	1b5b      	subs	r3, r3, r5
 8003a48:	6123      	str	r3, [r4, #16]
 8003a4a:	9b07      	ldr	r3, [sp, #28]
 8003a4c:	0021      	movs	r1, r4
 8003a4e:	9300      	str	r3, [sp, #0]
 8003a50:	9805      	ldr	r0, [sp, #20]
 8003a52:	9b06      	ldr	r3, [sp, #24]
 8003a54:	aa09      	add	r2, sp, #36	@ 0x24
 8003a56:	f7ff fef5 	bl	8003844 <_printf_common>
 8003a5a:	3001      	adds	r0, #1
 8003a5c:	d148      	bne.n	8003af0 <_printf_i+0x1cc>
 8003a5e:	2001      	movs	r0, #1
 8003a60:	4240      	negs	r0, r0
 8003a62:	b00b      	add	sp, #44	@ 0x2c
 8003a64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a66:	2220      	movs	r2, #32
 8003a68:	6809      	ldr	r1, [r1, #0]
 8003a6a:	430a      	orrs	r2, r1
 8003a6c:	6022      	str	r2, [r4, #0]
 8003a6e:	2278      	movs	r2, #120	@ 0x78
 8003a70:	4932      	ldr	r1, [pc, #200]	@ (8003b3c <_printf_i+0x218>)
 8003a72:	9104      	str	r1, [sp, #16]
 8003a74:	0021      	movs	r1, r4
 8003a76:	3145      	adds	r1, #69	@ 0x45
 8003a78:	700a      	strb	r2, [r1, #0]
 8003a7a:	6819      	ldr	r1, [r3, #0]
 8003a7c:	6822      	ldr	r2, [r4, #0]
 8003a7e:	c940      	ldmia	r1!, {r6}
 8003a80:	0610      	lsls	r0, r2, #24
 8003a82:	d402      	bmi.n	8003a8a <_printf_i+0x166>
 8003a84:	0650      	lsls	r0, r2, #25
 8003a86:	d500      	bpl.n	8003a8a <_printf_i+0x166>
 8003a88:	b2b6      	uxth	r6, r6
 8003a8a:	6019      	str	r1, [r3, #0]
 8003a8c:	07d3      	lsls	r3, r2, #31
 8003a8e:	d502      	bpl.n	8003a96 <_printf_i+0x172>
 8003a90:	2320      	movs	r3, #32
 8003a92:	4313      	orrs	r3, r2
 8003a94:	6023      	str	r3, [r4, #0]
 8003a96:	2e00      	cmp	r6, #0
 8003a98:	d001      	beq.n	8003a9e <_printf_i+0x17a>
 8003a9a:	2710      	movs	r7, #16
 8003a9c:	e7a8      	b.n	80039f0 <_printf_i+0xcc>
 8003a9e:	2220      	movs	r2, #32
 8003aa0:	6823      	ldr	r3, [r4, #0]
 8003aa2:	4393      	bics	r3, r2
 8003aa4:	6023      	str	r3, [r4, #0]
 8003aa6:	e7f8      	b.n	8003a9a <_printf_i+0x176>
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	680d      	ldr	r5, [r1, #0]
 8003aac:	1d10      	adds	r0, r2, #4
 8003aae:	6949      	ldr	r1, [r1, #20]
 8003ab0:	6018      	str	r0, [r3, #0]
 8003ab2:	6813      	ldr	r3, [r2, #0]
 8003ab4:	062e      	lsls	r6, r5, #24
 8003ab6:	d501      	bpl.n	8003abc <_printf_i+0x198>
 8003ab8:	6019      	str	r1, [r3, #0]
 8003aba:	e002      	b.n	8003ac2 <_printf_i+0x19e>
 8003abc:	066d      	lsls	r5, r5, #25
 8003abe:	d5fb      	bpl.n	8003ab8 <_printf_i+0x194>
 8003ac0:	8019      	strh	r1, [r3, #0]
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	9d03      	ldr	r5, [sp, #12]
 8003ac6:	6123      	str	r3, [r4, #16]
 8003ac8:	e7bf      	b.n	8003a4a <_printf_i+0x126>
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	1d11      	adds	r1, r2, #4
 8003ace:	6019      	str	r1, [r3, #0]
 8003ad0:	6815      	ldr	r5, [r2, #0]
 8003ad2:	2100      	movs	r1, #0
 8003ad4:	0028      	movs	r0, r5
 8003ad6:	6862      	ldr	r2, [r4, #4]
 8003ad8:	f000 f858 	bl	8003b8c <memchr>
 8003adc:	2800      	cmp	r0, #0
 8003ade:	d001      	beq.n	8003ae4 <_printf_i+0x1c0>
 8003ae0:	1b40      	subs	r0, r0, r5
 8003ae2:	6060      	str	r0, [r4, #4]
 8003ae4:	6863      	ldr	r3, [r4, #4]
 8003ae6:	6123      	str	r3, [r4, #16]
 8003ae8:	2300      	movs	r3, #0
 8003aea:	9a03      	ldr	r2, [sp, #12]
 8003aec:	7013      	strb	r3, [r2, #0]
 8003aee:	e7ac      	b.n	8003a4a <_printf_i+0x126>
 8003af0:	002a      	movs	r2, r5
 8003af2:	6923      	ldr	r3, [r4, #16]
 8003af4:	9906      	ldr	r1, [sp, #24]
 8003af6:	9805      	ldr	r0, [sp, #20]
 8003af8:	9d07      	ldr	r5, [sp, #28]
 8003afa:	47a8      	blx	r5
 8003afc:	3001      	adds	r0, #1
 8003afe:	d0ae      	beq.n	8003a5e <_printf_i+0x13a>
 8003b00:	6823      	ldr	r3, [r4, #0]
 8003b02:	079b      	lsls	r3, r3, #30
 8003b04:	d415      	bmi.n	8003b32 <_printf_i+0x20e>
 8003b06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003b08:	68e0      	ldr	r0, [r4, #12]
 8003b0a:	4298      	cmp	r0, r3
 8003b0c:	daa9      	bge.n	8003a62 <_printf_i+0x13e>
 8003b0e:	0018      	movs	r0, r3
 8003b10:	e7a7      	b.n	8003a62 <_printf_i+0x13e>
 8003b12:	0022      	movs	r2, r4
 8003b14:	2301      	movs	r3, #1
 8003b16:	9906      	ldr	r1, [sp, #24]
 8003b18:	9805      	ldr	r0, [sp, #20]
 8003b1a:	9e07      	ldr	r6, [sp, #28]
 8003b1c:	3219      	adds	r2, #25
 8003b1e:	47b0      	blx	r6
 8003b20:	3001      	adds	r0, #1
 8003b22:	d09c      	beq.n	8003a5e <_printf_i+0x13a>
 8003b24:	3501      	adds	r5, #1
 8003b26:	68e3      	ldr	r3, [r4, #12]
 8003b28:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003b2a:	1a9b      	subs	r3, r3, r2
 8003b2c:	42ab      	cmp	r3, r5
 8003b2e:	dcf0      	bgt.n	8003b12 <_printf_i+0x1ee>
 8003b30:	e7e9      	b.n	8003b06 <_printf_i+0x1e2>
 8003b32:	2500      	movs	r5, #0
 8003b34:	e7f7      	b.n	8003b26 <_printf_i+0x202>
 8003b36:	46c0      	nop			@ (mov r8, r8)
 8003b38:	08004209 	.word	0x08004209
 8003b3c:	0800421a 	.word	0x0800421a

08003b40 <memmove>:
 8003b40:	b510      	push	{r4, lr}
 8003b42:	4288      	cmp	r0, r1
 8003b44:	d806      	bhi.n	8003b54 <memmove+0x14>
 8003b46:	2300      	movs	r3, #0
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d008      	beq.n	8003b5e <memmove+0x1e>
 8003b4c:	5ccc      	ldrb	r4, [r1, r3]
 8003b4e:	54c4      	strb	r4, [r0, r3]
 8003b50:	3301      	adds	r3, #1
 8003b52:	e7f9      	b.n	8003b48 <memmove+0x8>
 8003b54:	188b      	adds	r3, r1, r2
 8003b56:	4298      	cmp	r0, r3
 8003b58:	d2f5      	bcs.n	8003b46 <memmove+0x6>
 8003b5a:	3a01      	subs	r2, #1
 8003b5c:	d200      	bcs.n	8003b60 <memmove+0x20>
 8003b5e:	bd10      	pop	{r4, pc}
 8003b60:	5c8b      	ldrb	r3, [r1, r2]
 8003b62:	5483      	strb	r3, [r0, r2]
 8003b64:	e7f9      	b.n	8003b5a <memmove+0x1a>
	...

08003b68 <_sbrk_r>:
 8003b68:	2300      	movs	r3, #0
 8003b6a:	b570      	push	{r4, r5, r6, lr}
 8003b6c:	4d06      	ldr	r5, [pc, #24]	@ (8003b88 <_sbrk_r+0x20>)
 8003b6e:	0004      	movs	r4, r0
 8003b70:	0008      	movs	r0, r1
 8003b72:	602b      	str	r3, [r5, #0]
 8003b74:	f7fd fc18 	bl	80013a8 <_sbrk>
 8003b78:	1c43      	adds	r3, r0, #1
 8003b7a:	d103      	bne.n	8003b84 <_sbrk_r+0x1c>
 8003b7c:	682b      	ldr	r3, [r5, #0]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d000      	beq.n	8003b84 <_sbrk_r+0x1c>
 8003b82:	6023      	str	r3, [r4, #0]
 8003b84:	bd70      	pop	{r4, r5, r6, pc}
 8003b86:	46c0      	nop			@ (mov r8, r8)
 8003b88:	200002e4 	.word	0x200002e4

08003b8c <memchr>:
 8003b8c:	b2c9      	uxtb	r1, r1
 8003b8e:	1882      	adds	r2, r0, r2
 8003b90:	4290      	cmp	r0, r2
 8003b92:	d101      	bne.n	8003b98 <memchr+0xc>
 8003b94:	2000      	movs	r0, #0
 8003b96:	4770      	bx	lr
 8003b98:	7803      	ldrb	r3, [r0, #0]
 8003b9a:	428b      	cmp	r3, r1
 8003b9c:	d0fb      	beq.n	8003b96 <memchr+0xa>
 8003b9e:	3001      	adds	r0, #1
 8003ba0:	e7f6      	b.n	8003b90 <memchr+0x4>

08003ba2 <_realloc_r>:
 8003ba2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003ba4:	0006      	movs	r6, r0
 8003ba6:	000c      	movs	r4, r1
 8003ba8:	0015      	movs	r5, r2
 8003baa:	2900      	cmp	r1, #0
 8003bac:	d105      	bne.n	8003bba <_realloc_r+0x18>
 8003bae:	0011      	movs	r1, r2
 8003bb0:	f7ff fc5a 	bl	8003468 <_malloc_r>
 8003bb4:	0004      	movs	r4, r0
 8003bb6:	0020      	movs	r0, r4
 8003bb8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003bba:	2a00      	cmp	r2, #0
 8003bbc:	d103      	bne.n	8003bc6 <_realloc_r+0x24>
 8003bbe:	f7ff fbe7 	bl	8003390 <_free_r>
 8003bc2:	2400      	movs	r4, #0
 8003bc4:	e7f7      	b.n	8003bb6 <_realloc_r+0x14>
 8003bc6:	f000 f81b 	bl	8003c00 <_malloc_usable_size_r>
 8003bca:	0007      	movs	r7, r0
 8003bcc:	4285      	cmp	r5, r0
 8003bce:	d802      	bhi.n	8003bd6 <_realloc_r+0x34>
 8003bd0:	0843      	lsrs	r3, r0, #1
 8003bd2:	42ab      	cmp	r3, r5
 8003bd4:	d3ef      	bcc.n	8003bb6 <_realloc_r+0x14>
 8003bd6:	0029      	movs	r1, r5
 8003bd8:	0030      	movs	r0, r6
 8003bda:	f7ff fc45 	bl	8003468 <_malloc_r>
 8003bde:	9001      	str	r0, [sp, #4]
 8003be0:	2800      	cmp	r0, #0
 8003be2:	d0ee      	beq.n	8003bc2 <_realloc_r+0x20>
 8003be4:	002a      	movs	r2, r5
 8003be6:	42bd      	cmp	r5, r7
 8003be8:	d900      	bls.n	8003bec <_realloc_r+0x4a>
 8003bea:	003a      	movs	r2, r7
 8003bec:	0021      	movs	r1, r4
 8003bee:	9801      	ldr	r0, [sp, #4]
 8003bf0:	f7ff fbc4 	bl	800337c <memcpy>
 8003bf4:	0021      	movs	r1, r4
 8003bf6:	0030      	movs	r0, r6
 8003bf8:	f7ff fbca 	bl	8003390 <_free_r>
 8003bfc:	9c01      	ldr	r4, [sp, #4]
 8003bfe:	e7da      	b.n	8003bb6 <_realloc_r+0x14>

08003c00 <_malloc_usable_size_r>:
 8003c00:	1f0b      	subs	r3, r1, #4
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	1f18      	subs	r0, r3, #4
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	da01      	bge.n	8003c0e <_malloc_usable_size_r+0xe>
 8003c0a:	580b      	ldr	r3, [r1, r0]
 8003c0c:	18c0      	adds	r0, r0, r3
 8003c0e:	4770      	bx	lr

08003c10 <_init>:
 8003c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c12:	46c0      	nop			@ (mov r8, r8)
 8003c14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c16:	bc08      	pop	{r3}
 8003c18:	469e      	mov	lr, r3
 8003c1a:	4770      	bx	lr

08003c1c <_fini>:
 8003c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c1e:	46c0      	nop			@ (mov r8, r8)
 8003c20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c22:	bc08      	pop	{r3}
 8003c24:	469e      	mov	lr, r3
 8003c26:	4770      	bx	lr
