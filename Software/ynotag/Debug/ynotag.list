
ynotag.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000084c0  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000968  0800857c  0800857c  0000957c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ee4  08008ee4  0000a068  2**0
                  CONTENTS
  4 .ARM          00000008  08008ee4  08008ee4  00009ee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008eec  08008eec  0000a068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008eec  08008eec  00009eec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008ef0  08008ef0  00009ef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08008ef4  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000450  20000068  08008f5c  0000a068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004b8  08008f5c  0000a4b8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000a068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018503  00000000  00000000  0000a090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030b8  00000000  00000000  00022593  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001638  00000000  00000000  00025650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001226  00000000  00000000  00026c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f256  00000000  00000000  00027eae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c01b  00000000  00000000  00047104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c4b05  00000000  00000000  0006311f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00127c24  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c84  00000000  00000000  00127c68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  0012d8ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000068 	.word	0x20000068
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08008564 	.word	0x08008564

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000006c 	.word	0x2000006c
 8000100:	08008564 	.word	0x08008564

08000104 <strcmp>:
 8000104:	7802      	ldrb	r2, [r0, #0]
 8000106:	780b      	ldrb	r3, [r1, #0]
 8000108:	2a00      	cmp	r2, #0
 800010a:	d003      	beq.n	8000114 <strcmp+0x10>
 800010c:	3001      	adds	r0, #1
 800010e:	3101      	adds	r1, #1
 8000110:	429a      	cmp	r2, r3
 8000112:	d0f7      	beq.n	8000104 <strcmp>
 8000114:	1ad0      	subs	r0, r2, r3
 8000116:	4770      	bx	lr

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	@ 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	@ 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			@ (mov r8, r8)

08000418 <__aeabi_uldivmod>:
 8000418:	2b00      	cmp	r3, #0
 800041a:	d111      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 800041c:	2a00      	cmp	r2, #0
 800041e:	d10f      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 8000420:	2900      	cmp	r1, #0
 8000422:	d100      	bne.n	8000426 <__aeabi_uldivmod+0xe>
 8000424:	2800      	cmp	r0, #0
 8000426:	d002      	beq.n	800042e <__aeabi_uldivmod+0x16>
 8000428:	2100      	movs	r1, #0
 800042a:	43c9      	mvns	r1, r1
 800042c:	0008      	movs	r0, r1
 800042e:	b407      	push	{r0, r1, r2}
 8000430:	4802      	ldr	r0, [pc, #8]	@ (800043c <__aeabi_uldivmod+0x24>)
 8000432:	a102      	add	r1, pc, #8	@ (adr r1, 800043c <__aeabi_uldivmod+0x24>)
 8000434:	1840      	adds	r0, r0, r1
 8000436:	9002      	str	r0, [sp, #8]
 8000438:	bd03      	pop	{r0, r1, pc}
 800043a:	46c0      	nop			@ (mov r8, r8)
 800043c:	ffffffd9 	.word	0xffffffd9
 8000440:	b403      	push	{r0, r1}
 8000442:	4668      	mov	r0, sp
 8000444:	b501      	push	{r0, lr}
 8000446:	9802      	ldr	r0, [sp, #8]
 8000448:	f000 f806 	bl	8000458 <__udivmoddi4>
 800044c:	9b01      	ldr	r3, [sp, #4]
 800044e:	469e      	mov	lr, r3
 8000450:	b002      	add	sp, #8
 8000452:	bc0c      	pop	{r2, r3}
 8000454:	4770      	bx	lr
 8000456:	46c0      	nop			@ (mov r8, r8)

08000458 <__udivmoddi4>:
 8000458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800045a:	4657      	mov	r7, sl
 800045c:	464e      	mov	r6, r9
 800045e:	4645      	mov	r5, r8
 8000460:	46de      	mov	lr, fp
 8000462:	b5e0      	push	{r5, r6, r7, lr}
 8000464:	0004      	movs	r4, r0
 8000466:	000d      	movs	r5, r1
 8000468:	4692      	mov	sl, r2
 800046a:	4699      	mov	r9, r3
 800046c:	b083      	sub	sp, #12
 800046e:	428b      	cmp	r3, r1
 8000470:	d830      	bhi.n	80004d4 <__udivmoddi4+0x7c>
 8000472:	d02d      	beq.n	80004d0 <__udivmoddi4+0x78>
 8000474:	4649      	mov	r1, r9
 8000476:	4650      	mov	r0, sl
 8000478:	f000 fd2c 	bl	8000ed4 <__clzdi2>
 800047c:	0029      	movs	r1, r5
 800047e:	0006      	movs	r6, r0
 8000480:	0020      	movs	r0, r4
 8000482:	f000 fd27 	bl	8000ed4 <__clzdi2>
 8000486:	1a33      	subs	r3, r6, r0
 8000488:	4698      	mov	r8, r3
 800048a:	3b20      	subs	r3, #32
 800048c:	d434      	bmi.n	80004f8 <__udivmoddi4+0xa0>
 800048e:	469b      	mov	fp, r3
 8000490:	4653      	mov	r3, sl
 8000492:	465a      	mov	r2, fp
 8000494:	4093      	lsls	r3, r2
 8000496:	4642      	mov	r2, r8
 8000498:	001f      	movs	r7, r3
 800049a:	4653      	mov	r3, sl
 800049c:	4093      	lsls	r3, r2
 800049e:	001e      	movs	r6, r3
 80004a0:	42af      	cmp	r7, r5
 80004a2:	d83b      	bhi.n	800051c <__udivmoddi4+0xc4>
 80004a4:	42af      	cmp	r7, r5
 80004a6:	d100      	bne.n	80004aa <__udivmoddi4+0x52>
 80004a8:	e079      	b.n	800059e <__udivmoddi4+0x146>
 80004aa:	465b      	mov	r3, fp
 80004ac:	1ba4      	subs	r4, r4, r6
 80004ae:	41bd      	sbcs	r5, r7
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	da00      	bge.n	80004b6 <__udivmoddi4+0x5e>
 80004b4:	e076      	b.n	80005a4 <__udivmoddi4+0x14c>
 80004b6:	2200      	movs	r2, #0
 80004b8:	2300      	movs	r3, #0
 80004ba:	9200      	str	r2, [sp, #0]
 80004bc:	9301      	str	r3, [sp, #4]
 80004be:	2301      	movs	r3, #1
 80004c0:	465a      	mov	r2, fp
 80004c2:	4093      	lsls	r3, r2
 80004c4:	9301      	str	r3, [sp, #4]
 80004c6:	2301      	movs	r3, #1
 80004c8:	4642      	mov	r2, r8
 80004ca:	4093      	lsls	r3, r2
 80004cc:	9300      	str	r3, [sp, #0]
 80004ce:	e029      	b.n	8000524 <__udivmoddi4+0xcc>
 80004d0:	4282      	cmp	r2, r0
 80004d2:	d9cf      	bls.n	8000474 <__udivmoddi4+0x1c>
 80004d4:	2200      	movs	r2, #0
 80004d6:	2300      	movs	r3, #0
 80004d8:	9200      	str	r2, [sp, #0]
 80004da:	9301      	str	r3, [sp, #4]
 80004dc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d001      	beq.n	80004e6 <__udivmoddi4+0x8e>
 80004e2:	601c      	str	r4, [r3, #0]
 80004e4:	605d      	str	r5, [r3, #4]
 80004e6:	9800      	ldr	r0, [sp, #0]
 80004e8:	9901      	ldr	r1, [sp, #4]
 80004ea:	b003      	add	sp, #12
 80004ec:	bcf0      	pop	{r4, r5, r6, r7}
 80004ee:	46bb      	mov	fp, r7
 80004f0:	46b2      	mov	sl, r6
 80004f2:	46a9      	mov	r9, r5
 80004f4:	46a0      	mov	r8, r4
 80004f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f8:	4642      	mov	r2, r8
 80004fa:	469b      	mov	fp, r3
 80004fc:	2320      	movs	r3, #32
 80004fe:	1a9b      	subs	r3, r3, r2
 8000500:	4652      	mov	r2, sl
 8000502:	40da      	lsrs	r2, r3
 8000504:	4641      	mov	r1, r8
 8000506:	0013      	movs	r3, r2
 8000508:	464a      	mov	r2, r9
 800050a:	408a      	lsls	r2, r1
 800050c:	0017      	movs	r7, r2
 800050e:	4642      	mov	r2, r8
 8000510:	431f      	orrs	r7, r3
 8000512:	4653      	mov	r3, sl
 8000514:	4093      	lsls	r3, r2
 8000516:	001e      	movs	r6, r3
 8000518:	42af      	cmp	r7, r5
 800051a:	d9c3      	bls.n	80004a4 <__udivmoddi4+0x4c>
 800051c:	2200      	movs	r2, #0
 800051e:	2300      	movs	r3, #0
 8000520:	9200      	str	r2, [sp, #0]
 8000522:	9301      	str	r3, [sp, #4]
 8000524:	4643      	mov	r3, r8
 8000526:	2b00      	cmp	r3, #0
 8000528:	d0d8      	beq.n	80004dc <__udivmoddi4+0x84>
 800052a:	07fb      	lsls	r3, r7, #31
 800052c:	0872      	lsrs	r2, r6, #1
 800052e:	431a      	orrs	r2, r3
 8000530:	4646      	mov	r6, r8
 8000532:	087b      	lsrs	r3, r7, #1
 8000534:	e00e      	b.n	8000554 <__udivmoddi4+0xfc>
 8000536:	42ab      	cmp	r3, r5
 8000538:	d101      	bne.n	800053e <__udivmoddi4+0xe6>
 800053a:	42a2      	cmp	r2, r4
 800053c:	d80c      	bhi.n	8000558 <__udivmoddi4+0x100>
 800053e:	1aa4      	subs	r4, r4, r2
 8000540:	419d      	sbcs	r5, r3
 8000542:	2001      	movs	r0, #1
 8000544:	1924      	adds	r4, r4, r4
 8000546:	416d      	adcs	r5, r5
 8000548:	2100      	movs	r1, #0
 800054a:	3e01      	subs	r6, #1
 800054c:	1824      	adds	r4, r4, r0
 800054e:	414d      	adcs	r5, r1
 8000550:	2e00      	cmp	r6, #0
 8000552:	d006      	beq.n	8000562 <__udivmoddi4+0x10a>
 8000554:	42ab      	cmp	r3, r5
 8000556:	d9ee      	bls.n	8000536 <__udivmoddi4+0xde>
 8000558:	3e01      	subs	r6, #1
 800055a:	1924      	adds	r4, r4, r4
 800055c:	416d      	adcs	r5, r5
 800055e:	2e00      	cmp	r6, #0
 8000560:	d1f8      	bne.n	8000554 <__udivmoddi4+0xfc>
 8000562:	9800      	ldr	r0, [sp, #0]
 8000564:	9901      	ldr	r1, [sp, #4]
 8000566:	465b      	mov	r3, fp
 8000568:	1900      	adds	r0, r0, r4
 800056a:	4169      	adcs	r1, r5
 800056c:	2b00      	cmp	r3, #0
 800056e:	db24      	blt.n	80005ba <__udivmoddi4+0x162>
 8000570:	002b      	movs	r3, r5
 8000572:	465a      	mov	r2, fp
 8000574:	4644      	mov	r4, r8
 8000576:	40d3      	lsrs	r3, r2
 8000578:	002a      	movs	r2, r5
 800057a:	40e2      	lsrs	r2, r4
 800057c:	001c      	movs	r4, r3
 800057e:	465b      	mov	r3, fp
 8000580:	0015      	movs	r5, r2
 8000582:	2b00      	cmp	r3, #0
 8000584:	db2a      	blt.n	80005dc <__udivmoddi4+0x184>
 8000586:	0026      	movs	r6, r4
 8000588:	409e      	lsls	r6, r3
 800058a:	0033      	movs	r3, r6
 800058c:	0026      	movs	r6, r4
 800058e:	4647      	mov	r7, r8
 8000590:	40be      	lsls	r6, r7
 8000592:	0032      	movs	r2, r6
 8000594:	1a80      	subs	r0, r0, r2
 8000596:	4199      	sbcs	r1, r3
 8000598:	9000      	str	r0, [sp, #0]
 800059a:	9101      	str	r1, [sp, #4]
 800059c:	e79e      	b.n	80004dc <__udivmoddi4+0x84>
 800059e:	42a3      	cmp	r3, r4
 80005a0:	d8bc      	bhi.n	800051c <__udivmoddi4+0xc4>
 80005a2:	e782      	b.n	80004aa <__udivmoddi4+0x52>
 80005a4:	4642      	mov	r2, r8
 80005a6:	2320      	movs	r3, #32
 80005a8:	2100      	movs	r1, #0
 80005aa:	1a9b      	subs	r3, r3, r2
 80005ac:	2200      	movs	r2, #0
 80005ae:	9100      	str	r1, [sp, #0]
 80005b0:	9201      	str	r2, [sp, #4]
 80005b2:	2201      	movs	r2, #1
 80005b4:	40da      	lsrs	r2, r3
 80005b6:	9201      	str	r2, [sp, #4]
 80005b8:	e785      	b.n	80004c6 <__udivmoddi4+0x6e>
 80005ba:	4642      	mov	r2, r8
 80005bc:	2320      	movs	r3, #32
 80005be:	1a9b      	subs	r3, r3, r2
 80005c0:	002a      	movs	r2, r5
 80005c2:	4646      	mov	r6, r8
 80005c4:	409a      	lsls	r2, r3
 80005c6:	0023      	movs	r3, r4
 80005c8:	40f3      	lsrs	r3, r6
 80005ca:	4644      	mov	r4, r8
 80005cc:	4313      	orrs	r3, r2
 80005ce:	002a      	movs	r2, r5
 80005d0:	40e2      	lsrs	r2, r4
 80005d2:	001c      	movs	r4, r3
 80005d4:	465b      	mov	r3, fp
 80005d6:	0015      	movs	r5, r2
 80005d8:	2b00      	cmp	r3, #0
 80005da:	dad4      	bge.n	8000586 <__udivmoddi4+0x12e>
 80005dc:	4642      	mov	r2, r8
 80005de:	002f      	movs	r7, r5
 80005e0:	2320      	movs	r3, #32
 80005e2:	0026      	movs	r6, r4
 80005e4:	4097      	lsls	r7, r2
 80005e6:	1a9b      	subs	r3, r3, r2
 80005e8:	40de      	lsrs	r6, r3
 80005ea:	003b      	movs	r3, r7
 80005ec:	4333      	orrs	r3, r6
 80005ee:	e7cd      	b.n	800058c <__udivmoddi4+0x134>

080005f0 <__aeabi_fadd>:
 80005f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005f2:	46ce      	mov	lr, r9
 80005f4:	4647      	mov	r7, r8
 80005f6:	0243      	lsls	r3, r0, #9
 80005f8:	0a5a      	lsrs	r2, r3, #9
 80005fa:	024e      	lsls	r6, r1, #9
 80005fc:	0045      	lsls	r5, r0, #1
 80005fe:	0fc4      	lsrs	r4, r0, #31
 8000600:	0048      	lsls	r0, r1, #1
 8000602:	4691      	mov	r9, r2
 8000604:	0e2d      	lsrs	r5, r5, #24
 8000606:	0a72      	lsrs	r2, r6, #9
 8000608:	0e00      	lsrs	r0, r0, #24
 800060a:	4694      	mov	ip, r2
 800060c:	b580      	push	{r7, lr}
 800060e:	099b      	lsrs	r3, r3, #6
 8000610:	0fc9      	lsrs	r1, r1, #31
 8000612:	09b6      	lsrs	r6, r6, #6
 8000614:	1a2a      	subs	r2, r5, r0
 8000616:	428c      	cmp	r4, r1
 8000618:	d021      	beq.n	800065e <__aeabi_fadd+0x6e>
 800061a:	2a00      	cmp	r2, #0
 800061c:	dd0d      	ble.n	800063a <__aeabi_fadd+0x4a>
 800061e:	2800      	cmp	r0, #0
 8000620:	d12d      	bne.n	800067e <__aeabi_fadd+0x8e>
 8000622:	2e00      	cmp	r6, #0
 8000624:	d100      	bne.n	8000628 <__aeabi_fadd+0x38>
 8000626:	e08d      	b.n	8000744 <__aeabi_fadd+0x154>
 8000628:	1e51      	subs	r1, r2, #1
 800062a:	2a01      	cmp	r2, #1
 800062c:	d100      	bne.n	8000630 <__aeabi_fadd+0x40>
 800062e:	e11d      	b.n	800086c <__aeabi_fadd+0x27c>
 8000630:	2aff      	cmp	r2, #255	@ 0xff
 8000632:	d100      	bne.n	8000636 <__aeabi_fadd+0x46>
 8000634:	e0ab      	b.n	800078e <__aeabi_fadd+0x19e>
 8000636:	000a      	movs	r2, r1
 8000638:	e027      	b.n	800068a <__aeabi_fadd+0x9a>
 800063a:	2a00      	cmp	r2, #0
 800063c:	d04d      	beq.n	80006da <__aeabi_fadd+0xea>
 800063e:	1b42      	subs	r2, r0, r5
 8000640:	2d00      	cmp	r5, #0
 8000642:	d000      	beq.n	8000646 <__aeabi_fadd+0x56>
 8000644:	e0cc      	b.n	80007e0 <__aeabi_fadd+0x1f0>
 8000646:	2b00      	cmp	r3, #0
 8000648:	d100      	bne.n	800064c <__aeabi_fadd+0x5c>
 800064a:	e079      	b.n	8000740 <__aeabi_fadd+0x150>
 800064c:	1e54      	subs	r4, r2, #1
 800064e:	2a01      	cmp	r2, #1
 8000650:	d100      	bne.n	8000654 <__aeabi_fadd+0x64>
 8000652:	e128      	b.n	80008a6 <__aeabi_fadd+0x2b6>
 8000654:	2aff      	cmp	r2, #255	@ 0xff
 8000656:	d100      	bne.n	800065a <__aeabi_fadd+0x6a>
 8000658:	e097      	b.n	800078a <__aeabi_fadd+0x19a>
 800065a:	0022      	movs	r2, r4
 800065c:	e0c5      	b.n	80007ea <__aeabi_fadd+0x1fa>
 800065e:	2a00      	cmp	r2, #0
 8000660:	dc00      	bgt.n	8000664 <__aeabi_fadd+0x74>
 8000662:	e096      	b.n	8000792 <__aeabi_fadd+0x1a2>
 8000664:	2800      	cmp	r0, #0
 8000666:	d04f      	beq.n	8000708 <__aeabi_fadd+0x118>
 8000668:	2dff      	cmp	r5, #255	@ 0xff
 800066a:	d100      	bne.n	800066e <__aeabi_fadd+0x7e>
 800066c:	e08f      	b.n	800078e <__aeabi_fadd+0x19e>
 800066e:	2180      	movs	r1, #128	@ 0x80
 8000670:	04c9      	lsls	r1, r1, #19
 8000672:	430e      	orrs	r6, r1
 8000674:	2a1b      	cmp	r2, #27
 8000676:	dd51      	ble.n	800071c <__aeabi_fadd+0x12c>
 8000678:	002a      	movs	r2, r5
 800067a:	3301      	adds	r3, #1
 800067c:	e018      	b.n	80006b0 <__aeabi_fadd+0xc0>
 800067e:	2dff      	cmp	r5, #255	@ 0xff
 8000680:	d100      	bne.n	8000684 <__aeabi_fadd+0x94>
 8000682:	e084      	b.n	800078e <__aeabi_fadd+0x19e>
 8000684:	2180      	movs	r1, #128	@ 0x80
 8000686:	04c9      	lsls	r1, r1, #19
 8000688:	430e      	orrs	r6, r1
 800068a:	2101      	movs	r1, #1
 800068c:	2a1b      	cmp	r2, #27
 800068e:	dc08      	bgt.n	80006a2 <__aeabi_fadd+0xb2>
 8000690:	0031      	movs	r1, r6
 8000692:	2020      	movs	r0, #32
 8000694:	40d1      	lsrs	r1, r2
 8000696:	1a82      	subs	r2, r0, r2
 8000698:	4096      	lsls	r6, r2
 800069a:	0032      	movs	r2, r6
 800069c:	1e50      	subs	r0, r2, #1
 800069e:	4182      	sbcs	r2, r0
 80006a0:	4311      	orrs	r1, r2
 80006a2:	1a5b      	subs	r3, r3, r1
 80006a4:	015a      	lsls	r2, r3, #5
 80006a6:	d459      	bmi.n	800075c <__aeabi_fadd+0x16c>
 80006a8:	2107      	movs	r1, #7
 80006aa:	002a      	movs	r2, r5
 80006ac:	4019      	ands	r1, r3
 80006ae:	d049      	beq.n	8000744 <__aeabi_fadd+0x154>
 80006b0:	210f      	movs	r1, #15
 80006b2:	4019      	ands	r1, r3
 80006b4:	2904      	cmp	r1, #4
 80006b6:	d000      	beq.n	80006ba <__aeabi_fadd+0xca>
 80006b8:	3304      	adds	r3, #4
 80006ba:	0159      	lsls	r1, r3, #5
 80006bc:	d542      	bpl.n	8000744 <__aeabi_fadd+0x154>
 80006be:	1c50      	adds	r0, r2, #1
 80006c0:	2afe      	cmp	r2, #254	@ 0xfe
 80006c2:	d03a      	beq.n	800073a <__aeabi_fadd+0x14a>
 80006c4:	019b      	lsls	r3, r3, #6
 80006c6:	b2c0      	uxtb	r0, r0
 80006c8:	0a5b      	lsrs	r3, r3, #9
 80006ca:	05c0      	lsls	r0, r0, #23
 80006cc:	4318      	orrs	r0, r3
 80006ce:	07e4      	lsls	r4, r4, #31
 80006d0:	4320      	orrs	r0, r4
 80006d2:	bcc0      	pop	{r6, r7}
 80006d4:	46b9      	mov	r9, r7
 80006d6:	46b0      	mov	r8, r6
 80006d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80006da:	20fe      	movs	r0, #254	@ 0xfe
 80006dc:	4680      	mov	r8, r0
 80006de:	1c6f      	adds	r7, r5, #1
 80006e0:	0038      	movs	r0, r7
 80006e2:	4647      	mov	r7, r8
 80006e4:	4207      	tst	r7, r0
 80006e6:	d000      	beq.n	80006ea <__aeabi_fadd+0xfa>
 80006e8:	e08e      	b.n	8000808 <__aeabi_fadd+0x218>
 80006ea:	2d00      	cmp	r5, #0
 80006ec:	d000      	beq.n	80006f0 <__aeabi_fadd+0x100>
 80006ee:	e0b4      	b.n	800085a <__aeabi_fadd+0x26a>
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d100      	bne.n	80006f6 <__aeabi_fadd+0x106>
 80006f4:	e0db      	b.n	80008ae <__aeabi_fadd+0x2be>
 80006f6:	2e00      	cmp	r6, #0
 80006f8:	d06c      	beq.n	80007d4 <__aeabi_fadd+0x1e4>
 80006fa:	1b98      	subs	r0, r3, r6
 80006fc:	0145      	lsls	r5, r0, #5
 80006fe:	d400      	bmi.n	8000702 <__aeabi_fadd+0x112>
 8000700:	e0f7      	b.n	80008f2 <__aeabi_fadd+0x302>
 8000702:	000c      	movs	r4, r1
 8000704:	1af3      	subs	r3, r6, r3
 8000706:	e03d      	b.n	8000784 <__aeabi_fadd+0x194>
 8000708:	2e00      	cmp	r6, #0
 800070a:	d01b      	beq.n	8000744 <__aeabi_fadd+0x154>
 800070c:	1e51      	subs	r1, r2, #1
 800070e:	2a01      	cmp	r2, #1
 8000710:	d100      	bne.n	8000714 <__aeabi_fadd+0x124>
 8000712:	e082      	b.n	800081a <__aeabi_fadd+0x22a>
 8000714:	2aff      	cmp	r2, #255	@ 0xff
 8000716:	d03a      	beq.n	800078e <__aeabi_fadd+0x19e>
 8000718:	000a      	movs	r2, r1
 800071a:	e7ab      	b.n	8000674 <__aeabi_fadd+0x84>
 800071c:	0031      	movs	r1, r6
 800071e:	2020      	movs	r0, #32
 8000720:	40d1      	lsrs	r1, r2
 8000722:	1a82      	subs	r2, r0, r2
 8000724:	4096      	lsls	r6, r2
 8000726:	0032      	movs	r2, r6
 8000728:	1e50      	subs	r0, r2, #1
 800072a:	4182      	sbcs	r2, r0
 800072c:	430a      	orrs	r2, r1
 800072e:	189b      	adds	r3, r3, r2
 8000730:	015a      	lsls	r2, r3, #5
 8000732:	d5b9      	bpl.n	80006a8 <__aeabi_fadd+0xb8>
 8000734:	1c6a      	adds	r2, r5, #1
 8000736:	2dfe      	cmp	r5, #254	@ 0xfe
 8000738:	d175      	bne.n	8000826 <__aeabi_fadd+0x236>
 800073a:	20ff      	movs	r0, #255	@ 0xff
 800073c:	2300      	movs	r3, #0
 800073e:	e7c4      	b.n	80006ca <__aeabi_fadd+0xda>
 8000740:	000c      	movs	r4, r1
 8000742:	0033      	movs	r3, r6
 8000744:	08db      	lsrs	r3, r3, #3
 8000746:	2aff      	cmp	r2, #255	@ 0xff
 8000748:	d146      	bne.n	80007d8 <__aeabi_fadd+0x1e8>
 800074a:	2b00      	cmp	r3, #0
 800074c:	d0f5      	beq.n	800073a <__aeabi_fadd+0x14a>
 800074e:	2280      	movs	r2, #128	@ 0x80
 8000750:	03d2      	lsls	r2, r2, #15
 8000752:	4313      	orrs	r3, r2
 8000754:	025b      	lsls	r3, r3, #9
 8000756:	20ff      	movs	r0, #255	@ 0xff
 8000758:	0a5b      	lsrs	r3, r3, #9
 800075a:	e7b6      	b.n	80006ca <__aeabi_fadd+0xda>
 800075c:	019f      	lsls	r7, r3, #6
 800075e:	09bf      	lsrs	r7, r7, #6
 8000760:	0038      	movs	r0, r7
 8000762:	f000 fb99 	bl	8000e98 <__clzsi2>
 8000766:	3805      	subs	r0, #5
 8000768:	4087      	lsls	r7, r0
 800076a:	4285      	cmp	r5, r0
 800076c:	dc24      	bgt.n	80007b8 <__aeabi_fadd+0x1c8>
 800076e:	003b      	movs	r3, r7
 8000770:	2120      	movs	r1, #32
 8000772:	1b42      	subs	r2, r0, r5
 8000774:	3201      	adds	r2, #1
 8000776:	40d3      	lsrs	r3, r2
 8000778:	1a8a      	subs	r2, r1, r2
 800077a:	4097      	lsls	r7, r2
 800077c:	1e7a      	subs	r2, r7, #1
 800077e:	4197      	sbcs	r7, r2
 8000780:	2200      	movs	r2, #0
 8000782:	433b      	orrs	r3, r7
 8000784:	0759      	lsls	r1, r3, #29
 8000786:	d193      	bne.n	80006b0 <__aeabi_fadd+0xc0>
 8000788:	e797      	b.n	80006ba <__aeabi_fadd+0xca>
 800078a:	000c      	movs	r4, r1
 800078c:	0033      	movs	r3, r6
 800078e:	08db      	lsrs	r3, r3, #3
 8000790:	e7db      	b.n	800074a <__aeabi_fadd+0x15a>
 8000792:	2a00      	cmp	r2, #0
 8000794:	d014      	beq.n	80007c0 <__aeabi_fadd+0x1d0>
 8000796:	1b42      	subs	r2, r0, r5
 8000798:	2d00      	cmp	r5, #0
 800079a:	d14b      	bne.n	8000834 <__aeabi_fadd+0x244>
 800079c:	2b00      	cmp	r3, #0
 800079e:	d0d0      	beq.n	8000742 <__aeabi_fadd+0x152>
 80007a0:	1e51      	subs	r1, r2, #1
 80007a2:	2a01      	cmp	r2, #1
 80007a4:	d100      	bne.n	80007a8 <__aeabi_fadd+0x1b8>
 80007a6:	e09e      	b.n	80008e6 <__aeabi_fadd+0x2f6>
 80007a8:	2aff      	cmp	r2, #255	@ 0xff
 80007aa:	d0ef      	beq.n	800078c <__aeabi_fadd+0x19c>
 80007ac:	000a      	movs	r2, r1
 80007ae:	2a1b      	cmp	r2, #27
 80007b0:	dd5f      	ble.n	8000872 <__aeabi_fadd+0x282>
 80007b2:	0002      	movs	r2, r0
 80007b4:	1c73      	adds	r3, r6, #1
 80007b6:	e77b      	b.n	80006b0 <__aeabi_fadd+0xc0>
 80007b8:	4b50      	ldr	r3, [pc, #320]	@ (80008fc <__aeabi_fadd+0x30c>)
 80007ba:	1a2a      	subs	r2, r5, r0
 80007bc:	403b      	ands	r3, r7
 80007be:	e7e1      	b.n	8000784 <__aeabi_fadd+0x194>
 80007c0:	21fe      	movs	r1, #254	@ 0xfe
 80007c2:	1c6a      	adds	r2, r5, #1
 80007c4:	4211      	tst	r1, r2
 80007c6:	d13b      	bne.n	8000840 <__aeabi_fadd+0x250>
 80007c8:	2d00      	cmp	r5, #0
 80007ca:	d15d      	bne.n	8000888 <__aeabi_fadd+0x298>
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d07f      	beq.n	80008d0 <__aeabi_fadd+0x2e0>
 80007d0:	2e00      	cmp	r6, #0
 80007d2:	d17f      	bne.n	80008d4 <__aeabi_fadd+0x2e4>
 80007d4:	2200      	movs	r2, #0
 80007d6:	08db      	lsrs	r3, r3, #3
 80007d8:	025b      	lsls	r3, r3, #9
 80007da:	0a5b      	lsrs	r3, r3, #9
 80007dc:	b2d0      	uxtb	r0, r2
 80007de:	e774      	b.n	80006ca <__aeabi_fadd+0xda>
 80007e0:	28ff      	cmp	r0, #255	@ 0xff
 80007e2:	d0d2      	beq.n	800078a <__aeabi_fadd+0x19a>
 80007e4:	2480      	movs	r4, #128	@ 0x80
 80007e6:	04e4      	lsls	r4, r4, #19
 80007e8:	4323      	orrs	r3, r4
 80007ea:	2401      	movs	r4, #1
 80007ec:	2a1b      	cmp	r2, #27
 80007ee:	dc07      	bgt.n	8000800 <__aeabi_fadd+0x210>
 80007f0:	001c      	movs	r4, r3
 80007f2:	2520      	movs	r5, #32
 80007f4:	40d4      	lsrs	r4, r2
 80007f6:	1aaa      	subs	r2, r5, r2
 80007f8:	4093      	lsls	r3, r2
 80007fa:	1e5a      	subs	r2, r3, #1
 80007fc:	4193      	sbcs	r3, r2
 80007fe:	431c      	orrs	r4, r3
 8000800:	1b33      	subs	r3, r6, r4
 8000802:	0005      	movs	r5, r0
 8000804:	000c      	movs	r4, r1
 8000806:	e74d      	b.n	80006a4 <__aeabi_fadd+0xb4>
 8000808:	1b9f      	subs	r7, r3, r6
 800080a:	017a      	lsls	r2, r7, #5
 800080c:	d422      	bmi.n	8000854 <__aeabi_fadd+0x264>
 800080e:	2f00      	cmp	r7, #0
 8000810:	d1a6      	bne.n	8000760 <__aeabi_fadd+0x170>
 8000812:	2400      	movs	r4, #0
 8000814:	2000      	movs	r0, #0
 8000816:	2300      	movs	r3, #0
 8000818:	e757      	b.n	80006ca <__aeabi_fadd+0xda>
 800081a:	199b      	adds	r3, r3, r6
 800081c:	2501      	movs	r5, #1
 800081e:	3201      	adds	r2, #1
 8000820:	0159      	lsls	r1, r3, #5
 8000822:	d400      	bmi.n	8000826 <__aeabi_fadd+0x236>
 8000824:	e740      	b.n	80006a8 <__aeabi_fadd+0xb8>
 8000826:	2101      	movs	r1, #1
 8000828:	4835      	ldr	r0, [pc, #212]	@ (8000900 <__aeabi_fadd+0x310>)
 800082a:	4019      	ands	r1, r3
 800082c:	085b      	lsrs	r3, r3, #1
 800082e:	4003      	ands	r3, r0
 8000830:	430b      	orrs	r3, r1
 8000832:	e7a7      	b.n	8000784 <__aeabi_fadd+0x194>
 8000834:	28ff      	cmp	r0, #255	@ 0xff
 8000836:	d0a9      	beq.n	800078c <__aeabi_fadd+0x19c>
 8000838:	2180      	movs	r1, #128	@ 0x80
 800083a:	04c9      	lsls	r1, r1, #19
 800083c:	430b      	orrs	r3, r1
 800083e:	e7b6      	b.n	80007ae <__aeabi_fadd+0x1be>
 8000840:	2aff      	cmp	r2, #255	@ 0xff
 8000842:	d100      	bne.n	8000846 <__aeabi_fadd+0x256>
 8000844:	e779      	b.n	800073a <__aeabi_fadd+0x14a>
 8000846:	199b      	adds	r3, r3, r6
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	0759      	lsls	r1, r3, #29
 800084c:	d000      	beq.n	8000850 <__aeabi_fadd+0x260>
 800084e:	e72f      	b.n	80006b0 <__aeabi_fadd+0xc0>
 8000850:	08db      	lsrs	r3, r3, #3
 8000852:	e7c1      	b.n	80007d8 <__aeabi_fadd+0x1e8>
 8000854:	000c      	movs	r4, r1
 8000856:	1af7      	subs	r7, r6, r3
 8000858:	e782      	b.n	8000760 <__aeabi_fadd+0x170>
 800085a:	2b00      	cmp	r3, #0
 800085c:	d12c      	bne.n	80008b8 <__aeabi_fadd+0x2c8>
 800085e:	2e00      	cmp	r6, #0
 8000860:	d193      	bne.n	800078a <__aeabi_fadd+0x19a>
 8000862:	2380      	movs	r3, #128	@ 0x80
 8000864:	2400      	movs	r4, #0
 8000866:	20ff      	movs	r0, #255	@ 0xff
 8000868:	03db      	lsls	r3, r3, #15
 800086a:	e72e      	b.n	80006ca <__aeabi_fadd+0xda>
 800086c:	2501      	movs	r5, #1
 800086e:	1b9b      	subs	r3, r3, r6
 8000870:	e718      	b.n	80006a4 <__aeabi_fadd+0xb4>
 8000872:	0019      	movs	r1, r3
 8000874:	2520      	movs	r5, #32
 8000876:	40d1      	lsrs	r1, r2
 8000878:	1aaa      	subs	r2, r5, r2
 800087a:	4093      	lsls	r3, r2
 800087c:	1e5a      	subs	r2, r3, #1
 800087e:	4193      	sbcs	r3, r2
 8000880:	430b      	orrs	r3, r1
 8000882:	0005      	movs	r5, r0
 8000884:	199b      	adds	r3, r3, r6
 8000886:	e753      	b.n	8000730 <__aeabi_fadd+0x140>
 8000888:	2b00      	cmp	r3, #0
 800088a:	d100      	bne.n	800088e <__aeabi_fadd+0x29e>
 800088c:	e77e      	b.n	800078c <__aeabi_fadd+0x19c>
 800088e:	2e00      	cmp	r6, #0
 8000890:	d100      	bne.n	8000894 <__aeabi_fadd+0x2a4>
 8000892:	e77c      	b.n	800078e <__aeabi_fadd+0x19e>
 8000894:	2280      	movs	r2, #128	@ 0x80
 8000896:	03d2      	lsls	r2, r2, #15
 8000898:	4591      	cmp	r9, r2
 800089a:	d302      	bcc.n	80008a2 <__aeabi_fadd+0x2b2>
 800089c:	4594      	cmp	ip, r2
 800089e:	d200      	bcs.n	80008a2 <__aeabi_fadd+0x2b2>
 80008a0:	0033      	movs	r3, r6
 80008a2:	08db      	lsrs	r3, r3, #3
 80008a4:	e753      	b.n	800074e <__aeabi_fadd+0x15e>
 80008a6:	000c      	movs	r4, r1
 80008a8:	1af3      	subs	r3, r6, r3
 80008aa:	3501      	adds	r5, #1
 80008ac:	e6fa      	b.n	80006a4 <__aeabi_fadd+0xb4>
 80008ae:	2e00      	cmp	r6, #0
 80008b0:	d0af      	beq.n	8000812 <__aeabi_fadd+0x222>
 80008b2:	000c      	movs	r4, r1
 80008b4:	0033      	movs	r3, r6
 80008b6:	e78d      	b.n	80007d4 <__aeabi_fadd+0x1e4>
 80008b8:	2e00      	cmp	r6, #0
 80008ba:	d100      	bne.n	80008be <__aeabi_fadd+0x2ce>
 80008bc:	e767      	b.n	800078e <__aeabi_fadd+0x19e>
 80008be:	2280      	movs	r2, #128	@ 0x80
 80008c0:	03d2      	lsls	r2, r2, #15
 80008c2:	4591      	cmp	r9, r2
 80008c4:	d3ed      	bcc.n	80008a2 <__aeabi_fadd+0x2b2>
 80008c6:	4594      	cmp	ip, r2
 80008c8:	d2eb      	bcs.n	80008a2 <__aeabi_fadd+0x2b2>
 80008ca:	000c      	movs	r4, r1
 80008cc:	0033      	movs	r3, r6
 80008ce:	e7e8      	b.n	80008a2 <__aeabi_fadd+0x2b2>
 80008d0:	0033      	movs	r3, r6
 80008d2:	e77f      	b.n	80007d4 <__aeabi_fadd+0x1e4>
 80008d4:	199b      	adds	r3, r3, r6
 80008d6:	2200      	movs	r2, #0
 80008d8:	0159      	lsls	r1, r3, #5
 80008da:	d5b9      	bpl.n	8000850 <__aeabi_fadd+0x260>
 80008dc:	4a07      	ldr	r2, [pc, #28]	@ (80008fc <__aeabi_fadd+0x30c>)
 80008de:	4013      	ands	r3, r2
 80008e0:	08db      	lsrs	r3, r3, #3
 80008e2:	2201      	movs	r2, #1
 80008e4:	e778      	b.n	80007d8 <__aeabi_fadd+0x1e8>
 80008e6:	199b      	adds	r3, r3, r6
 80008e8:	3201      	adds	r2, #1
 80008ea:	3501      	adds	r5, #1
 80008ec:	0159      	lsls	r1, r3, #5
 80008ee:	d49a      	bmi.n	8000826 <__aeabi_fadd+0x236>
 80008f0:	e6da      	b.n	80006a8 <__aeabi_fadd+0xb8>
 80008f2:	1e03      	subs	r3, r0, #0
 80008f4:	d08d      	beq.n	8000812 <__aeabi_fadd+0x222>
 80008f6:	08db      	lsrs	r3, r3, #3
 80008f8:	e76e      	b.n	80007d8 <__aeabi_fadd+0x1e8>
 80008fa:	46c0      	nop			@ (mov r8, r8)
 80008fc:	fbffffff 	.word	0xfbffffff
 8000900:	7dffffff 	.word	0x7dffffff

08000904 <__aeabi_fdiv>:
 8000904:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000906:	464f      	mov	r7, r9
 8000908:	4646      	mov	r6, r8
 800090a:	46d6      	mov	lr, sl
 800090c:	0244      	lsls	r4, r0, #9
 800090e:	b5c0      	push	{r6, r7, lr}
 8000910:	0047      	lsls	r7, r0, #1
 8000912:	1c0e      	adds	r6, r1, #0
 8000914:	0a64      	lsrs	r4, r4, #9
 8000916:	0e3f      	lsrs	r7, r7, #24
 8000918:	0fc5      	lsrs	r5, r0, #31
 800091a:	2f00      	cmp	r7, #0
 800091c:	d03c      	beq.n	8000998 <__aeabi_fdiv+0x94>
 800091e:	2fff      	cmp	r7, #255	@ 0xff
 8000920:	d042      	beq.n	80009a8 <__aeabi_fdiv+0xa4>
 8000922:	2300      	movs	r3, #0
 8000924:	2280      	movs	r2, #128	@ 0x80
 8000926:	4699      	mov	r9, r3
 8000928:	469a      	mov	sl, r3
 800092a:	00e4      	lsls	r4, r4, #3
 800092c:	04d2      	lsls	r2, r2, #19
 800092e:	4314      	orrs	r4, r2
 8000930:	3f7f      	subs	r7, #127	@ 0x7f
 8000932:	0273      	lsls	r3, r6, #9
 8000934:	0a5b      	lsrs	r3, r3, #9
 8000936:	4698      	mov	r8, r3
 8000938:	0073      	lsls	r3, r6, #1
 800093a:	0e1b      	lsrs	r3, r3, #24
 800093c:	0ff6      	lsrs	r6, r6, #31
 800093e:	2b00      	cmp	r3, #0
 8000940:	d01b      	beq.n	800097a <__aeabi_fdiv+0x76>
 8000942:	2bff      	cmp	r3, #255	@ 0xff
 8000944:	d013      	beq.n	800096e <__aeabi_fdiv+0x6a>
 8000946:	4642      	mov	r2, r8
 8000948:	2180      	movs	r1, #128	@ 0x80
 800094a:	00d2      	lsls	r2, r2, #3
 800094c:	04c9      	lsls	r1, r1, #19
 800094e:	4311      	orrs	r1, r2
 8000950:	4688      	mov	r8, r1
 8000952:	2000      	movs	r0, #0
 8000954:	3b7f      	subs	r3, #127	@ 0x7f
 8000956:	0029      	movs	r1, r5
 8000958:	1aff      	subs	r7, r7, r3
 800095a:	464b      	mov	r3, r9
 800095c:	4071      	eors	r1, r6
 800095e:	b2c9      	uxtb	r1, r1
 8000960:	2b0f      	cmp	r3, #15
 8000962:	d900      	bls.n	8000966 <__aeabi_fdiv+0x62>
 8000964:	e0b5      	b.n	8000ad2 <__aeabi_fdiv+0x1ce>
 8000966:	4a74      	ldr	r2, [pc, #464]	@ (8000b38 <__aeabi_fdiv+0x234>)
 8000968:	009b      	lsls	r3, r3, #2
 800096a:	58d3      	ldr	r3, [r2, r3]
 800096c:	469f      	mov	pc, r3
 800096e:	4643      	mov	r3, r8
 8000970:	2b00      	cmp	r3, #0
 8000972:	d13f      	bne.n	80009f4 <__aeabi_fdiv+0xf0>
 8000974:	3fff      	subs	r7, #255	@ 0xff
 8000976:	3302      	adds	r3, #2
 8000978:	e003      	b.n	8000982 <__aeabi_fdiv+0x7e>
 800097a:	4643      	mov	r3, r8
 800097c:	2b00      	cmp	r3, #0
 800097e:	d12d      	bne.n	80009dc <__aeabi_fdiv+0xd8>
 8000980:	2301      	movs	r3, #1
 8000982:	0029      	movs	r1, r5
 8000984:	464a      	mov	r2, r9
 8000986:	4071      	eors	r1, r6
 8000988:	b2c9      	uxtb	r1, r1
 800098a:	431a      	orrs	r2, r3
 800098c:	2a0e      	cmp	r2, #14
 800098e:	d838      	bhi.n	8000a02 <__aeabi_fdiv+0xfe>
 8000990:	486a      	ldr	r0, [pc, #424]	@ (8000b3c <__aeabi_fdiv+0x238>)
 8000992:	0092      	lsls	r2, r2, #2
 8000994:	5882      	ldr	r2, [r0, r2]
 8000996:	4697      	mov	pc, r2
 8000998:	2c00      	cmp	r4, #0
 800099a:	d113      	bne.n	80009c4 <__aeabi_fdiv+0xc0>
 800099c:	2304      	movs	r3, #4
 800099e:	4699      	mov	r9, r3
 80009a0:	3b03      	subs	r3, #3
 80009a2:	2700      	movs	r7, #0
 80009a4:	469a      	mov	sl, r3
 80009a6:	e7c4      	b.n	8000932 <__aeabi_fdiv+0x2e>
 80009a8:	2c00      	cmp	r4, #0
 80009aa:	d105      	bne.n	80009b8 <__aeabi_fdiv+0xb4>
 80009ac:	2308      	movs	r3, #8
 80009ae:	4699      	mov	r9, r3
 80009b0:	3b06      	subs	r3, #6
 80009b2:	27ff      	movs	r7, #255	@ 0xff
 80009b4:	469a      	mov	sl, r3
 80009b6:	e7bc      	b.n	8000932 <__aeabi_fdiv+0x2e>
 80009b8:	230c      	movs	r3, #12
 80009ba:	4699      	mov	r9, r3
 80009bc:	3b09      	subs	r3, #9
 80009be:	27ff      	movs	r7, #255	@ 0xff
 80009c0:	469a      	mov	sl, r3
 80009c2:	e7b6      	b.n	8000932 <__aeabi_fdiv+0x2e>
 80009c4:	0020      	movs	r0, r4
 80009c6:	f000 fa67 	bl	8000e98 <__clzsi2>
 80009ca:	2776      	movs	r7, #118	@ 0x76
 80009cc:	1f43      	subs	r3, r0, #5
 80009ce:	409c      	lsls	r4, r3
 80009d0:	2300      	movs	r3, #0
 80009d2:	427f      	negs	r7, r7
 80009d4:	4699      	mov	r9, r3
 80009d6:	469a      	mov	sl, r3
 80009d8:	1a3f      	subs	r7, r7, r0
 80009da:	e7aa      	b.n	8000932 <__aeabi_fdiv+0x2e>
 80009dc:	4640      	mov	r0, r8
 80009de:	f000 fa5b 	bl	8000e98 <__clzsi2>
 80009e2:	4642      	mov	r2, r8
 80009e4:	1f43      	subs	r3, r0, #5
 80009e6:	409a      	lsls	r2, r3
 80009e8:	2376      	movs	r3, #118	@ 0x76
 80009ea:	425b      	negs	r3, r3
 80009ec:	1a1b      	subs	r3, r3, r0
 80009ee:	4690      	mov	r8, r2
 80009f0:	2000      	movs	r0, #0
 80009f2:	e7b0      	b.n	8000956 <__aeabi_fdiv+0x52>
 80009f4:	2303      	movs	r3, #3
 80009f6:	464a      	mov	r2, r9
 80009f8:	431a      	orrs	r2, r3
 80009fa:	4691      	mov	r9, r2
 80009fc:	2003      	movs	r0, #3
 80009fe:	33fc      	adds	r3, #252	@ 0xfc
 8000a00:	e7a9      	b.n	8000956 <__aeabi_fdiv+0x52>
 8000a02:	000d      	movs	r5, r1
 8000a04:	20ff      	movs	r0, #255	@ 0xff
 8000a06:	2200      	movs	r2, #0
 8000a08:	05c0      	lsls	r0, r0, #23
 8000a0a:	07ed      	lsls	r5, r5, #31
 8000a0c:	4310      	orrs	r0, r2
 8000a0e:	4328      	orrs	r0, r5
 8000a10:	bce0      	pop	{r5, r6, r7}
 8000a12:	46ba      	mov	sl, r7
 8000a14:	46b1      	mov	r9, r6
 8000a16:	46a8      	mov	r8, r5
 8000a18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a1a:	000d      	movs	r5, r1
 8000a1c:	2000      	movs	r0, #0
 8000a1e:	2200      	movs	r2, #0
 8000a20:	e7f2      	b.n	8000a08 <__aeabi_fdiv+0x104>
 8000a22:	4653      	mov	r3, sl
 8000a24:	2b02      	cmp	r3, #2
 8000a26:	d0ed      	beq.n	8000a04 <__aeabi_fdiv+0x100>
 8000a28:	2b03      	cmp	r3, #3
 8000a2a:	d033      	beq.n	8000a94 <__aeabi_fdiv+0x190>
 8000a2c:	46a0      	mov	r8, r4
 8000a2e:	2b01      	cmp	r3, #1
 8000a30:	d105      	bne.n	8000a3e <__aeabi_fdiv+0x13a>
 8000a32:	2000      	movs	r0, #0
 8000a34:	2200      	movs	r2, #0
 8000a36:	e7e7      	b.n	8000a08 <__aeabi_fdiv+0x104>
 8000a38:	0035      	movs	r5, r6
 8000a3a:	2803      	cmp	r0, #3
 8000a3c:	d07a      	beq.n	8000b34 <__aeabi_fdiv+0x230>
 8000a3e:	003b      	movs	r3, r7
 8000a40:	337f      	adds	r3, #127	@ 0x7f
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	dd2d      	ble.n	8000aa2 <__aeabi_fdiv+0x19e>
 8000a46:	4642      	mov	r2, r8
 8000a48:	0752      	lsls	r2, r2, #29
 8000a4a:	d007      	beq.n	8000a5c <__aeabi_fdiv+0x158>
 8000a4c:	220f      	movs	r2, #15
 8000a4e:	4641      	mov	r1, r8
 8000a50:	400a      	ands	r2, r1
 8000a52:	2a04      	cmp	r2, #4
 8000a54:	d002      	beq.n	8000a5c <__aeabi_fdiv+0x158>
 8000a56:	2204      	movs	r2, #4
 8000a58:	4694      	mov	ip, r2
 8000a5a:	44e0      	add	r8, ip
 8000a5c:	4642      	mov	r2, r8
 8000a5e:	0112      	lsls	r2, r2, #4
 8000a60:	d505      	bpl.n	8000a6e <__aeabi_fdiv+0x16a>
 8000a62:	4642      	mov	r2, r8
 8000a64:	4b36      	ldr	r3, [pc, #216]	@ (8000b40 <__aeabi_fdiv+0x23c>)
 8000a66:	401a      	ands	r2, r3
 8000a68:	003b      	movs	r3, r7
 8000a6a:	4690      	mov	r8, r2
 8000a6c:	3380      	adds	r3, #128	@ 0x80
 8000a6e:	2bfe      	cmp	r3, #254	@ 0xfe
 8000a70:	dcc8      	bgt.n	8000a04 <__aeabi_fdiv+0x100>
 8000a72:	4642      	mov	r2, r8
 8000a74:	0192      	lsls	r2, r2, #6
 8000a76:	0a52      	lsrs	r2, r2, #9
 8000a78:	b2d8      	uxtb	r0, r3
 8000a7a:	e7c5      	b.n	8000a08 <__aeabi_fdiv+0x104>
 8000a7c:	2280      	movs	r2, #128	@ 0x80
 8000a7e:	2500      	movs	r5, #0
 8000a80:	20ff      	movs	r0, #255	@ 0xff
 8000a82:	03d2      	lsls	r2, r2, #15
 8000a84:	e7c0      	b.n	8000a08 <__aeabi_fdiv+0x104>
 8000a86:	2280      	movs	r2, #128	@ 0x80
 8000a88:	03d2      	lsls	r2, r2, #15
 8000a8a:	4214      	tst	r4, r2
 8000a8c:	d002      	beq.n	8000a94 <__aeabi_fdiv+0x190>
 8000a8e:	4643      	mov	r3, r8
 8000a90:	4213      	tst	r3, r2
 8000a92:	d049      	beq.n	8000b28 <__aeabi_fdiv+0x224>
 8000a94:	2280      	movs	r2, #128	@ 0x80
 8000a96:	03d2      	lsls	r2, r2, #15
 8000a98:	4322      	orrs	r2, r4
 8000a9a:	0252      	lsls	r2, r2, #9
 8000a9c:	20ff      	movs	r0, #255	@ 0xff
 8000a9e:	0a52      	lsrs	r2, r2, #9
 8000aa0:	e7b2      	b.n	8000a08 <__aeabi_fdiv+0x104>
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	1ad3      	subs	r3, r2, r3
 8000aa6:	2b1b      	cmp	r3, #27
 8000aa8:	dcc3      	bgt.n	8000a32 <__aeabi_fdiv+0x12e>
 8000aaa:	4642      	mov	r2, r8
 8000aac:	40da      	lsrs	r2, r3
 8000aae:	4643      	mov	r3, r8
 8000ab0:	379e      	adds	r7, #158	@ 0x9e
 8000ab2:	40bb      	lsls	r3, r7
 8000ab4:	1e59      	subs	r1, r3, #1
 8000ab6:	418b      	sbcs	r3, r1
 8000ab8:	431a      	orrs	r2, r3
 8000aba:	0753      	lsls	r3, r2, #29
 8000abc:	d004      	beq.n	8000ac8 <__aeabi_fdiv+0x1c4>
 8000abe:	230f      	movs	r3, #15
 8000ac0:	4013      	ands	r3, r2
 8000ac2:	2b04      	cmp	r3, #4
 8000ac4:	d000      	beq.n	8000ac8 <__aeabi_fdiv+0x1c4>
 8000ac6:	3204      	adds	r2, #4
 8000ac8:	0153      	lsls	r3, r2, #5
 8000aca:	d529      	bpl.n	8000b20 <__aeabi_fdiv+0x21c>
 8000acc:	2001      	movs	r0, #1
 8000ace:	2200      	movs	r2, #0
 8000ad0:	e79a      	b.n	8000a08 <__aeabi_fdiv+0x104>
 8000ad2:	4642      	mov	r2, r8
 8000ad4:	0163      	lsls	r3, r4, #5
 8000ad6:	0155      	lsls	r5, r2, #5
 8000ad8:	42ab      	cmp	r3, r5
 8000ada:	d215      	bcs.n	8000b08 <__aeabi_fdiv+0x204>
 8000adc:	201b      	movs	r0, #27
 8000ade:	2200      	movs	r2, #0
 8000ae0:	3f01      	subs	r7, #1
 8000ae2:	2601      	movs	r6, #1
 8000ae4:	001c      	movs	r4, r3
 8000ae6:	0052      	lsls	r2, r2, #1
 8000ae8:	005b      	lsls	r3, r3, #1
 8000aea:	2c00      	cmp	r4, #0
 8000aec:	db01      	blt.n	8000af2 <__aeabi_fdiv+0x1ee>
 8000aee:	429d      	cmp	r5, r3
 8000af0:	d801      	bhi.n	8000af6 <__aeabi_fdiv+0x1f2>
 8000af2:	1b5b      	subs	r3, r3, r5
 8000af4:	4332      	orrs	r2, r6
 8000af6:	3801      	subs	r0, #1
 8000af8:	2800      	cmp	r0, #0
 8000afa:	d1f3      	bne.n	8000ae4 <__aeabi_fdiv+0x1e0>
 8000afc:	1e58      	subs	r0, r3, #1
 8000afe:	4183      	sbcs	r3, r0
 8000b00:	4313      	orrs	r3, r2
 8000b02:	4698      	mov	r8, r3
 8000b04:	000d      	movs	r5, r1
 8000b06:	e79a      	b.n	8000a3e <__aeabi_fdiv+0x13a>
 8000b08:	201a      	movs	r0, #26
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	1b5b      	subs	r3, r3, r5
 8000b0e:	e7e8      	b.n	8000ae2 <__aeabi_fdiv+0x1de>
 8000b10:	3b02      	subs	r3, #2
 8000b12:	425a      	negs	r2, r3
 8000b14:	4153      	adcs	r3, r2
 8000b16:	425b      	negs	r3, r3
 8000b18:	0035      	movs	r5, r6
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	b2d8      	uxtb	r0, r3
 8000b1e:	e773      	b.n	8000a08 <__aeabi_fdiv+0x104>
 8000b20:	0192      	lsls	r2, r2, #6
 8000b22:	2000      	movs	r0, #0
 8000b24:	0a52      	lsrs	r2, r2, #9
 8000b26:	e76f      	b.n	8000a08 <__aeabi_fdiv+0x104>
 8000b28:	431a      	orrs	r2, r3
 8000b2a:	0252      	lsls	r2, r2, #9
 8000b2c:	0035      	movs	r5, r6
 8000b2e:	20ff      	movs	r0, #255	@ 0xff
 8000b30:	0a52      	lsrs	r2, r2, #9
 8000b32:	e769      	b.n	8000a08 <__aeabi_fdiv+0x104>
 8000b34:	4644      	mov	r4, r8
 8000b36:	e7ad      	b.n	8000a94 <__aeabi_fdiv+0x190>
 8000b38:	08008624 	.word	0x08008624
 8000b3c:	08008664 	.word	0x08008664
 8000b40:	f7ffffff 	.word	0xf7ffffff

08000b44 <__aeabi_fmul>:
 8000b44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b46:	464f      	mov	r7, r9
 8000b48:	4646      	mov	r6, r8
 8000b4a:	46d6      	mov	lr, sl
 8000b4c:	0243      	lsls	r3, r0, #9
 8000b4e:	0a5b      	lsrs	r3, r3, #9
 8000b50:	0045      	lsls	r5, r0, #1
 8000b52:	b5c0      	push	{r6, r7, lr}
 8000b54:	4699      	mov	r9, r3
 8000b56:	1c0f      	adds	r7, r1, #0
 8000b58:	0e2d      	lsrs	r5, r5, #24
 8000b5a:	0fc6      	lsrs	r6, r0, #31
 8000b5c:	2d00      	cmp	r5, #0
 8000b5e:	d100      	bne.n	8000b62 <__aeabi_fmul+0x1e>
 8000b60:	e088      	b.n	8000c74 <__aeabi_fmul+0x130>
 8000b62:	2dff      	cmp	r5, #255	@ 0xff
 8000b64:	d100      	bne.n	8000b68 <__aeabi_fmul+0x24>
 8000b66:	e08d      	b.n	8000c84 <__aeabi_fmul+0x140>
 8000b68:	2280      	movs	r2, #128	@ 0x80
 8000b6a:	00db      	lsls	r3, r3, #3
 8000b6c:	04d2      	lsls	r2, r2, #19
 8000b6e:	431a      	orrs	r2, r3
 8000b70:	2300      	movs	r3, #0
 8000b72:	4691      	mov	r9, r2
 8000b74:	4698      	mov	r8, r3
 8000b76:	469a      	mov	sl, r3
 8000b78:	3d7f      	subs	r5, #127	@ 0x7f
 8000b7a:	027c      	lsls	r4, r7, #9
 8000b7c:	007b      	lsls	r3, r7, #1
 8000b7e:	0a64      	lsrs	r4, r4, #9
 8000b80:	0e1b      	lsrs	r3, r3, #24
 8000b82:	0fff      	lsrs	r7, r7, #31
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d068      	beq.n	8000c5a <__aeabi_fmul+0x116>
 8000b88:	2bff      	cmp	r3, #255	@ 0xff
 8000b8a:	d021      	beq.n	8000bd0 <__aeabi_fmul+0x8c>
 8000b8c:	2280      	movs	r2, #128	@ 0x80
 8000b8e:	00e4      	lsls	r4, r4, #3
 8000b90:	04d2      	lsls	r2, r2, #19
 8000b92:	4314      	orrs	r4, r2
 8000b94:	4642      	mov	r2, r8
 8000b96:	3b7f      	subs	r3, #127	@ 0x7f
 8000b98:	195b      	adds	r3, r3, r5
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	1c5d      	adds	r5, r3, #1
 8000b9e:	2a0a      	cmp	r2, #10
 8000ba0:	dc2e      	bgt.n	8000c00 <__aeabi_fmul+0xbc>
 8000ba2:	407e      	eors	r6, r7
 8000ba4:	4642      	mov	r2, r8
 8000ba6:	2a02      	cmp	r2, #2
 8000ba8:	dc23      	bgt.n	8000bf2 <__aeabi_fmul+0xae>
 8000baa:	3a01      	subs	r2, #1
 8000bac:	2a01      	cmp	r2, #1
 8000bae:	d900      	bls.n	8000bb2 <__aeabi_fmul+0x6e>
 8000bb0:	e0bd      	b.n	8000d2e <__aeabi_fmul+0x1ea>
 8000bb2:	2902      	cmp	r1, #2
 8000bb4:	d06e      	beq.n	8000c94 <__aeabi_fmul+0x150>
 8000bb6:	2901      	cmp	r1, #1
 8000bb8:	d12c      	bne.n	8000c14 <__aeabi_fmul+0xd0>
 8000bba:	2000      	movs	r0, #0
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	05c0      	lsls	r0, r0, #23
 8000bc0:	07f6      	lsls	r6, r6, #31
 8000bc2:	4310      	orrs	r0, r2
 8000bc4:	4330      	orrs	r0, r6
 8000bc6:	bce0      	pop	{r5, r6, r7}
 8000bc8:	46ba      	mov	sl, r7
 8000bca:	46b1      	mov	r9, r6
 8000bcc:	46a8      	mov	r8, r5
 8000bce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bd0:	002b      	movs	r3, r5
 8000bd2:	33ff      	adds	r3, #255	@ 0xff
 8000bd4:	2c00      	cmp	r4, #0
 8000bd6:	d065      	beq.n	8000ca4 <__aeabi_fmul+0x160>
 8000bd8:	2203      	movs	r2, #3
 8000bda:	4641      	mov	r1, r8
 8000bdc:	4311      	orrs	r1, r2
 8000bde:	0032      	movs	r2, r6
 8000be0:	3501      	adds	r5, #1
 8000be2:	4688      	mov	r8, r1
 8000be4:	407a      	eors	r2, r7
 8000be6:	35ff      	adds	r5, #255	@ 0xff
 8000be8:	290a      	cmp	r1, #10
 8000bea:	dd00      	ble.n	8000bee <__aeabi_fmul+0xaa>
 8000bec:	e0d8      	b.n	8000da0 <__aeabi_fmul+0x25c>
 8000bee:	0016      	movs	r6, r2
 8000bf0:	2103      	movs	r1, #3
 8000bf2:	4640      	mov	r0, r8
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	4082      	lsls	r2, r0
 8000bf8:	20a6      	movs	r0, #166	@ 0xa6
 8000bfa:	00c0      	lsls	r0, r0, #3
 8000bfc:	4202      	tst	r2, r0
 8000bfe:	d020      	beq.n	8000c42 <__aeabi_fmul+0xfe>
 8000c00:	4653      	mov	r3, sl
 8000c02:	2b02      	cmp	r3, #2
 8000c04:	d046      	beq.n	8000c94 <__aeabi_fmul+0x150>
 8000c06:	2b03      	cmp	r3, #3
 8000c08:	d100      	bne.n	8000c0c <__aeabi_fmul+0xc8>
 8000c0a:	e0bb      	b.n	8000d84 <__aeabi_fmul+0x240>
 8000c0c:	4651      	mov	r1, sl
 8000c0e:	464c      	mov	r4, r9
 8000c10:	2901      	cmp	r1, #1
 8000c12:	d0d2      	beq.n	8000bba <__aeabi_fmul+0x76>
 8000c14:	002b      	movs	r3, r5
 8000c16:	337f      	adds	r3, #127	@ 0x7f
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	dd70      	ble.n	8000cfe <__aeabi_fmul+0x1ba>
 8000c1c:	0762      	lsls	r2, r4, #29
 8000c1e:	d004      	beq.n	8000c2a <__aeabi_fmul+0xe6>
 8000c20:	220f      	movs	r2, #15
 8000c22:	4022      	ands	r2, r4
 8000c24:	2a04      	cmp	r2, #4
 8000c26:	d000      	beq.n	8000c2a <__aeabi_fmul+0xe6>
 8000c28:	3404      	adds	r4, #4
 8000c2a:	0122      	lsls	r2, r4, #4
 8000c2c:	d503      	bpl.n	8000c36 <__aeabi_fmul+0xf2>
 8000c2e:	4b63      	ldr	r3, [pc, #396]	@ (8000dbc <__aeabi_fmul+0x278>)
 8000c30:	401c      	ands	r4, r3
 8000c32:	002b      	movs	r3, r5
 8000c34:	3380      	adds	r3, #128	@ 0x80
 8000c36:	2bfe      	cmp	r3, #254	@ 0xfe
 8000c38:	dc2c      	bgt.n	8000c94 <__aeabi_fmul+0x150>
 8000c3a:	01a2      	lsls	r2, r4, #6
 8000c3c:	0a52      	lsrs	r2, r2, #9
 8000c3e:	b2d8      	uxtb	r0, r3
 8000c40:	e7bd      	b.n	8000bbe <__aeabi_fmul+0x7a>
 8000c42:	2090      	movs	r0, #144	@ 0x90
 8000c44:	0080      	lsls	r0, r0, #2
 8000c46:	4202      	tst	r2, r0
 8000c48:	d127      	bne.n	8000c9a <__aeabi_fmul+0x156>
 8000c4a:	38b9      	subs	r0, #185	@ 0xb9
 8000c4c:	38ff      	subs	r0, #255	@ 0xff
 8000c4e:	4210      	tst	r0, r2
 8000c50:	d06d      	beq.n	8000d2e <__aeabi_fmul+0x1ea>
 8000c52:	003e      	movs	r6, r7
 8000c54:	46a1      	mov	r9, r4
 8000c56:	468a      	mov	sl, r1
 8000c58:	e7d2      	b.n	8000c00 <__aeabi_fmul+0xbc>
 8000c5a:	2c00      	cmp	r4, #0
 8000c5c:	d141      	bne.n	8000ce2 <__aeabi_fmul+0x19e>
 8000c5e:	2301      	movs	r3, #1
 8000c60:	4642      	mov	r2, r8
 8000c62:	431a      	orrs	r2, r3
 8000c64:	4690      	mov	r8, r2
 8000c66:	002b      	movs	r3, r5
 8000c68:	4642      	mov	r2, r8
 8000c6a:	2101      	movs	r1, #1
 8000c6c:	1c5d      	adds	r5, r3, #1
 8000c6e:	2a0a      	cmp	r2, #10
 8000c70:	dd97      	ble.n	8000ba2 <__aeabi_fmul+0x5e>
 8000c72:	e7c5      	b.n	8000c00 <__aeabi_fmul+0xbc>
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d126      	bne.n	8000cc6 <__aeabi_fmul+0x182>
 8000c78:	2304      	movs	r3, #4
 8000c7a:	4698      	mov	r8, r3
 8000c7c:	3b03      	subs	r3, #3
 8000c7e:	2500      	movs	r5, #0
 8000c80:	469a      	mov	sl, r3
 8000c82:	e77a      	b.n	8000b7a <__aeabi_fmul+0x36>
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d118      	bne.n	8000cba <__aeabi_fmul+0x176>
 8000c88:	2308      	movs	r3, #8
 8000c8a:	4698      	mov	r8, r3
 8000c8c:	3b06      	subs	r3, #6
 8000c8e:	25ff      	movs	r5, #255	@ 0xff
 8000c90:	469a      	mov	sl, r3
 8000c92:	e772      	b.n	8000b7a <__aeabi_fmul+0x36>
 8000c94:	20ff      	movs	r0, #255	@ 0xff
 8000c96:	2200      	movs	r2, #0
 8000c98:	e791      	b.n	8000bbe <__aeabi_fmul+0x7a>
 8000c9a:	2280      	movs	r2, #128	@ 0x80
 8000c9c:	2600      	movs	r6, #0
 8000c9e:	20ff      	movs	r0, #255	@ 0xff
 8000ca0:	03d2      	lsls	r2, r2, #15
 8000ca2:	e78c      	b.n	8000bbe <__aeabi_fmul+0x7a>
 8000ca4:	4641      	mov	r1, r8
 8000ca6:	2202      	movs	r2, #2
 8000ca8:	3501      	adds	r5, #1
 8000caa:	4311      	orrs	r1, r2
 8000cac:	4688      	mov	r8, r1
 8000cae:	35ff      	adds	r5, #255	@ 0xff
 8000cb0:	290a      	cmp	r1, #10
 8000cb2:	dca5      	bgt.n	8000c00 <__aeabi_fmul+0xbc>
 8000cb4:	2102      	movs	r1, #2
 8000cb6:	407e      	eors	r6, r7
 8000cb8:	e774      	b.n	8000ba4 <__aeabi_fmul+0x60>
 8000cba:	230c      	movs	r3, #12
 8000cbc:	4698      	mov	r8, r3
 8000cbe:	3b09      	subs	r3, #9
 8000cc0:	25ff      	movs	r5, #255	@ 0xff
 8000cc2:	469a      	mov	sl, r3
 8000cc4:	e759      	b.n	8000b7a <__aeabi_fmul+0x36>
 8000cc6:	0018      	movs	r0, r3
 8000cc8:	f000 f8e6 	bl	8000e98 <__clzsi2>
 8000ccc:	464a      	mov	r2, r9
 8000cce:	1f43      	subs	r3, r0, #5
 8000cd0:	2576      	movs	r5, #118	@ 0x76
 8000cd2:	409a      	lsls	r2, r3
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	426d      	negs	r5, r5
 8000cd8:	4691      	mov	r9, r2
 8000cda:	4698      	mov	r8, r3
 8000cdc:	469a      	mov	sl, r3
 8000cde:	1a2d      	subs	r5, r5, r0
 8000ce0:	e74b      	b.n	8000b7a <__aeabi_fmul+0x36>
 8000ce2:	0020      	movs	r0, r4
 8000ce4:	f000 f8d8 	bl	8000e98 <__clzsi2>
 8000ce8:	4642      	mov	r2, r8
 8000cea:	1f43      	subs	r3, r0, #5
 8000cec:	409c      	lsls	r4, r3
 8000cee:	1a2b      	subs	r3, r5, r0
 8000cf0:	3b76      	subs	r3, #118	@ 0x76
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	1c5d      	adds	r5, r3, #1
 8000cf6:	2a0a      	cmp	r2, #10
 8000cf8:	dc00      	bgt.n	8000cfc <__aeabi_fmul+0x1b8>
 8000cfa:	e752      	b.n	8000ba2 <__aeabi_fmul+0x5e>
 8000cfc:	e780      	b.n	8000c00 <__aeabi_fmul+0xbc>
 8000cfe:	2201      	movs	r2, #1
 8000d00:	1ad3      	subs	r3, r2, r3
 8000d02:	2b1b      	cmp	r3, #27
 8000d04:	dd00      	ble.n	8000d08 <__aeabi_fmul+0x1c4>
 8000d06:	e758      	b.n	8000bba <__aeabi_fmul+0x76>
 8000d08:	359e      	adds	r5, #158	@ 0x9e
 8000d0a:	0022      	movs	r2, r4
 8000d0c:	40ac      	lsls	r4, r5
 8000d0e:	40da      	lsrs	r2, r3
 8000d10:	1e63      	subs	r3, r4, #1
 8000d12:	419c      	sbcs	r4, r3
 8000d14:	4322      	orrs	r2, r4
 8000d16:	0753      	lsls	r3, r2, #29
 8000d18:	d004      	beq.n	8000d24 <__aeabi_fmul+0x1e0>
 8000d1a:	230f      	movs	r3, #15
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	2b04      	cmp	r3, #4
 8000d20:	d000      	beq.n	8000d24 <__aeabi_fmul+0x1e0>
 8000d22:	3204      	adds	r2, #4
 8000d24:	0153      	lsls	r3, r2, #5
 8000d26:	d537      	bpl.n	8000d98 <__aeabi_fmul+0x254>
 8000d28:	2001      	movs	r0, #1
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	e747      	b.n	8000bbe <__aeabi_fmul+0x7a>
 8000d2e:	0c21      	lsrs	r1, r4, #16
 8000d30:	464a      	mov	r2, r9
 8000d32:	0424      	lsls	r4, r4, #16
 8000d34:	0c24      	lsrs	r4, r4, #16
 8000d36:	0027      	movs	r7, r4
 8000d38:	0c10      	lsrs	r0, r2, #16
 8000d3a:	0412      	lsls	r2, r2, #16
 8000d3c:	0c12      	lsrs	r2, r2, #16
 8000d3e:	4344      	muls	r4, r0
 8000d40:	4357      	muls	r7, r2
 8000d42:	4348      	muls	r0, r1
 8000d44:	4351      	muls	r1, r2
 8000d46:	0c3a      	lsrs	r2, r7, #16
 8000d48:	1909      	adds	r1, r1, r4
 8000d4a:	1852      	adds	r2, r2, r1
 8000d4c:	4294      	cmp	r4, r2
 8000d4e:	d903      	bls.n	8000d58 <__aeabi_fmul+0x214>
 8000d50:	2180      	movs	r1, #128	@ 0x80
 8000d52:	0249      	lsls	r1, r1, #9
 8000d54:	468c      	mov	ip, r1
 8000d56:	4460      	add	r0, ip
 8000d58:	043f      	lsls	r7, r7, #16
 8000d5a:	0411      	lsls	r1, r2, #16
 8000d5c:	0c3f      	lsrs	r7, r7, #16
 8000d5e:	19c9      	adds	r1, r1, r7
 8000d60:	018c      	lsls	r4, r1, #6
 8000d62:	1e67      	subs	r7, r4, #1
 8000d64:	41bc      	sbcs	r4, r7
 8000d66:	0c12      	lsrs	r2, r2, #16
 8000d68:	0e89      	lsrs	r1, r1, #26
 8000d6a:	1812      	adds	r2, r2, r0
 8000d6c:	430c      	orrs	r4, r1
 8000d6e:	0192      	lsls	r2, r2, #6
 8000d70:	4314      	orrs	r4, r2
 8000d72:	0112      	lsls	r2, r2, #4
 8000d74:	d50e      	bpl.n	8000d94 <__aeabi_fmul+0x250>
 8000d76:	2301      	movs	r3, #1
 8000d78:	0862      	lsrs	r2, r4, #1
 8000d7a:	401c      	ands	r4, r3
 8000d7c:	4314      	orrs	r4, r2
 8000d7e:	e749      	b.n	8000c14 <__aeabi_fmul+0xd0>
 8000d80:	003e      	movs	r6, r7
 8000d82:	46a1      	mov	r9, r4
 8000d84:	2280      	movs	r2, #128	@ 0x80
 8000d86:	464b      	mov	r3, r9
 8000d88:	03d2      	lsls	r2, r2, #15
 8000d8a:	431a      	orrs	r2, r3
 8000d8c:	0252      	lsls	r2, r2, #9
 8000d8e:	20ff      	movs	r0, #255	@ 0xff
 8000d90:	0a52      	lsrs	r2, r2, #9
 8000d92:	e714      	b.n	8000bbe <__aeabi_fmul+0x7a>
 8000d94:	001d      	movs	r5, r3
 8000d96:	e73d      	b.n	8000c14 <__aeabi_fmul+0xd0>
 8000d98:	0192      	lsls	r2, r2, #6
 8000d9a:	2000      	movs	r0, #0
 8000d9c:	0a52      	lsrs	r2, r2, #9
 8000d9e:	e70e      	b.n	8000bbe <__aeabi_fmul+0x7a>
 8000da0:	290f      	cmp	r1, #15
 8000da2:	d1ed      	bne.n	8000d80 <__aeabi_fmul+0x23c>
 8000da4:	2280      	movs	r2, #128	@ 0x80
 8000da6:	464b      	mov	r3, r9
 8000da8:	03d2      	lsls	r2, r2, #15
 8000daa:	4213      	tst	r3, r2
 8000dac:	d0ea      	beq.n	8000d84 <__aeabi_fmul+0x240>
 8000dae:	4214      	tst	r4, r2
 8000db0:	d1e8      	bne.n	8000d84 <__aeabi_fmul+0x240>
 8000db2:	003e      	movs	r6, r7
 8000db4:	20ff      	movs	r0, #255	@ 0xff
 8000db6:	4322      	orrs	r2, r4
 8000db8:	e701      	b.n	8000bbe <__aeabi_fmul+0x7a>
 8000dba:	46c0      	nop			@ (mov r8, r8)
 8000dbc:	f7ffffff 	.word	0xf7ffffff

08000dc0 <__aeabi_f2iz>:
 8000dc0:	0241      	lsls	r1, r0, #9
 8000dc2:	0042      	lsls	r2, r0, #1
 8000dc4:	0fc3      	lsrs	r3, r0, #31
 8000dc6:	0a49      	lsrs	r1, r1, #9
 8000dc8:	2000      	movs	r0, #0
 8000dca:	0e12      	lsrs	r2, r2, #24
 8000dcc:	2a7e      	cmp	r2, #126	@ 0x7e
 8000dce:	dd03      	ble.n	8000dd8 <__aeabi_f2iz+0x18>
 8000dd0:	2a9d      	cmp	r2, #157	@ 0x9d
 8000dd2:	dd02      	ble.n	8000dda <__aeabi_f2iz+0x1a>
 8000dd4:	4a09      	ldr	r2, [pc, #36]	@ (8000dfc <__aeabi_f2iz+0x3c>)
 8000dd6:	1898      	adds	r0, r3, r2
 8000dd8:	4770      	bx	lr
 8000dda:	2080      	movs	r0, #128	@ 0x80
 8000ddc:	0400      	lsls	r0, r0, #16
 8000dde:	4301      	orrs	r1, r0
 8000de0:	2a95      	cmp	r2, #149	@ 0x95
 8000de2:	dc07      	bgt.n	8000df4 <__aeabi_f2iz+0x34>
 8000de4:	2096      	movs	r0, #150	@ 0x96
 8000de6:	1a82      	subs	r2, r0, r2
 8000de8:	40d1      	lsrs	r1, r2
 8000dea:	4248      	negs	r0, r1
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d1f3      	bne.n	8000dd8 <__aeabi_f2iz+0x18>
 8000df0:	0008      	movs	r0, r1
 8000df2:	e7f1      	b.n	8000dd8 <__aeabi_f2iz+0x18>
 8000df4:	3a96      	subs	r2, #150	@ 0x96
 8000df6:	4091      	lsls	r1, r2
 8000df8:	e7f7      	b.n	8000dea <__aeabi_f2iz+0x2a>
 8000dfa:	46c0      	nop			@ (mov r8, r8)
 8000dfc:	7fffffff 	.word	0x7fffffff

08000e00 <__aeabi_i2f>:
 8000e00:	b570      	push	{r4, r5, r6, lr}
 8000e02:	2800      	cmp	r0, #0
 8000e04:	d013      	beq.n	8000e2e <__aeabi_i2f+0x2e>
 8000e06:	17c3      	asrs	r3, r0, #31
 8000e08:	18c5      	adds	r5, r0, r3
 8000e0a:	405d      	eors	r5, r3
 8000e0c:	0fc4      	lsrs	r4, r0, #31
 8000e0e:	0028      	movs	r0, r5
 8000e10:	f000 f842 	bl	8000e98 <__clzsi2>
 8000e14:	239e      	movs	r3, #158	@ 0x9e
 8000e16:	0001      	movs	r1, r0
 8000e18:	1a1b      	subs	r3, r3, r0
 8000e1a:	2b96      	cmp	r3, #150	@ 0x96
 8000e1c:	dc0f      	bgt.n	8000e3e <__aeabi_i2f+0x3e>
 8000e1e:	2808      	cmp	r0, #8
 8000e20:	d034      	beq.n	8000e8c <__aeabi_i2f+0x8c>
 8000e22:	3908      	subs	r1, #8
 8000e24:	408d      	lsls	r5, r1
 8000e26:	026d      	lsls	r5, r5, #9
 8000e28:	0a6d      	lsrs	r5, r5, #9
 8000e2a:	b2d8      	uxtb	r0, r3
 8000e2c:	e002      	b.n	8000e34 <__aeabi_i2f+0x34>
 8000e2e:	2400      	movs	r4, #0
 8000e30:	2000      	movs	r0, #0
 8000e32:	2500      	movs	r5, #0
 8000e34:	05c0      	lsls	r0, r0, #23
 8000e36:	4328      	orrs	r0, r5
 8000e38:	07e4      	lsls	r4, r4, #31
 8000e3a:	4320      	orrs	r0, r4
 8000e3c:	bd70      	pop	{r4, r5, r6, pc}
 8000e3e:	2b99      	cmp	r3, #153	@ 0x99
 8000e40:	dc16      	bgt.n	8000e70 <__aeabi_i2f+0x70>
 8000e42:	1f42      	subs	r2, r0, #5
 8000e44:	2805      	cmp	r0, #5
 8000e46:	d000      	beq.n	8000e4a <__aeabi_i2f+0x4a>
 8000e48:	4095      	lsls	r5, r2
 8000e4a:	002a      	movs	r2, r5
 8000e4c:	4811      	ldr	r0, [pc, #68]	@ (8000e94 <__aeabi_i2f+0x94>)
 8000e4e:	4002      	ands	r2, r0
 8000e50:	076e      	lsls	r6, r5, #29
 8000e52:	d009      	beq.n	8000e68 <__aeabi_i2f+0x68>
 8000e54:	260f      	movs	r6, #15
 8000e56:	4035      	ands	r5, r6
 8000e58:	2d04      	cmp	r5, #4
 8000e5a:	d005      	beq.n	8000e68 <__aeabi_i2f+0x68>
 8000e5c:	3204      	adds	r2, #4
 8000e5e:	0155      	lsls	r5, r2, #5
 8000e60:	d502      	bpl.n	8000e68 <__aeabi_i2f+0x68>
 8000e62:	239f      	movs	r3, #159	@ 0x9f
 8000e64:	4002      	ands	r2, r0
 8000e66:	1a5b      	subs	r3, r3, r1
 8000e68:	0192      	lsls	r2, r2, #6
 8000e6a:	0a55      	lsrs	r5, r2, #9
 8000e6c:	b2d8      	uxtb	r0, r3
 8000e6e:	e7e1      	b.n	8000e34 <__aeabi_i2f+0x34>
 8000e70:	2205      	movs	r2, #5
 8000e72:	1a12      	subs	r2, r2, r0
 8000e74:	0028      	movs	r0, r5
 8000e76:	40d0      	lsrs	r0, r2
 8000e78:	0002      	movs	r2, r0
 8000e7a:	0008      	movs	r0, r1
 8000e7c:	301b      	adds	r0, #27
 8000e7e:	4085      	lsls	r5, r0
 8000e80:	0028      	movs	r0, r5
 8000e82:	1e45      	subs	r5, r0, #1
 8000e84:	41a8      	sbcs	r0, r5
 8000e86:	4302      	orrs	r2, r0
 8000e88:	0015      	movs	r5, r2
 8000e8a:	e7de      	b.n	8000e4a <__aeabi_i2f+0x4a>
 8000e8c:	026d      	lsls	r5, r5, #9
 8000e8e:	2096      	movs	r0, #150	@ 0x96
 8000e90:	0a6d      	lsrs	r5, r5, #9
 8000e92:	e7cf      	b.n	8000e34 <__aeabi_i2f+0x34>
 8000e94:	fbffffff 	.word	0xfbffffff

08000e98 <__clzsi2>:
 8000e98:	211c      	movs	r1, #28
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	041b      	lsls	r3, r3, #16
 8000e9e:	4298      	cmp	r0, r3
 8000ea0:	d301      	bcc.n	8000ea6 <__clzsi2+0xe>
 8000ea2:	0c00      	lsrs	r0, r0, #16
 8000ea4:	3910      	subs	r1, #16
 8000ea6:	0a1b      	lsrs	r3, r3, #8
 8000ea8:	4298      	cmp	r0, r3
 8000eaa:	d301      	bcc.n	8000eb0 <__clzsi2+0x18>
 8000eac:	0a00      	lsrs	r0, r0, #8
 8000eae:	3908      	subs	r1, #8
 8000eb0:	091b      	lsrs	r3, r3, #4
 8000eb2:	4298      	cmp	r0, r3
 8000eb4:	d301      	bcc.n	8000eba <__clzsi2+0x22>
 8000eb6:	0900      	lsrs	r0, r0, #4
 8000eb8:	3904      	subs	r1, #4
 8000eba:	a202      	add	r2, pc, #8	@ (adr r2, 8000ec4 <__clzsi2+0x2c>)
 8000ebc:	5c10      	ldrb	r0, [r2, r0]
 8000ebe:	1840      	adds	r0, r0, r1
 8000ec0:	4770      	bx	lr
 8000ec2:	46c0      	nop			@ (mov r8, r8)
 8000ec4:	02020304 	.word	0x02020304
 8000ec8:	01010101 	.word	0x01010101
	...

08000ed4 <__clzdi2>:
 8000ed4:	b510      	push	{r4, lr}
 8000ed6:	2900      	cmp	r1, #0
 8000ed8:	d103      	bne.n	8000ee2 <__clzdi2+0xe>
 8000eda:	f7ff ffdd 	bl	8000e98 <__clzsi2>
 8000ede:	3020      	adds	r0, #32
 8000ee0:	e002      	b.n	8000ee8 <__clzdi2+0x14>
 8000ee2:	0008      	movs	r0, r1
 8000ee4:	f7ff ffd8 	bl	8000e98 <__clzsi2>
 8000ee8:	bd10      	pop	{r4, pc}
 8000eea:	46c0      	nop			@ (mov r8, r8)

08000eec <drawPixel>:
extern uint8_t _rowstart;       ///< Some displays need this changed to offset
extern uint8_t _xstart;
extern uint8_t _ystart;

void drawPixel(int16_t x, int16_t y, uint16_t color)
{
 8000eec:	b590      	push	{r4, r7, lr}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	0004      	movs	r4, r0
 8000ef4:	0008      	movs	r0, r1
 8000ef6:	0011      	movs	r1, r2
 8000ef8:	1dbb      	adds	r3, r7, #6
 8000efa:	1c22      	adds	r2, r4, #0
 8000efc:	801a      	strh	r2, [r3, #0]
 8000efe:	1d3b      	adds	r3, r7, #4
 8000f00:	1c02      	adds	r2, r0, #0
 8000f02:	801a      	strh	r2, [r3, #0]
 8000f04:	1cbb      	adds	r3, r7, #2
 8000f06:	1c0a      	adds	r2, r1, #0
 8000f08:	801a      	strh	r2, [r3, #0]
	ST7735_DrawPixel(x, y, color);
 8000f0a:	1dbb      	adds	r3, r7, #6
 8000f0c:	8818      	ldrh	r0, [r3, #0]
 8000f0e:	1d3b      	adds	r3, r7, #4
 8000f10:	8819      	ldrh	r1, [r3, #0]
 8000f12:	1cbb      	adds	r3, r7, #2
 8000f14:	881b      	ldrh	r3, [r3, #0]
 8000f16:	001a      	movs	r2, r3
 8000f18:	f000 fba4 	bl	8001664 <ST7735_DrawPixel>
}
 8000f1c:	46c0      	nop			@ (mov r8, r8)
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	b003      	add	sp, #12
 8000f22:	bd90      	pop	{r4, r7, pc}

08000f24 <fillRect>:

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8000f24:	b5b0      	push	{r4, r5, r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af02      	add	r7, sp, #8
 8000f2a:	0005      	movs	r5, r0
 8000f2c:	000c      	movs	r4, r1
 8000f2e:	0010      	movs	r0, r2
 8000f30:	0019      	movs	r1, r3
 8000f32:	1dbb      	adds	r3, r7, #6
 8000f34:	1c2a      	adds	r2, r5, #0
 8000f36:	801a      	strh	r2, [r3, #0]
 8000f38:	1d3b      	adds	r3, r7, #4
 8000f3a:	1c22      	adds	r2, r4, #0
 8000f3c:	801a      	strh	r2, [r3, #0]
 8000f3e:	1cbb      	adds	r3, r7, #2
 8000f40:	1c02      	adds	r2, r0, #0
 8000f42:	801a      	strh	r2, [r3, #0]
 8000f44:	003b      	movs	r3, r7
 8000f46:	1c0a      	adds	r2, r1, #0
 8000f48:	801a      	strh	r2, [r3, #0]
	ST7735_FillRectangle(x, y, w, h, color);
 8000f4a:	1dbb      	adds	r3, r7, #6
 8000f4c:	8818      	ldrh	r0, [r3, #0]
 8000f4e:	1d3b      	adds	r3, r7, #4
 8000f50:	8819      	ldrh	r1, [r3, #0]
 8000f52:	1cbb      	adds	r3, r7, #2
 8000f54:	881a      	ldrh	r2, [r3, #0]
 8000f56:	003b      	movs	r3, r7
 8000f58:	881c      	ldrh	r4, [r3, #0]
 8000f5a:	2318      	movs	r3, #24
 8000f5c:	18fb      	adds	r3, r7, r3
 8000f5e:	881b      	ldrh	r3, [r3, #0]
 8000f60:	9300      	str	r3, [sp, #0]
 8000f62:	0023      	movs	r3, r4
 8000f64:	f000 fbcc 	bl	8001700 <ST7735_FillRectangle>
}
 8000f68:	46c0      	nop			@ (mov r8, r8)
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	b002      	add	sp, #8
 8000f6e:	bdb0      	pop	{r4, r5, r7, pc}

08000f70 <writePixel>:

#define min(a, b) (((a) < (b)) ? (a) : (b))


void writePixel(int16_t x, int16_t y, uint16_t color)
{
 8000f70:	b590      	push	{r4, r7, lr}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	0004      	movs	r4, r0
 8000f78:	0008      	movs	r0, r1
 8000f7a:	0011      	movs	r1, r2
 8000f7c:	1dbb      	adds	r3, r7, #6
 8000f7e:	1c22      	adds	r2, r4, #0
 8000f80:	801a      	strh	r2, [r3, #0]
 8000f82:	1d3b      	adds	r3, r7, #4
 8000f84:	1c02      	adds	r2, r0, #0
 8000f86:	801a      	strh	r2, [r3, #0]
 8000f88:	1cbb      	adds	r3, r7, #2
 8000f8a:	1c0a      	adds	r2, r1, #0
 8000f8c:	801a      	strh	r2, [r3, #0]
    drawPixel(x, y, color);
 8000f8e:	1cbb      	adds	r3, r7, #2
 8000f90:	881a      	ldrh	r2, [r3, #0]
 8000f92:	1d3b      	adds	r3, r7, #4
 8000f94:	2100      	movs	r1, #0
 8000f96:	5e59      	ldrsh	r1, [r3, r1]
 8000f98:	1dbb      	adds	r3, r7, #6
 8000f9a:	2000      	movs	r0, #0
 8000f9c:	5e1b      	ldrsh	r3, [r3, r0]
 8000f9e:	0018      	movs	r0, r3
 8000fa0:	f7ff ffa4 	bl	8000eec <drawPixel>
}
 8000fa4:	46c0      	nop			@ (mov r8, r8)
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	b003      	add	sp, #12
 8000faa:	bd90      	pop	{r4, r7, pc}

08000fac <drawString>:
    } else {
        writeLine(x0, y0, x1, y1, color);
    }
}
void drawString(int16_t x, int16_t y, char* c, int16_t textColor, int16_t bgColor, uint8_t size, uint8_t spacing)
{
 8000fac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fae:	b089      	sub	sp, #36	@ 0x24
 8000fb0:	af02      	add	r7, sp, #8
 8000fb2:	0004      	movs	r4, r0
 8000fb4:	0008      	movs	r0, r1
 8000fb6:	60ba      	str	r2, [r7, #8]
 8000fb8:	0019      	movs	r1, r3
 8000fba:	230e      	movs	r3, #14
 8000fbc:	18fb      	adds	r3, r7, r3
 8000fbe:	1c22      	adds	r2, r4, #0
 8000fc0:	801a      	strh	r2, [r3, #0]
 8000fc2:	230c      	movs	r3, #12
 8000fc4:	18fb      	adds	r3, r7, r3
 8000fc6:	1c02      	adds	r2, r0, #0
 8000fc8:	801a      	strh	r2, [r3, #0]
 8000fca:	1dbb      	adds	r3, r7, #6
 8000fcc:	1c0a      	adds	r2, r1, #0
 8000fce:	801a      	strh	r2, [r3, #0]
	uint16_t i =0;
 8000fd0:	2316      	movs	r3, #22
 8000fd2:	18fb      	adds	r3, r7, r3
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	801a      	strh	r2, [r3, #0]

	while(c[i])
 8000fd8:	e03f      	b.n	800105a <drawString+0xae>
	{
		drawChar(x, y, c[i], textColor, bgColor, size);
 8000fda:	2516      	movs	r5, #22
 8000fdc:	197b      	adds	r3, r7, r5
 8000fde:	881b      	ldrh	r3, [r3, #0]
 8000fe0:	68ba      	ldr	r2, [r7, #8]
 8000fe2:	18d3      	adds	r3, r2, r3
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	469c      	mov	ip, r3
 8000fe8:	1dbb      	adds	r3, r7, #6
 8000fea:	2400      	movs	r4, #0
 8000fec:	5f1c      	ldrsh	r4, [r3, r4]
 8000fee:	230c      	movs	r3, #12
 8000ff0:	18fb      	adds	r3, r7, r3
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	5e59      	ldrsh	r1, [r3, r1]
 8000ff6:	260e      	movs	r6, #14
 8000ff8:	19bb      	adds	r3, r7, r6
 8000ffa:	2000      	movs	r0, #0
 8000ffc:	5e18      	ldrsh	r0, [r3, r0]
 8000ffe:	232c      	movs	r3, #44	@ 0x2c
 8001000:	2208      	movs	r2, #8
 8001002:	189b      	adds	r3, r3, r2
 8001004:	19db      	adds	r3, r3, r7
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	9301      	str	r3, [sp, #4]
 800100a:	2328      	movs	r3, #40	@ 0x28
 800100c:	189b      	adds	r3, r3, r2
 800100e:	19db      	adds	r3, r3, r7
 8001010:	2200      	movs	r2, #0
 8001012:	5e9b      	ldrsh	r3, [r3, r2]
 8001014:	9300      	str	r3, [sp, #0]
 8001016:	0023      	movs	r3, r4
 8001018:	4662      	mov	r2, ip
 800101a:	f000 f82b 	bl	8001074 <drawChar>
		x+=(size*6)+spacing;
 800101e:	232c      	movs	r3, #44	@ 0x2c
 8001020:	2108      	movs	r1, #8
 8001022:	185b      	adds	r3, r3, r1
 8001024:	19db      	adds	r3, r3, r7
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	b29b      	uxth	r3, r3
 800102a:	1c1a      	adds	r2, r3, #0
 800102c:	1c13      	adds	r3, r2, #0
 800102e:	18db      	adds	r3, r3, r3
 8001030:	189b      	adds	r3, r3, r2
 8001032:	18db      	adds	r3, r3, r3
 8001034:	b29a      	uxth	r2, r3
 8001036:	2330      	movs	r3, #48	@ 0x30
 8001038:	185b      	adds	r3, r3, r1
 800103a:	19db      	adds	r3, r3, r7
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	b29b      	uxth	r3, r3
 8001040:	18d3      	adds	r3, r2, r3
 8001042:	b29a      	uxth	r2, r3
 8001044:	19bb      	adds	r3, r7, r6
 8001046:	881b      	ldrh	r3, [r3, #0]
 8001048:	18d3      	adds	r3, r2, r3
 800104a:	b29a      	uxth	r2, r3
 800104c:	19bb      	adds	r3, r7, r6
 800104e:	801a      	strh	r2, [r3, #0]
		i++;
 8001050:	197b      	adds	r3, r7, r5
 8001052:	881a      	ldrh	r2, [r3, #0]
 8001054:	197b      	adds	r3, r7, r5
 8001056:	3201      	adds	r2, #1
 8001058:	801a      	strh	r2, [r3, #0]
	while(c[i])
 800105a:	2316      	movs	r3, #22
 800105c:	18fb      	adds	r3, r7, r3
 800105e:	881b      	ldrh	r3, [r3, #0]
 8001060:	68ba      	ldr	r2, [r7, #8]
 8001062:	18d3      	adds	r3, r2, r3
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d1b7      	bne.n	8000fda <drawString+0x2e>
	}
}
 800106a:	46c0      	nop			@ (mov r8, r8)
 800106c:	46c0      	nop			@ (mov r8, r8)
 800106e:	46bd      	mov	sp, r7
 8001070:	b007      	add	sp, #28
 8001072:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001074 <drawChar>:
void drawChar(int16_t x, int16_t y, char c, int16_t textColor, int16_t bgColor, uint8_t size){
 8001074:	b5b0      	push	{r4, r5, r7, lr}
 8001076:	b088      	sub	sp, #32
 8001078:	af02      	add	r7, sp, #8
 800107a:	0005      	movs	r5, r0
 800107c:	000c      	movs	r4, r1
 800107e:	0010      	movs	r0, r2
 8001080:	0019      	movs	r1, r3
 8001082:	1dbb      	adds	r3, r7, #6
 8001084:	1c2a      	adds	r2, r5, #0
 8001086:	801a      	strh	r2, [r3, #0]
 8001088:	1d3b      	adds	r3, r7, #4
 800108a:	1c22      	adds	r2, r4, #0
 800108c:	801a      	strh	r2, [r3, #0]
 800108e:	1cfb      	adds	r3, r7, #3
 8001090:	1c02      	adds	r2, r0, #0
 8001092:	701a      	strb	r2, [r3, #0]
 8001094:	003b      	movs	r3, r7
 8001096:	1c0a      	adds	r2, r1, #0
 8001098:	801a      	strh	r2, [r3, #0]
  uint8_t line;
  int32_t i, j;
  if((x >= _width)            ||
 800109a:	4b74      	ldr	r3, [pc, #464]	@ (800126c <drawChar+0x1f8>)
 800109c:	2200      	movs	r2, #0
 800109e:	5e9b      	ldrsh	r3, [r3, r2]
 80010a0:	1dba      	adds	r2, r7, #6
 80010a2:	2100      	movs	r1, #0
 80010a4:	5e52      	ldrsh	r2, [r2, r1]
 80010a6:	429a      	cmp	r2, r3
 80010a8:	db00      	blt.n	80010ac <drawChar+0x38>
 80010aa:	e0db      	b.n	8001264 <drawChar+0x1f0>
     (y >= _height)           ||
 80010ac:	4b70      	ldr	r3, [pc, #448]	@ (8001270 <drawChar+0x1fc>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	5e9b      	ldrsh	r3, [r3, r2]
  if((x >= _width)            ||
 80010b2:	1d3a      	adds	r2, r7, #4
 80010b4:	2100      	movs	r1, #0
 80010b6:	5e52      	ldrsh	r2, [r2, r1]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	db00      	blt.n	80010be <drawChar+0x4a>
 80010bc:	e0d2      	b.n	8001264 <drawChar+0x1f0>
     ((x + 5 * size - 1) < 0) ||
 80010be:	1dbb      	adds	r3, r7, #6
 80010c0:	2100      	movs	r1, #0
 80010c2:	5e59      	ldrsh	r1, [r3, r1]
 80010c4:	202c      	movs	r0, #44	@ 0x2c
 80010c6:	183b      	adds	r3, r7, r0
 80010c8:	781a      	ldrb	r2, [r3, #0]
 80010ca:	0013      	movs	r3, r2
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	189b      	adds	r3, r3, r2
 80010d0:	18cb      	adds	r3, r1, r3
     (y >= _height)           ||
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	dc00      	bgt.n	80010d8 <drawChar+0x64>
 80010d6:	e0c5      	b.n	8001264 <drawChar+0x1f0>
     ((y + 8 * size - 1) < 0))
 80010d8:	1d3b      	adds	r3, r7, #4
 80010da:	2200      	movs	r2, #0
 80010dc:	5e9a      	ldrsh	r2, [r3, r2]
 80010de:	183b      	adds	r3, r7, r0
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	00db      	lsls	r3, r3, #3
 80010e4:	18d3      	adds	r3, r2, r3
     ((x + 5 * size - 1) < 0) ||
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	dc00      	bgt.n	80010ec <drawChar+0x78>
 80010ea:	e0bb      	b.n	8001264 <drawChar+0x1f0>
    return;

  for (i=0; i<6; i++ ) {
 80010ec:	2300      	movs	r3, #0
 80010ee:	613b      	str	r3, [r7, #16]
 80010f0:	e0b3      	b.n	800125a <drawChar+0x1e6>
    if (i == 5)
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	2b05      	cmp	r3, #5
 80010f6:	d104      	bne.n	8001102 <drawChar+0x8e>
      line = 0x0;
 80010f8:	2317      	movs	r3, #23
 80010fa:	18fb      	adds	r3, r7, r3
 80010fc:	2200      	movs	r2, #0
 80010fe:	701a      	strb	r2, [r3, #0]
 8001100:	e00b      	b.n	800111a <drawChar+0xa6>
    else
      line = Font[(c*5)+i];
 8001102:	1cfb      	adds	r3, r7, #3
 8001104:	781a      	ldrb	r2, [r3, #0]
 8001106:	0013      	movs	r3, r2
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	189a      	adds	r2, r3, r2
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	18d2      	adds	r2, r2, r3
 8001110:	2317      	movs	r3, #23
 8001112:	18fb      	adds	r3, r7, r3
 8001114:	4957      	ldr	r1, [pc, #348]	@ (8001274 <drawChar+0x200>)
 8001116:	5c8a      	ldrb	r2, [r1, r2]
 8001118:	701a      	strb	r2, [r3, #0]
    for (j = 0; j<8; j++) {
 800111a:	2300      	movs	r3, #0
 800111c:	60fb      	str	r3, [r7, #12]
 800111e:	e095      	b.n	800124c <drawChar+0x1d8>
      if (line & 0x1) {
 8001120:	2317      	movs	r3, #23
 8001122:	18fb      	adds	r3, r7, r3
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	2201      	movs	r2, #1
 8001128:	4013      	ands	r3, r2
 800112a:	d03e      	beq.n	80011aa <drawChar+0x136>
        if (size == 1)
 800112c:	232c      	movs	r3, #44	@ 0x2c
 800112e:	18fb      	adds	r3, r7, r3
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	2b01      	cmp	r3, #1
 8001134:	d113      	bne.n	800115e <drawChar+0xea>
          writePixel(x+i, y+j, textColor);
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	b29a      	uxth	r2, r3
 800113a:	1dbb      	adds	r3, r7, #6
 800113c:	881b      	ldrh	r3, [r3, #0]
 800113e:	18d3      	adds	r3, r2, r3
 8001140:	b29b      	uxth	r3, r3
 8001142:	b218      	sxth	r0, r3
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	b29a      	uxth	r2, r3
 8001148:	1d3b      	adds	r3, r7, #4
 800114a:	881b      	ldrh	r3, [r3, #0]
 800114c:	18d3      	adds	r3, r2, r3
 800114e:	b29b      	uxth	r3, r3
 8001150:	b219      	sxth	r1, r3
 8001152:	003b      	movs	r3, r7
 8001154:	881b      	ldrh	r3, [r3, #0]
 8001156:	001a      	movs	r2, r3
 8001158:	f7ff ff0a 	bl	8000f70 <writePixel>
 800115c:	e06d      	b.n	800123a <drawChar+0x1c6>
        else {
          fillRect(x+(i*size), y+(j*size), size, size, textColor);
 800115e:	242c      	movs	r4, #44	@ 0x2c
 8001160:	193b      	adds	r3, r7, r4
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	b29b      	uxth	r3, r3
 8001166:	693a      	ldr	r2, [r7, #16]
 8001168:	b292      	uxth	r2, r2
 800116a:	4353      	muls	r3, r2
 800116c:	b29a      	uxth	r2, r3
 800116e:	1dbb      	adds	r3, r7, #6
 8001170:	881b      	ldrh	r3, [r3, #0]
 8001172:	18d3      	adds	r3, r2, r3
 8001174:	b29b      	uxth	r3, r3
 8001176:	b218      	sxth	r0, r3
 8001178:	193b      	adds	r3, r7, r4
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	b29b      	uxth	r3, r3
 800117e:	68fa      	ldr	r2, [r7, #12]
 8001180:	b292      	uxth	r2, r2
 8001182:	4353      	muls	r3, r2
 8001184:	b29a      	uxth	r2, r3
 8001186:	1d3b      	adds	r3, r7, #4
 8001188:	881b      	ldrh	r3, [r3, #0]
 800118a:	18d3      	adds	r3, r2, r3
 800118c:	b29b      	uxth	r3, r3
 800118e:	b219      	sxth	r1, r3
 8001190:	193b      	adds	r3, r7, r4
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	b21a      	sxth	r2, r3
 8001196:	193b      	adds	r3, r7, r4
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	b21c      	sxth	r4, r3
 800119c:	003b      	movs	r3, r7
 800119e:	881b      	ldrh	r3, [r3, #0]
 80011a0:	9300      	str	r3, [sp, #0]
 80011a2:	0023      	movs	r3, r4
 80011a4:	f7ff febe 	bl	8000f24 <fillRect>
 80011a8:	e047      	b.n	800123a <drawChar+0x1c6>
        }
      } else if (bgColor != textColor) {
 80011aa:	2428      	movs	r4, #40	@ 0x28
 80011ac:	193b      	adds	r3, r7, r4
 80011ae:	0039      	movs	r1, r7
 80011b0:	2200      	movs	r2, #0
 80011b2:	5e9a      	ldrsh	r2, [r3, r2]
 80011b4:	2300      	movs	r3, #0
 80011b6:	5ecb      	ldrsh	r3, [r1, r3]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d03e      	beq.n	800123a <drawChar+0x1c6>
        if (size == 1) // default size
 80011bc:	232c      	movs	r3, #44	@ 0x2c
 80011be:	18fb      	adds	r3, r7, r3
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d113      	bne.n	80011ee <drawChar+0x17a>
          writePixel(x+i, y+j, bgColor);
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	b29a      	uxth	r2, r3
 80011ca:	1dbb      	adds	r3, r7, #6
 80011cc:	881b      	ldrh	r3, [r3, #0]
 80011ce:	18d3      	adds	r3, r2, r3
 80011d0:	b29b      	uxth	r3, r3
 80011d2:	b218      	sxth	r0, r3
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	b29a      	uxth	r2, r3
 80011d8:	1d3b      	adds	r3, r7, #4
 80011da:	881b      	ldrh	r3, [r3, #0]
 80011dc:	18d3      	adds	r3, r2, r3
 80011de:	b29b      	uxth	r3, r3
 80011e0:	b219      	sxth	r1, r3
 80011e2:	193b      	adds	r3, r7, r4
 80011e4:	881b      	ldrh	r3, [r3, #0]
 80011e6:	001a      	movs	r2, r3
 80011e8:	f7ff fec2 	bl	8000f70 <writePixel>
 80011ec:	e025      	b.n	800123a <drawChar+0x1c6>
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bgColor);
 80011ee:	242c      	movs	r4, #44	@ 0x2c
 80011f0:	193b      	adds	r3, r7, r4
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	b29b      	uxth	r3, r3
 80011f6:	693a      	ldr	r2, [r7, #16]
 80011f8:	b292      	uxth	r2, r2
 80011fa:	4353      	muls	r3, r2
 80011fc:	b29a      	uxth	r2, r3
 80011fe:	1dbb      	adds	r3, r7, #6
 8001200:	881b      	ldrh	r3, [r3, #0]
 8001202:	18d3      	adds	r3, r2, r3
 8001204:	b29b      	uxth	r3, r3
 8001206:	b218      	sxth	r0, r3
 8001208:	193b      	adds	r3, r7, r4
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	b29b      	uxth	r3, r3
 800120e:	68fa      	ldr	r2, [r7, #12]
 8001210:	b292      	uxth	r2, r2
 8001212:	4353      	muls	r3, r2
 8001214:	b29a      	uxth	r2, r3
 8001216:	1d3b      	adds	r3, r7, #4
 8001218:	881b      	ldrh	r3, [r3, #0]
 800121a:	18d3      	adds	r3, r2, r3
 800121c:	b29b      	uxth	r3, r3
 800121e:	b219      	sxth	r1, r3
 8001220:	193b      	adds	r3, r7, r4
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	b21a      	sxth	r2, r3
 8001226:	193b      	adds	r3, r7, r4
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	b21c      	sxth	r4, r3
 800122c:	2328      	movs	r3, #40	@ 0x28
 800122e:	18fb      	adds	r3, r7, r3
 8001230:	881b      	ldrh	r3, [r3, #0]
 8001232:	9300      	str	r3, [sp, #0]
 8001234:	0023      	movs	r3, r4
 8001236:	f7ff fe75 	bl	8000f24 <fillRect>
        }
      }
      line >>= 1;
 800123a:	2217      	movs	r2, #23
 800123c:	18bb      	adds	r3, r7, r2
 800123e:	18ba      	adds	r2, r7, r2
 8001240:	7812      	ldrb	r2, [r2, #0]
 8001242:	0852      	lsrs	r2, r2, #1
 8001244:	701a      	strb	r2, [r3, #0]
    for (j = 0; j<8; j++) {
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	3301      	adds	r3, #1
 800124a:	60fb      	str	r3, [r7, #12]
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	2b07      	cmp	r3, #7
 8001250:	dc00      	bgt.n	8001254 <drawChar+0x1e0>
 8001252:	e765      	b.n	8001120 <drawChar+0xac>
  for (i=0; i<6; i++ ) {
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	3301      	adds	r3, #1
 8001258:	613b      	str	r3, [r7, #16]
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	2b05      	cmp	r3, #5
 800125e:	dc00      	bgt.n	8001262 <drawChar+0x1ee>
 8001260:	e747      	b.n	80010f2 <drawChar+0x7e>
 8001262:	e000      	b.n	8001266 <drawChar+0x1f2>
    return;
 8001264:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 8001266:	46bd      	mov	sp, r7
 8001268:	b006      	add	sp, #24
 800126a:	bdb0      	pop	{r4, r5, r7, pc}
 800126c:	20000084 	.word	0x20000084
 8001270:	20000086 	.word	0x20000086
 8001274:	080086a0 	.word	0x080086a0

08001278 <fillScreen>:
        if(a > b) _swap_int16_t(a,b);
        drawFastHLine(a, y, b-a+1, color);
    }
}

void fillScreen(uint16_t color) {
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af02      	add	r7, sp, #8
 800127e:	0002      	movs	r2, r0
 8001280:	1dbb      	adds	r3, r7, #6
 8001282:	801a      	strh	r2, [r3, #0]
    fillRect(0, 0, _width, _height, color);
 8001284:	4b08      	ldr	r3, [pc, #32]	@ (80012a8 <fillScreen+0x30>)
 8001286:	2200      	movs	r2, #0
 8001288:	5e9a      	ldrsh	r2, [r3, r2]
 800128a:	4b08      	ldr	r3, [pc, #32]	@ (80012ac <fillScreen+0x34>)
 800128c:	2100      	movs	r1, #0
 800128e:	5e59      	ldrsh	r1, [r3, r1]
 8001290:	1dbb      	adds	r3, r7, #6
 8001292:	881b      	ldrh	r3, [r3, #0]
 8001294:	9300      	str	r3, [sp, #0]
 8001296:	000b      	movs	r3, r1
 8001298:	2100      	movs	r1, #0
 800129a:	2000      	movs	r0, #0
 800129c:	f7ff fe42 	bl	8000f24 <fillRect>
}
 80012a0:	46c0      	nop			@ (mov r8, r8)
 80012a2:	46bd      	mov	sp, r7
 80012a4:	b002      	add	sp, #8
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	20000084 	.word	0x20000084
 80012ac:	20000086 	.word	0x20000086

080012b0 <ST7735_Select>:
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

void ST7735_Select()
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 80012b4:	23a0      	movs	r3, #160	@ 0xa0
 80012b6:	05db      	lsls	r3, r3, #23
 80012b8:	2200      	movs	r2, #0
 80012ba:	2120      	movs	r1, #32
 80012bc:	0018      	movs	r0, r3
 80012be:	f002 f877 	bl	80033b0 <HAL_GPIO_WritePin>
}
 80012c2:	46c0      	nop			@ (mov r8, r8)
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}

080012c8 <ST7735_Unselect>:

void ST7735_Unselect()
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 80012cc:	23a0      	movs	r3, #160	@ 0xa0
 80012ce:	05db      	lsls	r3, r3, #23
 80012d0:	2201      	movs	r2, #1
 80012d2:	2120      	movs	r1, #32
 80012d4:	0018      	movs	r0, r3
 80012d6:	f002 f86b 	bl	80033b0 <HAL_GPIO_WritePin>
}
 80012da:	46c0      	nop			@ (mov r8, r8)
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}

080012e0 <ST7735_Reset>:

void ST7735_Reset()
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 80012e4:	23a0      	movs	r3, #160	@ 0xa0
 80012e6:	05db      	lsls	r3, r3, #23
 80012e8:	2200      	movs	r2, #0
 80012ea:	2108      	movs	r1, #8
 80012ec:	0018      	movs	r0, r3
 80012ee:	f002 f85f 	bl	80033b0 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 80012f2:	2005      	movs	r0, #5
 80012f4:	f001 fe02 	bl	8002efc <HAL_Delay>
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 80012f8:	23a0      	movs	r3, #160	@ 0xa0
 80012fa:	05db      	lsls	r3, r3, #23
 80012fc:	2201      	movs	r2, #1
 80012fe:	2108      	movs	r1, #8
 8001300:	0018      	movs	r0, r3
 8001302:	f002 f855 	bl	80033b0 <HAL_GPIO_WritePin>
}
 8001306:	46c0      	nop			@ (mov r8, r8)
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}

0800130c <ST7735_WriteCommand>:

  void ST7735_WriteCommand(uint8_t cmd)
  {
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	0002      	movs	r2, r0
 8001314:	1dfb      	adds	r3, r7, #7
 8001316:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 8001318:	23a0      	movs	r3, #160	@ 0xa0
 800131a:	05db      	lsls	r3, r3, #23
 800131c:	2200      	movs	r2, #0
 800131e:	2110      	movs	r1, #16
 8001320:	0018      	movs	r0, r3
 8001322:	f002 f845 	bl	80033b0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8001326:	2301      	movs	r3, #1
 8001328:	425b      	negs	r3, r3
 800132a:	1df9      	adds	r1, r7, #7
 800132c:	4803      	ldr	r0, [pc, #12]	@ (800133c <ST7735_WriteCommand+0x30>)
 800132e:	2201      	movs	r2, #1
 8001330:	f003 feea 	bl	8005108 <HAL_SPI_Transmit>
}
 8001334:	46c0      	nop			@ (mov r8, r8)
 8001336:	46bd      	mov	sp, r7
 8001338:	b002      	add	sp, #8
 800133a:	bd80      	pop	{r7, pc}
 800133c:	20000220 	.word	0x20000220

08001340 <ST7735_WriteData>:

void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 800134a:	23a0      	movs	r3, #160	@ 0xa0
 800134c:	05db      	lsls	r3, r3, #23
 800134e:	2201      	movs	r2, #1
 8001350:	2110      	movs	r1, #16
 8001352:	0018      	movs	r0, r3
 8001354:	f002 f82c 	bl	80033b0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	b29a      	uxth	r2, r3
 800135c:	2301      	movs	r3, #1
 800135e:	425b      	negs	r3, r3
 8001360:	6879      	ldr	r1, [r7, #4]
 8001362:	4803      	ldr	r0, [pc, #12]	@ (8001370 <ST7735_WriteData+0x30>)
 8001364:	f003 fed0 	bl	8005108 <HAL_SPI_Transmit>
}
 8001368:	46c0      	nop			@ (mov r8, r8)
 800136a:	46bd      	mov	sp, r7
 800136c:	b002      	add	sp, #8
 800136e:	bd80      	pop	{r7, pc}
 8001370:	20000220 	.word	0x20000220

08001374 <DisplayInit>:

void DisplayInit(const uint8_t *addr)
{
 8001374:	b590      	push	{r4, r7, lr}
 8001376:	b085      	sub	sp, #20
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	1c5a      	adds	r2, r3, #1
 8001380:	607a      	str	r2, [r7, #4]
 8001382:	220f      	movs	r2, #15
 8001384:	18ba      	adds	r2, r7, r2
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	7013      	strb	r3, [r2, #0]
    while(numCommands--) {
 800138a:	e04a      	b.n	8001422 <DisplayInit+0xae>
        uint8_t cmd = *addr++;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	1c5a      	adds	r2, r3, #1
 8001390:	607a      	str	r2, [r7, #4]
 8001392:	210b      	movs	r1, #11
 8001394:	187a      	adds	r2, r7, r1
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	7013      	strb	r3, [r2, #0]
        ST7735_WriteCommand(cmd);
 800139a:	187b      	adds	r3, r7, r1
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	0018      	movs	r0, r3
 80013a0:	f7ff ffb4 	bl	800130c <ST7735_WriteCommand>

        numArgs = *addr++;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	1c5a      	adds	r2, r3, #1
 80013a8:	607a      	str	r2, [r7, #4]
 80013aa:	200a      	movs	r0, #10
 80013ac:	183a      	adds	r2, r7, r0
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	7013      	strb	r3, [r2, #0]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 80013b2:	183b      	adds	r3, r7, r0
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	b29a      	uxth	r2, r3
 80013b8:	230c      	movs	r3, #12
 80013ba:	18fb      	adds	r3, r7, r3
 80013bc:	2180      	movs	r1, #128	@ 0x80
 80013be:	400a      	ands	r2, r1
 80013c0:	801a      	strh	r2, [r3, #0]
        numArgs &= ~DELAY;
 80013c2:	183b      	adds	r3, r7, r0
 80013c4:	183a      	adds	r2, r7, r0
 80013c6:	7812      	ldrb	r2, [r2, #0]
 80013c8:	217f      	movs	r1, #127	@ 0x7f
 80013ca:	400a      	ands	r2, r1
 80013cc:	701a      	strb	r2, [r3, #0]
        if(numArgs) {
 80013ce:	183b      	adds	r3, r7, r0
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d00c      	beq.n	80013f0 <DisplayInit+0x7c>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 80013d6:	0004      	movs	r4, r0
 80013d8:	183b      	adds	r3, r7, r0
 80013da:	781a      	ldrb	r2, [r3, #0]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	0011      	movs	r1, r2
 80013e0:	0018      	movs	r0, r3
 80013e2:	f7ff ffad 	bl	8001340 <ST7735_WriteData>
            addr += numArgs;
 80013e6:	193b      	adds	r3, r7, r4
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	687a      	ldr	r2, [r7, #4]
 80013ec:	18d3      	adds	r3, r2, r3
 80013ee:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 80013f0:	210c      	movs	r1, #12
 80013f2:	187b      	adds	r3, r7, r1
 80013f4:	881b      	ldrh	r3, [r3, #0]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d013      	beq.n	8001422 <DisplayInit+0xae>
            ms = *addr++;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	1c5a      	adds	r2, r3, #1
 80013fe:	607a      	str	r2, [r7, #4]
 8001400:	781a      	ldrb	r2, [r3, #0]
 8001402:	187b      	adds	r3, r7, r1
 8001404:	801a      	strh	r2, [r3, #0]
            if(ms == 255) ms = 500;
 8001406:	187b      	adds	r3, r7, r1
 8001408:	881b      	ldrh	r3, [r3, #0]
 800140a:	2bff      	cmp	r3, #255	@ 0xff
 800140c:	d103      	bne.n	8001416 <DisplayInit+0xa2>
 800140e:	187b      	adds	r3, r7, r1
 8001410:	22fa      	movs	r2, #250	@ 0xfa
 8001412:	0052      	lsls	r2, r2, #1
 8001414:	801a      	strh	r2, [r3, #0]
            HAL_Delay(ms);
 8001416:	230c      	movs	r3, #12
 8001418:	18fb      	adds	r3, r7, r3
 800141a:	881b      	ldrh	r3, [r3, #0]
 800141c:	0018      	movs	r0, r3
 800141e:	f001 fd6d 	bl	8002efc <HAL_Delay>
    while(numCommands--) {
 8001422:	220f      	movs	r2, #15
 8001424:	18bb      	adds	r3, r7, r2
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	18ba      	adds	r2, r7, r2
 800142a:	1e59      	subs	r1, r3, #1
 800142c:	7011      	strb	r1, [r2, #0]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d1ac      	bne.n	800138c <DisplayInit+0x18>
        }
    }
}
 8001432:	46c0      	nop			@ (mov r8, r8)
 8001434:	46c0      	nop			@ (mov r8, r8)
 8001436:	46bd      	mov	sp, r7
 8001438:	b005      	add	sp, #20
 800143a:	bd90      	pop	{r4, r7, pc}

0800143c <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 800143c:	b5b0      	push	{r4, r5, r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
 8001442:	0005      	movs	r5, r0
 8001444:	000c      	movs	r4, r1
 8001446:	0010      	movs	r0, r2
 8001448:	0019      	movs	r1, r3
 800144a:	1dfb      	adds	r3, r7, #7
 800144c:	1c2a      	adds	r2, r5, #0
 800144e:	701a      	strb	r2, [r3, #0]
 8001450:	1dbb      	adds	r3, r7, #6
 8001452:	1c22      	adds	r2, r4, #0
 8001454:	701a      	strb	r2, [r3, #0]
 8001456:	1d7b      	adds	r3, r7, #5
 8001458:	1c02      	adds	r2, r0, #0
 800145a:	701a      	strb	r2, [r3, #0]
 800145c:	1d3b      	adds	r3, r7, #4
 800145e:	1c0a      	adds	r2, r1, #0
 8001460:	701a      	strb	r2, [r3, #0]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8001462:	202a      	movs	r0, #42	@ 0x2a
 8001464:	f7ff ff52 	bl	800130c <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 8001468:	210c      	movs	r1, #12
 800146a:	187b      	adds	r3, r7, r1
 800146c:	2200      	movs	r2, #0
 800146e:	701a      	strb	r2, [r3, #0]
 8001470:	4b1c      	ldr	r3, [pc, #112]	@ (80014e4 <ST7735_SetAddressWindow+0xa8>)
 8001472:	781a      	ldrb	r2, [r3, #0]
 8001474:	1dfb      	adds	r3, r7, #7
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	18d3      	adds	r3, r2, r3
 800147a:	b2da      	uxtb	r2, r3
 800147c:	187b      	adds	r3, r7, r1
 800147e:	705a      	strb	r2, [r3, #1]
 8001480:	187b      	adds	r3, r7, r1
 8001482:	2200      	movs	r2, #0
 8001484:	709a      	strb	r2, [r3, #2]
 8001486:	4b17      	ldr	r3, [pc, #92]	@ (80014e4 <ST7735_SetAddressWindow+0xa8>)
 8001488:	781a      	ldrb	r2, [r3, #0]
 800148a:	1d7b      	adds	r3, r7, #5
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	18d3      	adds	r3, r2, r3
 8001490:	b2da      	uxtb	r2, r3
 8001492:	187b      	adds	r3, r7, r1
 8001494:	70da      	strb	r2, [r3, #3]
    ST7735_WriteData(data, sizeof(data));
 8001496:	000c      	movs	r4, r1
 8001498:	187b      	adds	r3, r7, r1
 800149a:	2104      	movs	r1, #4
 800149c:	0018      	movs	r0, r3
 800149e:	f7ff ff4f 	bl	8001340 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 80014a2:	202b      	movs	r0, #43	@ 0x2b
 80014a4:	f7ff ff32 	bl	800130c <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 80014a8:	4b0f      	ldr	r3, [pc, #60]	@ (80014e8 <ST7735_SetAddressWindow+0xac>)
 80014aa:	781a      	ldrb	r2, [r3, #0]
 80014ac:	1dbb      	adds	r3, r7, #6
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	18d3      	adds	r3, r2, r3
 80014b2:	b2da      	uxtb	r2, r3
 80014b4:	0021      	movs	r1, r4
 80014b6:	187b      	adds	r3, r7, r1
 80014b8:	705a      	strb	r2, [r3, #1]
    data[3] = y1 + _ystart;
 80014ba:	4b0b      	ldr	r3, [pc, #44]	@ (80014e8 <ST7735_SetAddressWindow+0xac>)
 80014bc:	781a      	ldrb	r2, [r3, #0]
 80014be:	1d3b      	adds	r3, r7, #4
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	18d3      	adds	r3, r2, r3
 80014c4:	b2da      	uxtb	r2, r3
 80014c6:	187b      	adds	r3, r7, r1
 80014c8:	70da      	strb	r2, [r3, #3]
    ST7735_WriteData(data, sizeof(data));
 80014ca:	187b      	adds	r3, r7, r1
 80014cc:	2104      	movs	r1, #4
 80014ce:	0018      	movs	r0, r3
 80014d0:	f7ff ff36 	bl	8001340 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 80014d4:	202c      	movs	r0, #44	@ 0x2c
 80014d6:	f7ff ff19 	bl	800130c <ST7735_WriteCommand>
}
 80014da:	46c0      	nop			@ (mov r8, r8)
 80014dc:	46bd      	mov	sp, r7
 80014de:	b004      	add	sp, #16
 80014e0:	bdb0      	pop	{r4, r5, r7, pc}
 80014e2:	46c0      	nop			@ (mov r8, r8)
 80014e4:	2000008b 	.word	0x2000008b
 80014e8:	2000008c 	.word	0x2000008c

080014ec <ST7735_Init>:

void ST7735_Init(uint8_t rotation)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	0002      	movs	r2, r0
 80014f4:	1dfb      	adds	r3, r7, #7
 80014f6:	701a      	strb	r2, [r3, #0]
    ST7735_Select();
 80014f8:	f7ff feda 	bl	80012b0 <ST7735_Select>
    ST7735_Reset();
 80014fc:	f7ff fef0 	bl	80012e0 <ST7735_Reset>
    DisplayInit(init_cmds1);
 8001500:	4b0e      	ldr	r3, [pc, #56]	@ (800153c <ST7735_Init+0x50>)
 8001502:	0018      	movs	r0, r3
 8001504:	f7ff ff36 	bl	8001374 <DisplayInit>
    DisplayInit(init_cmds2);
 8001508:	4b0d      	ldr	r3, [pc, #52]	@ (8001540 <ST7735_Init+0x54>)
 800150a:	0018      	movs	r0, r3
 800150c:	f7ff ff32 	bl	8001374 <DisplayInit>
    DisplayInit(init_cmds3);
 8001510:	4b0c      	ldr	r3, [pc, #48]	@ (8001544 <ST7735_Init+0x58>)
 8001512:	0018      	movs	r0, r3
 8001514:	f7ff ff2e 	bl	8001374 <DisplayInit>

#elif ST7735_IS_128X128
    _colstart = 2;
    _rowstart = 3;
#else
    _colstart = 0;
 8001518:	4b0b      	ldr	r3, [pc, #44]	@ (8001548 <ST7735_Init+0x5c>)
 800151a:	2200      	movs	r2, #0
 800151c:	701a      	strb	r2, [r3, #0]
    _rowstart = 0;
 800151e:	4b0b      	ldr	r3, [pc, #44]	@ (800154c <ST7735_Init+0x60>)
 8001520:	2200      	movs	r2, #0
 8001522:	701a      	strb	r2, [r3, #0]
#endif
    ST7735_SetRotation (rotation);
 8001524:	1dfb      	adds	r3, r7, #7
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	0018      	movs	r0, r3
 800152a:	f000 f811 	bl	8001550 <ST7735_SetRotation>
    ST7735_Unselect();
 800152e:	f7ff fecb 	bl	80012c8 <ST7735_Unselect>

}
 8001532:	46c0      	nop			@ (mov r8, r8)
 8001534:	46bd      	mov	sp, r7
 8001536:	b002      	add	sp, #8
 8001538:	bd80      	pop	{r7, pc}
 800153a:	46c0      	nop			@ (mov r8, r8)
 800153c:	08008b9c 	.word	0x08008b9c
 8001540:	08008bd4 	.word	0x08008bd4
 8001544:	08008be4 	.word	0x08008be4
 8001548:	20000089 	.word	0x20000089
 800154c:	2000008a 	.word	0x2000008a

08001550 <ST7735_SetRotation>:

void ST7735_SetRotation(uint8_t m)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0
 8001556:	0002      	movs	r2, r0
 8001558:	1dfb      	adds	r3, r7, #7
 800155a:	701a      	strb	r2, [r3, #0]

  uint8_t madctl = 0;
 800155c:	230f      	movs	r3, #15
 800155e:	18fb      	adds	r3, r7, r3
 8001560:	2200      	movs	r2, #0
 8001562:	701a      	strb	r2, [r3, #0]

  rotation = m % 4; // can't be higher than 3
 8001564:	1dfb      	adds	r3, r7, #7
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	2203      	movs	r2, #3
 800156a:	4013      	ands	r3, r2
 800156c:	b2da      	uxtb	r2, r3
 800156e:	4b36      	ldr	r3, [pc, #216]	@ (8001648 <ST7735_SetRotation+0xf8>)
 8001570:	701a      	strb	r2, [r3, #0]

  switch (rotation)
 8001572:	4b35      	ldr	r3, [pc, #212]	@ (8001648 <ST7735_SetRotation+0xf8>)
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	2b03      	cmp	r3, #3
 8001578:	d041      	beq.n	80015fe <ST7735_SetRotation+0xae>
 800157a:	dc53      	bgt.n	8001624 <ST7735_SetRotation+0xd4>
 800157c:	2b02      	cmp	r3, #2
 800157e:	d02b      	beq.n	80015d8 <ST7735_SetRotation+0x88>
 8001580:	dc50      	bgt.n	8001624 <ST7735_SetRotation+0xd4>
 8001582:	2b00      	cmp	r3, #0
 8001584:	d002      	beq.n	800158c <ST7735_SetRotation+0x3c>
 8001586:	2b01      	cmp	r3, #1
 8001588:	d013      	beq.n	80015b2 <ST7735_SetRotation+0x62>
 800158a:	e04b      	b.n	8001624 <ST7735_SetRotation+0xd4>
  {
  case 0:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 800158c:	230f      	movs	r3, #15
 800158e:	18fb      	adds	r3, r7, r3
 8001590:	22c0      	movs	r2, #192	@ 0xc0
 8001592:	701a      	strb	r2, [r3, #0]
      _height = ST7735_HEIGHT;
 8001594:	4b2d      	ldr	r3, [pc, #180]	@ (800164c <ST7735_SetRotation+0xfc>)
 8001596:	22a0      	movs	r2, #160	@ 0xa0
 8001598:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 800159a:	4b2d      	ldr	r3, [pc, #180]	@ (8001650 <ST7735_SetRotation+0x100>)
 800159c:	2280      	movs	r2, #128	@ 0x80
 800159e:	801a      	strh	r2, [r3, #0]
      _xstart = _colstart;
 80015a0:	4b2c      	ldr	r3, [pc, #176]	@ (8001654 <ST7735_SetRotation+0x104>)
 80015a2:	781a      	ldrb	r2, [r3, #0]
 80015a4:	4b2c      	ldr	r3, [pc, #176]	@ (8001658 <ST7735_SetRotation+0x108>)
 80015a6:	701a      	strb	r2, [r3, #0]
      _ystart = _rowstart;
 80015a8:	4b2c      	ldr	r3, [pc, #176]	@ (800165c <ST7735_SetRotation+0x10c>)
 80015aa:	781a      	ldrb	r2, [r3, #0]
 80015ac:	4b2c      	ldr	r3, [pc, #176]	@ (8001660 <ST7735_SetRotation+0x110>)
 80015ae:	701a      	strb	r2, [r3, #0]
#endif
    break;
 80015b0:	e038      	b.n	8001624 <ST7735_SetRotation+0xd4>
  case 1:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 80015b2:	230f      	movs	r3, #15
 80015b4:	18fb      	adds	r3, r7, r3
 80015b6:	22a0      	movs	r2, #160	@ 0xa0
 80015b8:	701a      	strb	r2, [r3, #0]
      _width = ST7735_HEIGHT;
 80015ba:	4b25      	ldr	r3, [pc, #148]	@ (8001650 <ST7735_SetRotation+0x100>)
 80015bc:	22a0      	movs	r2, #160	@ 0xa0
 80015be:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 80015c0:	4b22      	ldr	r3, [pc, #136]	@ (800164c <ST7735_SetRotation+0xfc>)
 80015c2:	2280      	movs	r2, #128	@ 0x80
 80015c4:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 80015c6:	4b23      	ldr	r3, [pc, #140]	@ (8001654 <ST7735_SetRotation+0x104>)
 80015c8:	781a      	ldrb	r2, [r3, #0]
 80015ca:	4b25      	ldr	r3, [pc, #148]	@ (8001660 <ST7735_SetRotation+0x110>)
 80015cc:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 80015ce:	4b23      	ldr	r3, [pc, #140]	@ (800165c <ST7735_SetRotation+0x10c>)
 80015d0:	781a      	ldrb	r2, [r3, #0]
 80015d2:	4b21      	ldr	r3, [pc, #132]	@ (8001658 <ST7735_SetRotation+0x108>)
 80015d4:	701a      	strb	r2, [r3, #0]
#endif
    break;
 80015d6:	e025      	b.n	8001624 <ST7735_SetRotation+0xd4>
  case 2:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_RGB;
 80015d8:	230f      	movs	r3, #15
 80015da:	18fb      	adds	r3, r7, r3
 80015dc:	2200      	movs	r2, #0
 80015de:	701a      	strb	r2, [r3, #0]
      _height = ST7735_HEIGHT;
 80015e0:	4b1a      	ldr	r3, [pc, #104]	@ (800164c <ST7735_SetRotation+0xfc>)
 80015e2:	22a0      	movs	r2, #160	@ 0xa0
 80015e4:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 80015e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001650 <ST7735_SetRotation+0x100>)
 80015e8:	2280      	movs	r2, #128	@ 0x80
 80015ea:	801a      	strh	r2, [r3, #0]
    _xstart = _colstart;
 80015ec:	4b19      	ldr	r3, [pc, #100]	@ (8001654 <ST7735_SetRotation+0x104>)
 80015ee:	781a      	ldrb	r2, [r3, #0]
 80015f0:	4b19      	ldr	r3, [pc, #100]	@ (8001658 <ST7735_SetRotation+0x108>)
 80015f2:	701a      	strb	r2, [r3, #0]
    _ystart = _rowstart;
 80015f4:	4b19      	ldr	r3, [pc, #100]	@ (800165c <ST7735_SetRotation+0x10c>)
 80015f6:	781a      	ldrb	r2, [r3, #0]
 80015f8:	4b19      	ldr	r3, [pc, #100]	@ (8001660 <ST7735_SetRotation+0x110>)
 80015fa:	701a      	strb	r2, [r3, #0]
#endif
    break;
 80015fc:	e012      	b.n	8001624 <ST7735_SetRotation+0xd4>
  case 3:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 80015fe:	230f      	movs	r3, #15
 8001600:	18fb      	adds	r3, r7, r3
 8001602:	2260      	movs	r2, #96	@ 0x60
 8001604:	701a      	strb	r2, [r3, #0]
      _width = ST7735_HEIGHT;
 8001606:	4b12      	ldr	r3, [pc, #72]	@ (8001650 <ST7735_SetRotation+0x100>)
 8001608:	22a0      	movs	r2, #160	@ 0xa0
 800160a:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 800160c:	4b0f      	ldr	r3, [pc, #60]	@ (800164c <ST7735_SetRotation+0xfc>)
 800160e:	2280      	movs	r2, #128	@ 0x80
 8001610:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8001612:	4b10      	ldr	r3, [pc, #64]	@ (8001654 <ST7735_SetRotation+0x104>)
 8001614:	781a      	ldrb	r2, [r3, #0]
 8001616:	4b12      	ldr	r3, [pc, #72]	@ (8001660 <ST7735_SetRotation+0x110>)
 8001618:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 800161a:	4b10      	ldr	r3, [pc, #64]	@ (800165c <ST7735_SetRotation+0x10c>)
 800161c:	781a      	ldrb	r2, [r3, #0]
 800161e:	4b0e      	ldr	r3, [pc, #56]	@ (8001658 <ST7735_SetRotation+0x108>)
 8001620:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8001622:	46c0      	nop			@ (mov r8, r8)
  }
  ST7735_Select();
 8001624:	f7ff fe44 	bl	80012b0 <ST7735_Select>
  ST7735_WriteCommand(ST7735_MADCTL);
 8001628:	2036      	movs	r0, #54	@ 0x36
 800162a:	f7ff fe6f 	bl	800130c <ST7735_WriteCommand>
  ST7735_WriteData(&madctl,1);
 800162e:	230f      	movs	r3, #15
 8001630:	18fb      	adds	r3, r7, r3
 8001632:	2101      	movs	r1, #1
 8001634:	0018      	movs	r0, r3
 8001636:	f7ff fe83 	bl	8001340 <ST7735_WriteData>
  ST7735_Unselect();
 800163a:	f7ff fe45 	bl	80012c8 <ST7735_Unselect>
}
 800163e:	46c0      	nop			@ (mov r8, r8)
 8001640:	46bd      	mov	sp, r7
 8001642:	b004      	add	sp, #16
 8001644:	bd80      	pop	{r7, pc}
 8001646:	46c0      	nop			@ (mov r8, r8)
 8001648:	20000088 	.word	0x20000088
 800164c:	20000086 	.word	0x20000086
 8001650:	20000084 	.word	0x20000084
 8001654:	20000089 	.word	0x20000089
 8001658:	2000008b 	.word	0x2000008b
 800165c:	2000008a 	.word	0x2000008a
 8001660:	2000008c 	.word	0x2000008c

08001664 <ST7735_DrawPixel>:

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8001664:	b590      	push	{r4, r7, lr}
 8001666:	b085      	sub	sp, #20
 8001668:	af00      	add	r7, sp, #0
 800166a:	0004      	movs	r4, r0
 800166c:	0008      	movs	r0, r1
 800166e:	0011      	movs	r1, r2
 8001670:	1dbb      	adds	r3, r7, #6
 8001672:	1c22      	adds	r2, r4, #0
 8001674:	801a      	strh	r2, [r3, #0]
 8001676:	1d3b      	adds	r3, r7, #4
 8001678:	1c02      	adds	r2, r0, #0
 800167a:	801a      	strh	r2, [r3, #0]
 800167c:	1cbb      	adds	r3, r7, #2
 800167e:	1c0a      	adds	r2, r1, #0
 8001680:	801a      	strh	r2, [r3, #0]
    if((x >= _width) || (y >= _height))
 8001682:	1dbb      	adds	r3, r7, #6
 8001684:	881b      	ldrh	r3, [r3, #0]
 8001686:	4a1c      	ldr	r2, [pc, #112]	@ (80016f8 <ST7735_DrawPixel+0x94>)
 8001688:	2100      	movs	r1, #0
 800168a:	5e52      	ldrsh	r2, [r2, r1]
 800168c:	4293      	cmp	r3, r2
 800168e:	da2f      	bge.n	80016f0 <ST7735_DrawPixel+0x8c>
 8001690:	1d3b      	adds	r3, r7, #4
 8001692:	881b      	ldrh	r3, [r3, #0]
 8001694:	4a19      	ldr	r2, [pc, #100]	@ (80016fc <ST7735_DrawPixel+0x98>)
 8001696:	2100      	movs	r1, #0
 8001698:	5e52      	ldrsh	r2, [r2, r1]
 800169a:	4293      	cmp	r3, r2
 800169c:	da28      	bge.n	80016f0 <ST7735_DrawPixel+0x8c>
        return;

    ST7735_Select();
 800169e:	f7ff fe07 	bl	80012b0 <ST7735_Select>

    ST7735_SetAddressWindow(x, y, x+1, y+1);
 80016a2:	1dbb      	adds	r3, r7, #6
 80016a4:	881b      	ldrh	r3, [r3, #0]
 80016a6:	b2d8      	uxtb	r0, r3
 80016a8:	1d3b      	adds	r3, r7, #4
 80016aa:	881b      	ldrh	r3, [r3, #0]
 80016ac:	b2d9      	uxtb	r1, r3
 80016ae:	1dbb      	adds	r3, r7, #6
 80016b0:	881b      	ldrh	r3, [r3, #0]
 80016b2:	b2db      	uxtb	r3, r3
 80016b4:	3301      	adds	r3, #1
 80016b6:	b2da      	uxtb	r2, r3
 80016b8:	1d3b      	adds	r3, r7, #4
 80016ba:	881b      	ldrh	r3, [r3, #0]
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	3301      	adds	r3, #1
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	f7ff febb 	bl	800143c <ST7735_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 80016c6:	1cbb      	adds	r3, r7, #2
 80016c8:	881b      	ldrh	r3, [r3, #0]
 80016ca:	0a1b      	lsrs	r3, r3, #8
 80016cc:	b29b      	uxth	r3, r3
 80016ce:	b2da      	uxtb	r2, r3
 80016d0:	210c      	movs	r1, #12
 80016d2:	187b      	adds	r3, r7, r1
 80016d4:	701a      	strb	r2, [r3, #0]
 80016d6:	1cbb      	adds	r3, r7, #2
 80016d8:	881b      	ldrh	r3, [r3, #0]
 80016da:	b2da      	uxtb	r2, r3
 80016dc:	187b      	adds	r3, r7, r1
 80016de:	705a      	strb	r2, [r3, #1]
    ST7735_WriteData(data, sizeof(data));
 80016e0:	187b      	adds	r3, r7, r1
 80016e2:	2102      	movs	r1, #2
 80016e4:	0018      	movs	r0, r3
 80016e6:	f7ff fe2b 	bl	8001340 <ST7735_WriteData>

    ST7735_Unselect();
 80016ea:	f7ff fded 	bl	80012c8 <ST7735_Unselect>
 80016ee:	e000      	b.n	80016f2 <ST7735_DrawPixel+0x8e>
        return;
 80016f0:	46c0      	nop			@ (mov r8, r8)
}
 80016f2:	46bd      	mov	sp, r7
 80016f4:	b005      	add	sp, #20
 80016f6:	bd90      	pop	{r4, r7, pc}
 80016f8:	20000084 	.word	0x20000084
 80016fc:	20000086 	.word	0x20000086

08001700 <ST7735_FillRectangle>:

    ST7735_Unselect();
}

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8001700:	b5b0      	push	{r4, r5, r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	0005      	movs	r5, r0
 8001708:	000c      	movs	r4, r1
 800170a:	0010      	movs	r0, r2
 800170c:	0019      	movs	r1, r3
 800170e:	1dbb      	adds	r3, r7, #6
 8001710:	1c2a      	adds	r2, r5, #0
 8001712:	801a      	strh	r2, [r3, #0]
 8001714:	1d3b      	adds	r3, r7, #4
 8001716:	1c22      	adds	r2, r4, #0
 8001718:	801a      	strh	r2, [r3, #0]
 800171a:	1cbb      	adds	r3, r7, #2
 800171c:	1c02      	adds	r2, r0, #0
 800171e:	801a      	strh	r2, [r3, #0]
 8001720:	003b      	movs	r3, r7
 8001722:	1c0a      	adds	r2, r1, #0
 8001724:	801a      	strh	r2, [r3, #0]
    if((x >= _width) || (y >= _height)) return;
 8001726:	1dbb      	adds	r3, r7, #6
 8001728:	881b      	ldrh	r3, [r3, #0]
 800172a:	4a49      	ldr	r2, [pc, #292]	@ (8001850 <ST7735_FillRectangle+0x150>)
 800172c:	2100      	movs	r1, #0
 800172e:	5e52      	ldrsh	r2, [r2, r1]
 8001730:	4293      	cmp	r3, r2
 8001732:	db00      	blt.n	8001736 <ST7735_FillRectangle+0x36>
 8001734:	e088      	b.n	8001848 <ST7735_FillRectangle+0x148>
 8001736:	1d3b      	adds	r3, r7, #4
 8001738:	881b      	ldrh	r3, [r3, #0]
 800173a:	4a46      	ldr	r2, [pc, #280]	@ (8001854 <ST7735_FillRectangle+0x154>)
 800173c:	2100      	movs	r1, #0
 800173e:	5e52      	ldrsh	r2, [r2, r1]
 8001740:	4293      	cmp	r3, r2
 8001742:	db00      	blt.n	8001746 <ST7735_FillRectangle+0x46>
 8001744:	e080      	b.n	8001848 <ST7735_FillRectangle+0x148>
    if((x + w - 1) >= _width) w = _width - x;
 8001746:	1dbb      	adds	r3, r7, #6
 8001748:	881a      	ldrh	r2, [r3, #0]
 800174a:	1cbb      	adds	r3, r7, #2
 800174c:	881b      	ldrh	r3, [r3, #0]
 800174e:	18d3      	adds	r3, r2, r3
 8001750:	4a3f      	ldr	r2, [pc, #252]	@ (8001850 <ST7735_FillRectangle+0x150>)
 8001752:	2100      	movs	r1, #0
 8001754:	5e52      	ldrsh	r2, [r2, r1]
 8001756:	4293      	cmp	r3, r2
 8001758:	dd08      	ble.n	800176c <ST7735_FillRectangle+0x6c>
 800175a:	4b3d      	ldr	r3, [pc, #244]	@ (8001850 <ST7735_FillRectangle+0x150>)
 800175c:	2200      	movs	r2, #0
 800175e:	5e9b      	ldrsh	r3, [r3, r2]
 8001760:	b299      	uxth	r1, r3
 8001762:	1cbb      	adds	r3, r7, #2
 8001764:	1dba      	adds	r2, r7, #6
 8001766:	8812      	ldrh	r2, [r2, #0]
 8001768:	1a8a      	subs	r2, r1, r2
 800176a:	801a      	strh	r2, [r3, #0]
    if((y + h - 1) >= _height) h = _height - y;
 800176c:	1d3b      	adds	r3, r7, #4
 800176e:	881a      	ldrh	r2, [r3, #0]
 8001770:	003b      	movs	r3, r7
 8001772:	881b      	ldrh	r3, [r3, #0]
 8001774:	18d3      	adds	r3, r2, r3
 8001776:	4a37      	ldr	r2, [pc, #220]	@ (8001854 <ST7735_FillRectangle+0x154>)
 8001778:	2100      	movs	r1, #0
 800177a:	5e52      	ldrsh	r2, [r2, r1]
 800177c:	4293      	cmp	r3, r2
 800177e:	dd08      	ble.n	8001792 <ST7735_FillRectangle+0x92>
 8001780:	4b34      	ldr	r3, [pc, #208]	@ (8001854 <ST7735_FillRectangle+0x154>)
 8001782:	2200      	movs	r2, #0
 8001784:	5e9b      	ldrsh	r3, [r3, r2]
 8001786:	b299      	uxth	r1, r3
 8001788:	003b      	movs	r3, r7
 800178a:	1d3a      	adds	r2, r7, #4
 800178c:	8812      	ldrh	r2, [r2, #0]
 800178e:	1a8a      	subs	r2, r1, r2
 8001790:	801a      	strh	r2, [r3, #0]

    ST7735_Select();
 8001792:	f7ff fd8d 	bl	80012b0 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8001796:	1dbb      	adds	r3, r7, #6
 8001798:	881b      	ldrh	r3, [r3, #0]
 800179a:	b2d8      	uxtb	r0, r3
 800179c:	1d3b      	adds	r3, r7, #4
 800179e:	881b      	ldrh	r3, [r3, #0]
 80017a0:	b2d9      	uxtb	r1, r3
 80017a2:	1dbb      	adds	r3, r7, #6
 80017a4:	881b      	ldrh	r3, [r3, #0]
 80017a6:	b2da      	uxtb	r2, r3
 80017a8:	1cbb      	adds	r3, r7, #2
 80017aa:	881b      	ldrh	r3, [r3, #0]
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	18d3      	adds	r3, r2, r3
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	3b01      	subs	r3, #1
 80017b4:	b2dc      	uxtb	r4, r3
 80017b6:	1d3b      	adds	r3, r7, #4
 80017b8:	881b      	ldrh	r3, [r3, #0]
 80017ba:	b2da      	uxtb	r2, r3
 80017bc:	003b      	movs	r3, r7
 80017be:	881b      	ldrh	r3, [r3, #0]
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	18d3      	adds	r3, r2, r3
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	3b01      	subs	r3, #1
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	0022      	movs	r2, r4
 80017cc:	f7ff fe36 	bl	800143c <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 80017d0:	2120      	movs	r1, #32
 80017d2:	187b      	adds	r3, r7, r1
 80017d4:	881b      	ldrh	r3, [r3, #0]
 80017d6:	0a1b      	lsrs	r3, r3, #8
 80017d8:	b29b      	uxth	r3, r3
 80017da:	b2da      	uxtb	r2, r3
 80017dc:	200c      	movs	r0, #12
 80017de:	183b      	adds	r3, r7, r0
 80017e0:	701a      	strb	r2, [r3, #0]
 80017e2:	187b      	adds	r3, r7, r1
 80017e4:	881b      	ldrh	r3, [r3, #0]
 80017e6:	b2da      	uxtb	r2, r3
 80017e8:	183b      	adds	r3, r7, r0
 80017ea:	705a      	strb	r2, [r3, #1]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 80017ec:	23a0      	movs	r3, #160	@ 0xa0
 80017ee:	05db      	lsls	r3, r3, #23
 80017f0:	2201      	movs	r2, #1
 80017f2:	2110      	movs	r1, #16
 80017f4:	0018      	movs	r0, r3
 80017f6:	f001 fddb 	bl	80033b0 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 80017fa:	1d3b      	adds	r3, r7, #4
 80017fc:	003a      	movs	r2, r7
 80017fe:	8812      	ldrh	r2, [r2, #0]
 8001800:	801a      	strh	r2, [r3, #0]
 8001802:	e01a      	b.n	800183a <ST7735_FillRectangle+0x13a>
        for(x = w; x > 0; x--) {
 8001804:	1dbb      	adds	r3, r7, #6
 8001806:	1cba      	adds	r2, r7, #2
 8001808:	8812      	ldrh	r2, [r2, #0]
 800180a:	801a      	strh	r2, [r3, #0]
 800180c:	e00c      	b.n	8001828 <ST7735_FillRectangle+0x128>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 800180e:	2301      	movs	r3, #1
 8001810:	425b      	negs	r3, r3
 8001812:	220c      	movs	r2, #12
 8001814:	18b9      	adds	r1, r7, r2
 8001816:	4810      	ldr	r0, [pc, #64]	@ (8001858 <ST7735_FillRectangle+0x158>)
 8001818:	2202      	movs	r2, #2
 800181a:	f003 fc75 	bl	8005108 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 800181e:	1dbb      	adds	r3, r7, #6
 8001820:	881a      	ldrh	r2, [r3, #0]
 8001822:	1dbb      	adds	r3, r7, #6
 8001824:	3a01      	subs	r2, #1
 8001826:	801a      	strh	r2, [r3, #0]
 8001828:	1dbb      	adds	r3, r7, #6
 800182a:	881b      	ldrh	r3, [r3, #0]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d1ee      	bne.n	800180e <ST7735_FillRectangle+0x10e>
    for(y = h; y > 0; y--) {
 8001830:	1d3b      	adds	r3, r7, #4
 8001832:	881a      	ldrh	r2, [r3, #0]
 8001834:	1d3b      	adds	r3, r7, #4
 8001836:	3a01      	subs	r2, #1
 8001838:	801a      	strh	r2, [r3, #0]
 800183a:	1d3b      	adds	r3, r7, #4
 800183c:	881b      	ldrh	r3, [r3, #0]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d1e0      	bne.n	8001804 <ST7735_FillRectangle+0x104>
        }
    }

    ST7735_Unselect();
 8001842:	f7ff fd41 	bl	80012c8 <ST7735_Unselect>
 8001846:	e000      	b.n	800184a <ST7735_FillRectangle+0x14a>
    if((x >= _width) || (y >= _height)) return;
 8001848:	46c0      	nop			@ (mov r8, r8)
}
 800184a:	46bd      	mov	sp, r7
 800184c:	b004      	add	sp, #16
 800184e:	bdb0      	pop	{r4, r5, r7, pc}
 8001850:	20000084 	.word	0x20000084
 8001854:	20000086 	.word	0x20000086
 8001858:	20000220 	.word	0x20000220

0800185c <minmea_tocoord>:
/**
 * Convert a raw coordinate to a floating point DD.DDD... value.
 * Returns NaN for "unknown" values.
 */
static inline float minmea_tocoord(struct minmea_float *f)
{
 800185c:	b5b0      	push	{r4, r5, r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
    if (f->scale == 0)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d101      	bne.n	8001870 <minmea_tocoord+0x14>
        return NAN;
 800186c:	4b1c      	ldr	r3, [pc, #112]	@ (80018e0 <minmea_tocoord+0x84>)
 800186e:	e033      	b.n	80018d8 <minmea_tocoord+0x7c>
    int_least32_t degrees = f->value / (f->scale * 100);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	2164      	movs	r1, #100	@ 0x64
 800187a:	434b      	muls	r3, r1
 800187c:	0019      	movs	r1, r3
 800187e:	0010      	movs	r0, r2
 8001880:	f7fe fcde 	bl	8000240 <__divsi3>
 8001884:	0003      	movs	r3, r0
 8001886:	60fb      	str	r3, [r7, #12]
    int_least32_t minutes = f->value % (f->scale * 100);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	2164      	movs	r1, #100	@ 0x64
 8001892:	434b      	muls	r3, r1
 8001894:	0019      	movs	r1, r3
 8001896:	0010      	movs	r0, r2
 8001898:	f7fe fdb8 	bl	800040c <__aeabi_idivmod>
 800189c:	000b      	movs	r3, r1
 800189e:	60bb      	str	r3, [r7, #8]
    return (float) degrees + (float) minutes / (60 * f->scale);
 80018a0:	68f8      	ldr	r0, [r7, #12]
 80018a2:	f7ff faad 	bl	8000e00 <__aeabi_i2f>
 80018a6:	1c04      	adds	r4, r0, #0
 80018a8:	68b8      	ldr	r0, [r7, #8]
 80018aa:	f7ff faa9 	bl	8000e00 <__aeabi_i2f>
 80018ae:	1c05      	adds	r5, r0, #0
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	685a      	ldr	r2, [r3, #4]
 80018b4:	0013      	movs	r3, r2
 80018b6:	011b      	lsls	r3, r3, #4
 80018b8:	1a9b      	subs	r3, r3, r2
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	0018      	movs	r0, r3
 80018be:	f7ff fa9f 	bl	8000e00 <__aeabi_i2f>
 80018c2:	1c03      	adds	r3, r0, #0
 80018c4:	1c19      	adds	r1, r3, #0
 80018c6:	1c28      	adds	r0, r5, #0
 80018c8:	f7ff f81c 	bl	8000904 <__aeabi_fdiv>
 80018cc:	1c03      	adds	r3, r0, #0
 80018ce:	1c19      	adds	r1, r3, #0
 80018d0:	1c20      	adds	r0, r4, #0
 80018d2:	f7fe fe8d 	bl	80005f0 <__aeabi_fadd>
 80018d6:	1c03      	adds	r3, r0, #0
}
 80018d8:	1c18      	adds	r0, r3, #0
 80018da:	46bd      	mov	sp, r7
 80018dc:	b004      	add	sp, #16
 80018de:	bdb0      	pop	{r4, r5, r7, pc}
 80018e0:	7fc00000 	.word	0x7fc00000

080018e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018e4:	b590      	push	{r4, r7, lr}
 80018e6:	b085      	sub	sp, #20
 80018e8:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018ea:	f001 fa81 	bl	8002df0 <HAL_Init>

  /* USER CODE BEGIN Init */
  MX_I2C1_Init();
 80018ee:	f000 f99d 	bl	8001c2c <MX_I2C1_Init>
  //_ADXL343_Init();

    //Pedometer Setup
    _ADXL343_WriteReg8(0x19, 0x02);
 80018f2:	2102      	movs	r1, #2
 80018f4:	2019      	movs	r0, #25
 80018f6:	f000 fb67 	bl	8001fc8 <_ADXL343_WriteReg8>
    ////wait

    _ADXL343_WriteReg8(0x7C, 0x01);
 80018fa:	2101      	movs	r1, #1
 80018fc:	207c      	movs	r0, #124	@ 0x7c
 80018fe:	f000 fb63 	bl	8001fc8 <_ADXL343_WriteReg8>
     _ADXL343_WriteReg8(0x1A, 0x38);
 8001902:	2138      	movs	r1, #56	@ 0x38
 8001904:	201a      	movs	r0, #26
 8001906:	f000 fb5f 	bl	8001fc8 <_ADXL343_WriteReg8>
    _ADXL343_WriteReg8(0x1B, 0x04);
 800190a:	2104      	movs	r1, #4
 800190c:	201b      	movs	r0, #27
 800190e:	f000 fb5b 	bl	8001fc8 <_ADXL343_WriteReg8>
    _ADXL343_WriteReg8(0x1F, 0x80);
 8001912:	2180      	movs	r1, #128	@ 0x80
 8001914:	201f      	movs	r0, #31
 8001916:	f000 fb57 	bl	8001fc8 <_ADXL343_WriteReg8>
    _ADXL343_WriteReg8(0x21, 0x80);
 800191a:	2180      	movs	r1, #128	@ 0x80
 800191c:	2021      	movs	r0, #33	@ 0x21
 800191e:	f000 fb53 	bl	8001fc8 <_ADXL343_WriteReg8>



    //  //Step Counter
    _ADXL343_WriteReg8(0x18, 0x01); // enable walking mode
 8001922:	2101      	movs	r1, #1
 8001924:	2018      	movs	r0, #24
 8001926:	f000 fb4f 	bl	8001fc8 <_ADXL343_WriteReg8>
    _ADXL343_WriteReg8(0x20, 0x01); // enable step interrupt
 800192a:	2101      	movs	r1, #1
 800192c:	2020      	movs	r0, #32
 800192e:	f000 fb4b 	bl	8001fc8 <_ADXL343_WriteReg8>
    _ADXL343_WriteReg8(0x59, 0x01); // step ctr config
 8001932:	2101      	movs	r1, #1
 8001934:	2059      	movs	r0, #89	@ 0x59
 8001936:	f000 fb47 	bl	8001fc8 <_ADXL343_WriteReg8>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800193a:	f000 f919 	bl	8001b70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800193e:	f000 facb 	bl	8001ed8 <MX_GPIO_Init>

  MX_SPI1_Init();
 8001942:	f000 f9b3 	bl	8001cac <MX_SPI1_Init>
  MX_TIM17_Init();
 8001946:	f000 f9f1 	bl	8001d2c <MX_TIM17_Init>
  MX_USART1_UART_Init();
 800194a:	f000 fa77 	bl	8001e3c <MX_USART1_UART_Init>
  //MX_USART2_UART_Init();
  /* USER CODE BEGIN 2 */
  ST7735_Unselect();
 800194e:	f7ff fcbb 	bl	80012c8 <ST7735_Unselect>
  ST7735_Init(1);
 8001952:	2001      	movs	r0, #1
 8001954:	f7ff fdca 	bl	80014ec <ST7735_Init>
  fillScreen(BLUE);
 8001958:	201f      	movs	r0, #31
 800195a:	f7ff fc8d 	bl	8001278 <fillScreen>
  buffer[0] = 'A';
 800195e:	4b6f      	ldr	r3, [pc, #444]	@ (8001b1c <main+0x238>)
 8001960:	2241      	movs	r2, #65	@ 0x41
 8001962:	701a      	strb	r2, [r3, #0]
  buffer[1] = 'B';
 8001964:	4b6d      	ldr	r3, [pc, #436]	@ (8001b1c <main+0x238>)
 8001966:	2242      	movs	r2, #66	@ 0x42
 8001968:	705a      	strb	r2, [r3, #1]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  fillScreen(BLUE);
 800196a:	201f      	movs	r0, #31
 800196c:	f7ff fc84 	bl	8001278 <fillScreen>
	  _ADXL343_ReadReg8(0x04, &accelX, 1);
 8001970:	4b6b      	ldr	r3, [pc, #428]	@ (8001b20 <main+0x23c>)
 8001972:	2201      	movs	r2, #1
 8001974:	0019      	movs	r1, r3
 8001976:	2004      	movs	r0, #4
 8001978:	f000 faf2 	bl	8001f60 <_ADXL343_ReadReg8>
	  _ADXL343_ReadReg8(0x06, &accelY, 1);
 800197c:	4b69      	ldr	r3, [pc, #420]	@ (8001b24 <main+0x240>)
 800197e:	2201      	movs	r2, #1
 8001980:	0019      	movs	r1, r3
 8001982:	2006      	movs	r0, #6
 8001984:	f000 faec 	bl	8001f60 <_ADXL343_ReadReg8>
	  _ADXL343_ReadReg8(0x08, &accelZ, 1);
 8001988:	4b67      	ldr	r3, [pc, #412]	@ (8001b28 <main+0x244>)
 800198a:	2201      	movs	r2, #1
 800198c:	0019      	movs	r1, r3
 800198e:	2008      	movs	r0, #8
 8001990:	f000 fae6 	bl	8001f60 <_ADXL343_ReadReg8>
	  if(accelY!=0){
 8001994:	4b63      	ldr	r3, [pc, #396]	@ (8001b24 <main+0x240>)
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d01a      	beq.n	80019d2 <main+0xee>
	  sprintf(buffer2, "X:%d - Y:%d - Z:%d ", accelX, accelY, accelZ);
 800199c:	4b60      	ldr	r3, [pc, #384]	@ (8001b20 <main+0x23c>)
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	001a      	movs	r2, r3
 80019a2:	4b60      	ldr	r3, [pc, #384]	@ (8001b24 <main+0x240>)
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	001c      	movs	r4, r3
 80019a8:	4b5f      	ldr	r3, [pc, #380]	@ (8001b28 <main+0x244>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	495f      	ldr	r1, [pc, #380]	@ (8001b2c <main+0x248>)
 80019ae:	4860      	ldr	r0, [pc, #384]	@ (8001b30 <main+0x24c>)
 80019b0:	9300      	str	r3, [sp, #0]
 80019b2:	0023      	movs	r3, r4
 80019b4:	f005 fd78 	bl	80074a8 <siprintf>
	  drawString(10, 10, buffer2, BLACK, GREEN, 1, 1);
 80019b8:	4a5d      	ldr	r2, [pc, #372]	@ (8001b30 <main+0x24c>)
 80019ba:	2301      	movs	r3, #1
 80019bc:	9302      	str	r3, [sp, #8]
 80019be:	2301      	movs	r3, #1
 80019c0:	9301      	str	r3, [sp, #4]
 80019c2:	23fc      	movs	r3, #252	@ 0xfc
 80019c4:	00db      	lsls	r3, r3, #3
 80019c6:	9300      	str	r3, [sp, #0]
 80019c8:	2300      	movs	r3, #0
 80019ca:	210a      	movs	r1, #10
 80019cc:	200a      	movs	r0, #10
 80019ce:	f7ff faed 	bl	8000fac <drawString>
	  }
	  _ADXL343_ReadReg8(0x15, &steps, 1);
 80019d2:	4b58      	ldr	r3, [pc, #352]	@ (8001b34 <main+0x250>)
 80019d4:	2201      	movs	r2, #1
 80019d6:	0019      	movs	r1, r3
 80019d8:	2015      	movs	r0, #21
 80019da:	f000 fac1 	bl	8001f60 <_ADXL343_ReadReg8>

	  sprintf(buffer2, "Steps: %d ", steps);
 80019de:	4b55      	ldr	r3, [pc, #340]	@ (8001b34 <main+0x250>)
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	001a      	movs	r2, r3
 80019e4:	4954      	ldr	r1, [pc, #336]	@ (8001b38 <main+0x254>)
 80019e6:	4b52      	ldr	r3, [pc, #328]	@ (8001b30 <main+0x24c>)
 80019e8:	0018      	movs	r0, r3
 80019ea:	f005 fd5d 	bl	80074a8 <siprintf>
	  drawString(20, 20, buffer2, BLACK, GREEN, 1, 1);
 80019ee:	4a50      	ldr	r2, [pc, #320]	@ (8001b30 <main+0x24c>)
 80019f0:	2301      	movs	r3, #1
 80019f2:	9302      	str	r3, [sp, #8]
 80019f4:	2301      	movs	r3, #1
 80019f6:	9301      	str	r3, [sp, #4]
 80019f8:	23fc      	movs	r3, #252	@ 0xfc
 80019fa:	00db      	lsls	r3, r3, #3
 80019fc:	9300      	str	r3, [sp, #0]
 80019fe:	2300      	movs	r3, #0
 8001a00:	2114      	movs	r1, #20
 8001a02:	2014      	movs	r0, #20
 8001a04:	f7ff fad2 	bl	8000fac <drawString>

	  //while(true){
		 // ii++;
		 // if(ii>60000) break;
		  while(HAL_UART_Receive(&huart1, &(buffer[i]), 1, 0xFFFF)==HAL_OK)
 8001a08:	e079      	b.n	8001afe <main+0x21a>
		  	{
			  printf("aaa");
 8001a0a:	4b4c      	ldr	r3, [pc, #304]	@ (8001b3c <main+0x258>)
 8001a0c:	0018      	movs	r0, r3
 8001a0e:	f005 fd3b 	bl	8007488 <iprintf>
			  if(buffer[i]&&buffer[i]=='\n')
 8001a12:	4b4b      	ldr	r3, [pc, #300]	@ (8001b40 <main+0x25c>)
 8001a14:	881b      	ldrh	r3, [r3, #0]
 8001a16:	b29b      	uxth	r3, r3
 8001a18:	001a      	movs	r2, r3
 8001a1a:	4b40      	ldr	r3, [pc, #256]	@ (8001b1c <main+0x238>)
 8001a1c:	5c9b      	ldrb	r3, [r3, r2]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d066      	beq.n	8001af0 <main+0x20c>
 8001a22:	4b47      	ldr	r3, [pc, #284]	@ (8001b40 <main+0x25c>)
 8001a24:	881b      	ldrh	r3, [r3, #0]
 8001a26:	b29b      	uxth	r3, r3
 8001a28:	001a      	movs	r2, r3
 8001a2a:	4b3c      	ldr	r3, [pc, #240]	@ (8001b1c <main+0x238>)
 8001a2c:	5c9b      	ldrb	r3, [r3, r2]
 8001a2e:	2b0a      	cmp	r3, #10
 8001a30:	d15e      	bne.n	8001af0 <main+0x20c>
				  {


				  if(minmea_parse_rmc(&rmcStruct, &(buffer[1]))){
 8001a32:	4a44      	ldr	r2, [pc, #272]	@ (8001b44 <main+0x260>)
 8001a34:	4b44      	ldr	r3, [pc, #272]	@ (8001b48 <main+0x264>)
 8001a36:	0011      	movs	r1, r2
 8001a38:	0018      	movs	r0, r3
 8001a3a:	f000 fea7 	bl	800278c <minmea_parse_rmc>
 8001a3e:	1e03      	subs	r3, r0, #0
 8001a40:	d039      	beq.n	8001ab6 <main+0x1d2>
				      //printf("FIX?:");
				      lat = minmea_tocoord(&rmcStruct.latitude);
 8001a42:	4b42      	ldr	r3, [pc, #264]	@ (8001b4c <main+0x268>)
 8001a44:	0018      	movs	r0, r3
 8001a46:	f7ff ff09 	bl	800185c <minmea_tocoord>
 8001a4a:	1c02      	adds	r2, r0, #0
 8001a4c:	4b40      	ldr	r3, [pc, #256]	@ (8001b50 <main+0x26c>)
 8001a4e:	601a      	str	r2, [r3, #0]
				      lon = minmea_tocoord(&rmcStruct.longitude);
 8001a50:	4b40      	ldr	r3, [pc, #256]	@ (8001b54 <main+0x270>)
 8001a52:	0018      	movs	r0, r3
 8001a54:	f7ff ff02 	bl	800185c <minmea_tocoord>
 8001a58:	1c02      	adds	r2, r0, #0
 8001a5a:	4b3f      	ldr	r3, [pc, #252]	@ (8001b58 <main+0x274>)
 8001a5c:	601a      	str	r2, [r3, #0]
				      sprintf(buffer, "lat:%d, %d", (int)(lat*100), (int)(lon*100));
 8001a5e:	4b3c      	ldr	r3, [pc, #240]	@ (8001b50 <main+0x26c>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	493e      	ldr	r1, [pc, #248]	@ (8001b5c <main+0x278>)
 8001a64:	1c18      	adds	r0, r3, #0
 8001a66:	f7ff f86d 	bl	8000b44 <__aeabi_fmul>
 8001a6a:	1c03      	adds	r3, r0, #0
 8001a6c:	1c18      	adds	r0, r3, #0
 8001a6e:	f7ff f9a7 	bl	8000dc0 <__aeabi_f2iz>
 8001a72:	0004      	movs	r4, r0
 8001a74:	4b38      	ldr	r3, [pc, #224]	@ (8001b58 <main+0x274>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4938      	ldr	r1, [pc, #224]	@ (8001b5c <main+0x278>)
 8001a7a:	1c18      	adds	r0, r3, #0
 8001a7c:	f7ff f862 	bl	8000b44 <__aeabi_fmul>
 8001a80:	1c03      	adds	r3, r0, #0
 8001a82:	1c18      	adds	r0, r3, #0
 8001a84:	f7ff f99c 	bl	8000dc0 <__aeabi_f2iz>
 8001a88:	0003      	movs	r3, r0
 8001a8a:	4935      	ldr	r1, [pc, #212]	@ (8001b60 <main+0x27c>)
 8001a8c:	4823      	ldr	r0, [pc, #140]	@ (8001b1c <main+0x238>)
 8001a8e:	0022      	movs	r2, r4
 8001a90:	f005 fd0a 	bl	80074a8 <siprintf>
				      if(rmcStruct.valid!=0)
 8001a94:	4b2c      	ldr	r3, [pc, #176]	@ (8001b48 <main+0x264>)
 8001a96:	7c1b      	ldrb	r3, [r3, #16]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d00c      	beq.n	8001ab6 <main+0x1d2>
				      {drawString(30, 30, buffer, BLACK, GREEN, 1, 1);
 8001a9c:	4a1f      	ldr	r2, [pc, #124]	@ (8001b1c <main+0x238>)
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	9302      	str	r3, [sp, #8]
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	9301      	str	r3, [sp, #4]
 8001aa6:	23fc      	movs	r3, #252	@ 0xfc
 8001aa8:	00db      	lsls	r3, r3, #3
 8001aaa:	9300      	str	r3, [sp, #0]
 8001aac:	2300      	movs	r3, #0
 8001aae:	211e      	movs	r1, #30
 8001ab0:	201e      	movs	r0, #30
 8001ab2:	f7ff fa7b 	bl	8000fac <drawString>
				    }
				  }
				  //buffer[0]='_';
				  //drawString(70, 70, buffer, BLACK, GREEN, 1, 1);
				  for(ii=0;ii<=i;ii++) buffer[ii]=0;
 8001ab6:	4b2b      	ldr	r3, [pc, #172]	@ (8001b64 <main+0x280>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	801a      	strh	r2, [r3, #0]
 8001abc:	e00d      	b.n	8001ada <main+0x1f6>
 8001abe:	4b29      	ldr	r3, [pc, #164]	@ (8001b64 <main+0x280>)
 8001ac0:	881b      	ldrh	r3, [r3, #0]
 8001ac2:	b29b      	uxth	r3, r3
 8001ac4:	001a      	movs	r2, r3
 8001ac6:	4b15      	ldr	r3, [pc, #84]	@ (8001b1c <main+0x238>)
 8001ac8:	2100      	movs	r1, #0
 8001aca:	5499      	strb	r1, [r3, r2]
 8001acc:	4b25      	ldr	r3, [pc, #148]	@ (8001b64 <main+0x280>)
 8001ace:	881b      	ldrh	r3, [r3, #0]
 8001ad0:	b29b      	uxth	r3, r3
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	b29a      	uxth	r2, r3
 8001ad6:	4b23      	ldr	r3, [pc, #140]	@ (8001b64 <main+0x280>)
 8001ad8:	801a      	strh	r2, [r3, #0]
 8001ada:	4b22      	ldr	r3, [pc, #136]	@ (8001b64 <main+0x280>)
 8001adc:	881b      	ldrh	r3, [r3, #0]
 8001ade:	b29a      	uxth	r2, r3
 8001ae0:	4b17      	ldr	r3, [pc, #92]	@ (8001b40 <main+0x25c>)
 8001ae2:	881b      	ldrh	r3, [r3, #0]
 8001ae4:	b29b      	uxth	r3, r3
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d9e9      	bls.n	8001abe <main+0x1da>
				 i=0;
 8001aea:	4b15      	ldr	r3, [pc, #84]	@ (8001b40 <main+0x25c>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	801a      	strh	r2, [r3, #0]
				  }
			  	        i++;
 8001af0:	4b13      	ldr	r3, [pc, #76]	@ (8001b40 <main+0x25c>)
 8001af2:	881b      	ldrh	r3, [r3, #0]
 8001af4:	b29b      	uxth	r3, r3
 8001af6:	3301      	adds	r3, #1
 8001af8:	b29a      	uxth	r2, r3
 8001afa:	4b11      	ldr	r3, [pc, #68]	@ (8001b40 <main+0x25c>)
 8001afc:	801a      	strh	r2, [r3, #0]
		  while(HAL_UART_Receive(&huart1, &(buffer[i]), 1, 0xFFFF)==HAL_OK)
 8001afe:	4b10      	ldr	r3, [pc, #64]	@ (8001b40 <main+0x25c>)
 8001b00:	881b      	ldrh	r3, [r3, #0]
 8001b02:	b29b      	uxth	r3, r3
 8001b04:	001a      	movs	r2, r3
 8001b06:	4b05      	ldr	r3, [pc, #20]	@ (8001b1c <main+0x238>)
 8001b08:	18d1      	adds	r1, r2, r3
 8001b0a:	4b17      	ldr	r3, [pc, #92]	@ (8001b68 <main+0x284>)
 8001b0c:	4817      	ldr	r0, [pc, #92]	@ (8001b6c <main+0x288>)
 8001b0e:	2201      	movs	r2, #1
 8001b10:	f004 fbd6 	bl	80062c0 <HAL_UART_Receive>
 8001b14:	1e03      	subs	r3, r0, #0
 8001b16:	d100      	bne.n	8001b1a <main+0x236>
 8001b18:	e777      	b.n	8001a0a <main+0x126>
	  fillScreen(BLUE);
 8001b1a:	e726      	b.n	800196a <main+0x86>
 8001b1c:	200000dc 	.word	0x200000dc
 8001b20:	200001c8 	.word	0x200001c8
 8001b24:	200001c9 	.word	0x200001c9
 8001b28:	200001ca 	.word	0x200001ca
 8001b2c:	0800857c 	.word	0x0800857c
 8001b30:	20000164 	.word	0x20000164
 8001b34:	200001cb 	.word	0x200001cb
 8001b38:	08008590 	.word	0x08008590
 8001b3c:	0800859c 	.word	0x0800859c
 8001b40:	2000008e 	.word	0x2000008e
 8001b44:	200000dd 	.word	0x200000dd
 8001b48:	20000094 	.word	0x20000094
 8001b4c:	200000a8 	.word	0x200000a8
 8001b50:	2000015c 	.word	0x2000015c
 8001b54:	200000b0 	.word	0x200000b0
 8001b58:	20000160 	.word	0x20000160
 8001b5c:	42c80000 	.word	0x42c80000
 8001b60:	080085a0 	.word	0x080085a0
 8001b64:	20000090 	.word	0x20000090
 8001b68:	0000ffff 	.word	0x0000ffff
 8001b6c:	200002d0 	.word	0x200002d0

08001b70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b70:	b590      	push	{r4, r7, lr}
 8001b72:	b095      	sub	sp, #84	@ 0x54
 8001b74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b76:	2414      	movs	r4, #20
 8001b78:	193b      	adds	r3, r7, r4
 8001b7a:	0018      	movs	r0, r3
 8001b7c:	233c      	movs	r3, #60	@ 0x3c
 8001b7e:	001a      	movs	r2, r3
 8001b80:	2100      	movs	r1, #0
 8001b82:	f005 fcfd 	bl	8007580 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b86:	1d3b      	adds	r3, r7, #4
 8001b88:	0018      	movs	r0, r3
 8001b8a:	2310      	movs	r3, #16
 8001b8c:	001a      	movs	r2, r3
 8001b8e:	2100      	movs	r1, #0
 8001b90:	f005 fcf6 	bl	8007580 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b94:	2380      	movs	r3, #128	@ 0x80
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	0018      	movs	r0, r3
 8001b9a:	f002 fa6b 	bl	8004074 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b9e:	193b      	adds	r3, r7, r4
 8001ba0:	2202      	movs	r2, #2
 8001ba2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ba4:	193b      	adds	r3, r7, r4
 8001ba6:	2280      	movs	r2, #128	@ 0x80
 8001ba8:	0052      	lsls	r2, r2, #1
 8001baa:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8001bac:	0021      	movs	r1, r4
 8001bae:	187b      	adds	r3, r7, r1
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001bb4:	187b      	adds	r3, r7, r1
 8001bb6:	2240      	movs	r2, #64	@ 0x40
 8001bb8:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bba:	187b      	adds	r3, r7, r1
 8001bbc:	2202      	movs	r2, #2
 8001bbe:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001bc0:	187b      	adds	r3, r7, r1
 8001bc2:	2202      	movs	r2, #2
 8001bc4:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001bc6:	187b      	adds	r3, r7, r1
 8001bc8:	2200      	movs	r2, #0
 8001bca:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLN = 8;
 8001bcc:	187b      	adds	r3, r7, r1
 8001bce:	2208      	movs	r2, #8
 8001bd0:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001bd2:	187b      	adds	r3, r7, r1
 8001bd4:	2280      	movs	r2, #128	@ 0x80
 8001bd6:	0292      	lsls	r2, r2, #10
 8001bd8:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001bda:	187b      	adds	r3, r7, r1
 8001bdc:	2280      	movs	r2, #128	@ 0x80
 8001bde:	0492      	lsls	r2, r2, #18
 8001be0:	635a      	str	r2, [r3, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001be2:	187b      	adds	r3, r7, r1
 8001be4:	2280      	movs	r2, #128	@ 0x80
 8001be6:	0592      	lsls	r2, r2, #22
 8001be8:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bea:	187b      	adds	r3, r7, r1
 8001bec:	0018      	movs	r0, r3
 8001bee:	f002 fa8d 	bl	800410c <HAL_RCC_OscConfig>
 8001bf2:	1e03      	subs	r3, r0, #0
 8001bf4:	d001      	beq.n	8001bfa <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001bf6:	f000 fa0d 	bl	8002014 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bfa:	1d3b      	adds	r3, r7, #4
 8001bfc:	2207      	movs	r2, #7
 8001bfe:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c00:	1d3b      	adds	r3, r7, #4
 8001c02:	2202      	movs	r2, #2
 8001c04:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c06:	1d3b      	adds	r3, r7, #4
 8001c08:	2200      	movs	r2, #0
 8001c0a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c0c:	1d3b      	adds	r3, r7, #4
 8001c0e:	2200      	movs	r2, #0
 8001c10:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c12:	1d3b      	adds	r3, r7, #4
 8001c14:	2102      	movs	r1, #2
 8001c16:	0018      	movs	r0, r3
 8001c18:	f002 fdd8 	bl	80047cc <HAL_RCC_ClockConfig>
 8001c1c:	1e03      	subs	r3, r0, #0
 8001c1e:	d001      	beq.n	8001c24 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001c20:	f000 f9f8 	bl	8002014 <Error_Handler>
  }
}
 8001c24:	46c0      	nop			@ (mov r8, r8)
 8001c26:	46bd      	mov	sp, r7
 8001c28:	b015      	add	sp, #84	@ 0x54
 8001c2a:	bd90      	pop	{r4, r7, pc}

08001c2c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c30:	4b1b      	ldr	r3, [pc, #108]	@ (8001ca0 <MX_I2C1_Init+0x74>)
 8001c32:	4a1c      	ldr	r2, [pc, #112]	@ (8001ca4 <MX_I2C1_Init+0x78>)
 8001c34:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10B17DB5;
 8001c36:	4b1a      	ldr	r3, [pc, #104]	@ (8001ca0 <MX_I2C1_Init+0x74>)
 8001c38:	4a1b      	ldr	r2, [pc, #108]	@ (8001ca8 <MX_I2C1_Init+0x7c>)
 8001c3a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001c3c:	4b18      	ldr	r3, [pc, #96]	@ (8001ca0 <MX_I2C1_Init+0x74>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c42:	4b17      	ldr	r3, [pc, #92]	@ (8001ca0 <MX_I2C1_Init+0x74>)
 8001c44:	2201      	movs	r2, #1
 8001c46:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c48:	4b15      	ldr	r3, [pc, #84]	@ (8001ca0 <MX_I2C1_Init+0x74>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001c4e:	4b14      	ldr	r3, [pc, #80]	@ (8001ca0 <MX_I2C1_Init+0x74>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001c54:	4b12      	ldr	r3, [pc, #72]	@ (8001ca0 <MX_I2C1_Init+0x74>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c5a:	4b11      	ldr	r3, [pc, #68]	@ (8001ca0 <MX_I2C1_Init+0x74>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c60:	4b0f      	ldr	r3, [pc, #60]	@ (8001ca0 <MX_I2C1_Init+0x74>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c66:	4b0e      	ldr	r3, [pc, #56]	@ (8001ca0 <MX_I2C1_Init+0x74>)
 8001c68:	0018      	movs	r0, r3
 8001c6a:	f001 fbbf 	bl	80033ec <HAL_I2C_Init>
 8001c6e:	1e03      	subs	r3, r0, #0
 8001c70:	d001      	beq.n	8001c76 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001c72:	f000 f9cf 	bl	8002014 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c76:	4b0a      	ldr	r3, [pc, #40]	@ (8001ca0 <MX_I2C1_Init+0x74>)
 8001c78:	2100      	movs	r1, #0
 8001c7a:	0018      	movs	r0, r3
 8001c7c:	f002 f962 	bl	8003f44 <HAL_I2CEx_ConfigAnalogFilter>
 8001c80:	1e03      	subs	r3, r0, #0
 8001c82:	d001      	beq.n	8001c88 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001c84:	f000 f9c6 	bl	8002014 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001c88:	4b05      	ldr	r3, [pc, #20]	@ (8001ca0 <MX_I2C1_Init+0x74>)
 8001c8a:	2100      	movs	r1, #0
 8001c8c:	0018      	movs	r0, r3
 8001c8e:	f002 f9a5 	bl	8003fdc <HAL_I2CEx_ConfigDigitalFilter>
 8001c92:	1e03      	subs	r3, r0, #0
 8001c94:	d001      	beq.n	8001c9a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001c96:	f000 f9bd 	bl	8002014 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001c9a:	46c0      	nop			@ (mov r8, r8)
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	200001cc 	.word	0x200001cc
 8001ca4:	40005400 	.word	0x40005400
 8001ca8:	10b17db5 	.word	0x10b17db5

08001cac <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001cb0:	4b1c      	ldr	r3, [pc, #112]	@ (8001d24 <MX_SPI1_Init+0x78>)
 8001cb2:	4a1d      	ldr	r2, [pc, #116]	@ (8001d28 <MX_SPI1_Init+0x7c>)
 8001cb4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001cb6:	4b1b      	ldr	r3, [pc, #108]	@ (8001d24 <MX_SPI1_Init+0x78>)
 8001cb8:	2282      	movs	r2, #130	@ 0x82
 8001cba:	0052      	lsls	r2, r2, #1
 8001cbc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8001cbe:	4b19      	ldr	r3, [pc, #100]	@ (8001d24 <MX_SPI1_Init+0x78>)
 8001cc0:	2280      	movs	r2, #128	@ 0x80
 8001cc2:	0212      	lsls	r2, r2, #8
 8001cc4:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001cc6:	4b17      	ldr	r3, [pc, #92]	@ (8001d24 <MX_SPI1_Init+0x78>)
 8001cc8:	22e0      	movs	r2, #224	@ 0xe0
 8001cca:	00d2      	lsls	r2, r2, #3
 8001ccc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cce:	4b15      	ldr	r3, [pc, #84]	@ (8001d24 <MX_SPI1_Init+0x78>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001cd4:	4b13      	ldr	r3, [pc, #76]	@ (8001d24 <MX_SPI1_Init+0x78>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001cda:	4b12      	ldr	r3, [pc, #72]	@ (8001d24 <MX_SPI1_Init+0x78>)
 8001cdc:	2280      	movs	r2, #128	@ 0x80
 8001cde:	0092      	lsls	r2, r2, #2
 8001ce0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001ce2:	4b10      	ldr	r3, [pc, #64]	@ (8001d24 <MX_SPI1_Init+0x78>)
 8001ce4:	2220      	movs	r2, #32
 8001ce6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ce8:	4b0e      	ldr	r3, [pc, #56]	@ (8001d24 <MX_SPI1_Init+0x78>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001cee:	4b0d      	ldr	r3, [pc, #52]	@ (8001d24 <MX_SPI1_Init+0x78>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cf4:	4b0b      	ldr	r3, [pc, #44]	@ (8001d24 <MX_SPI1_Init+0x78>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001cfa:	4b0a      	ldr	r3, [pc, #40]	@ (8001d24 <MX_SPI1_Init+0x78>)
 8001cfc:	2207      	movs	r2, #7
 8001cfe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001d00:	4b08      	ldr	r3, [pc, #32]	@ (8001d24 <MX_SPI1_Init+0x78>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001d06:	4b07      	ldr	r3, [pc, #28]	@ (8001d24 <MX_SPI1_Init+0x78>)
 8001d08:	2208      	movs	r2, #8
 8001d0a:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d0c:	4b05      	ldr	r3, [pc, #20]	@ (8001d24 <MX_SPI1_Init+0x78>)
 8001d0e:	0018      	movs	r0, r3
 8001d10:	f003 f942 	bl	8004f98 <HAL_SPI_Init>
 8001d14:	1e03      	subs	r3, r0, #0
 8001d16:	d001      	beq.n	8001d1c <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 8001d18:	f000 f97c 	bl	8002014 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001d1c:	46c0      	nop			@ (mov r8, r8)
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	46c0      	nop			@ (mov r8, r8)
 8001d24:	20000220 	.word	0x20000220
 8001d28:	40013000 	.word	0x40013000

08001d2c <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b094      	sub	sp, #80	@ 0x50
 8001d30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d32:	2334      	movs	r3, #52	@ 0x34
 8001d34:	18fb      	adds	r3, r7, r3
 8001d36:	0018      	movs	r0, r3
 8001d38:	231c      	movs	r3, #28
 8001d3a:	001a      	movs	r2, r3
 8001d3c:	2100      	movs	r1, #0
 8001d3e:	f005 fc1f 	bl	8007580 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001d42:	003b      	movs	r3, r7
 8001d44:	0018      	movs	r0, r3
 8001d46:	2334      	movs	r3, #52	@ 0x34
 8001d48:	001a      	movs	r2, r3
 8001d4a:	2100      	movs	r1, #0
 8001d4c:	f005 fc18 	bl	8007580 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001d50:	4b37      	ldr	r3, [pc, #220]	@ (8001e30 <MX_TIM17_Init+0x104>)
 8001d52:	4a38      	ldr	r2, [pc, #224]	@ (8001e34 <MX_TIM17_Init+0x108>)
 8001d54:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8001d56:	4b36      	ldr	r3, [pc, #216]	@ (8001e30 <MX_TIM17_Init+0x104>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d5c:	4b34      	ldr	r3, [pc, #208]	@ (8001e30 <MX_TIM17_Init+0x104>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8001d62:	4b33      	ldr	r3, [pc, #204]	@ (8001e30 <MX_TIM17_Init+0x104>)
 8001d64:	4a34      	ldr	r2, [pc, #208]	@ (8001e38 <MX_TIM17_Init+0x10c>)
 8001d66:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d68:	4b31      	ldr	r3, [pc, #196]	@ (8001e30 <MX_TIM17_Init+0x104>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001d6e:	4b30      	ldr	r3, [pc, #192]	@ (8001e30 <MX_TIM17_Init+0x104>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d74:	4b2e      	ldr	r3, [pc, #184]	@ (8001e30 <MX_TIM17_Init+0x104>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001d7a:	4b2d      	ldr	r3, [pc, #180]	@ (8001e30 <MX_TIM17_Init+0x104>)
 8001d7c:	0018      	movs	r0, r3
 8001d7e:	f003 fc99 	bl	80056b4 <HAL_TIM_Base_Init>
 8001d82:	1e03      	subs	r3, r0, #0
 8001d84:	d001      	beq.n	8001d8a <MX_TIM17_Init+0x5e>
  {
    Error_Handler();
 8001d86:	f000 f945 	bl	8002014 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8001d8a:	4b29      	ldr	r3, [pc, #164]	@ (8001e30 <MX_TIM17_Init+0x104>)
 8001d8c:	0018      	movs	r0, r3
 8001d8e:	f003 fce9 	bl	8005764 <HAL_TIM_PWM_Init>
 8001d92:	1e03      	subs	r3, r0, #0
 8001d94:	d001      	beq.n	8001d9a <MX_TIM17_Init+0x6e>
  {
    Error_Handler();
 8001d96:	f000 f93d 	bl	8002014 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d9a:	2134      	movs	r1, #52	@ 0x34
 8001d9c:	187b      	adds	r3, r7, r1
 8001d9e:	2260      	movs	r2, #96	@ 0x60
 8001da0:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001da2:	187b      	adds	r3, r7, r1
 8001da4:	2200      	movs	r2, #0
 8001da6:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001da8:	187b      	adds	r3, r7, r1
 8001daa:	2200      	movs	r2, #0
 8001dac:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001dae:	187b      	adds	r3, r7, r1
 8001db0:	2200      	movs	r2, #0
 8001db2:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001db4:	187b      	adds	r3, r7, r1
 8001db6:	2200      	movs	r2, #0
 8001db8:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001dba:	187b      	adds	r3, r7, r1
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001dc0:	187b      	adds	r3, r7, r1
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001dc6:	1879      	adds	r1, r7, r1
 8001dc8:	4b19      	ldr	r3, [pc, #100]	@ (8001e30 <MX_TIM17_Init+0x104>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	0018      	movs	r0, r3
 8001dce:	f003 fd29 	bl	8005824 <HAL_TIM_PWM_ConfigChannel>
 8001dd2:	1e03      	subs	r3, r0, #0
 8001dd4:	d001      	beq.n	8001dda <MX_TIM17_Init+0xae>
  {
    Error_Handler();
 8001dd6:	f000 f91d 	bl	8002014 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001dda:	003b      	movs	r3, r7
 8001ddc:	2200      	movs	r2, #0
 8001dde:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001de0:	003b      	movs	r3, r7
 8001de2:	2200      	movs	r2, #0
 8001de4:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001de6:	003b      	movs	r3, r7
 8001de8:	2200      	movs	r2, #0
 8001dea:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001dec:	003b      	movs	r3, r7
 8001dee:	2200      	movs	r2, #0
 8001df0:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001df2:	003b      	movs	r3, r7
 8001df4:	2200      	movs	r2, #0
 8001df6:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001df8:	003b      	movs	r3, r7
 8001dfa:	2280      	movs	r2, #128	@ 0x80
 8001dfc:	0192      	lsls	r2, r2, #6
 8001dfe:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001e00:	003b      	movs	r3, r7
 8001e02:	2200      	movs	r2, #0
 8001e04:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e06:	003b      	movs	r3, r7
 8001e08:	2200      	movs	r2, #0
 8001e0a:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8001e0c:	003a      	movs	r2, r7
 8001e0e:	4b08      	ldr	r3, [pc, #32]	@ (8001e30 <MX_TIM17_Init+0x104>)
 8001e10:	0011      	movs	r1, r2
 8001e12:	0018      	movs	r0, r3
 8001e14:	f004 f962 	bl	80060dc <HAL_TIMEx_ConfigBreakDeadTime>
 8001e18:	1e03      	subs	r3, r0, #0
 8001e1a:	d001      	beq.n	8001e20 <MX_TIM17_Init+0xf4>
  {
    Error_Handler();
 8001e1c:	f000 f8fa 	bl	8002014 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8001e20:	4b03      	ldr	r3, [pc, #12]	@ (8001e30 <MX_TIM17_Init+0x104>)
 8001e22:	0018      	movs	r0, r3
 8001e24:	f000 fe1a 	bl	8002a5c <HAL_TIM_MspPostInit>

}
 8001e28:	46c0      	nop			@ (mov r8, r8)
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	b014      	add	sp, #80	@ 0x50
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	20000284 	.word	0x20000284
 8001e34:	40014800 	.word	0x40014800
 8001e38:	0000ffff 	.word	0x0000ffff

08001e3c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001e40:	4b23      	ldr	r3, [pc, #140]	@ (8001ed0 <MX_USART1_UART_Init+0x94>)
 8001e42:	4a24      	ldr	r2, [pc, #144]	@ (8001ed4 <MX_USART1_UART_Init+0x98>)
 8001e44:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001e46:	4b22      	ldr	r3, [pc, #136]	@ (8001ed0 <MX_USART1_UART_Init+0x94>)
 8001e48:	2296      	movs	r2, #150	@ 0x96
 8001e4a:	0192      	lsls	r2, r2, #6
 8001e4c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e4e:	4b20      	ldr	r3, [pc, #128]	@ (8001ed0 <MX_USART1_UART_Init+0x94>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e54:	4b1e      	ldr	r3, [pc, #120]	@ (8001ed0 <MX_USART1_UART_Init+0x94>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e5a:	4b1d      	ldr	r3, [pc, #116]	@ (8001ed0 <MX_USART1_UART_Init+0x94>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e60:	4b1b      	ldr	r3, [pc, #108]	@ (8001ed0 <MX_USART1_UART_Init+0x94>)
 8001e62:	220c      	movs	r2, #12
 8001e64:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e66:	4b1a      	ldr	r3, [pc, #104]	@ (8001ed0 <MX_USART1_UART_Init+0x94>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e6c:	4b18      	ldr	r3, [pc, #96]	@ (8001ed0 <MX_USART1_UART_Init+0x94>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e72:	4b17      	ldr	r3, [pc, #92]	@ (8001ed0 <MX_USART1_UART_Init+0x94>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001e78:	4b15      	ldr	r3, [pc, #84]	@ (8001ed0 <MX_USART1_UART_Init+0x94>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e7e:	4b14      	ldr	r3, [pc, #80]	@ (8001ed0 <MX_USART1_UART_Init+0x94>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e84:	4b12      	ldr	r3, [pc, #72]	@ (8001ed0 <MX_USART1_UART_Init+0x94>)
 8001e86:	0018      	movs	r0, r3
 8001e88:	f004 f9c4 	bl	8006214 <HAL_UART_Init>
 8001e8c:	1e03      	subs	r3, r0, #0
 8001e8e:	d001      	beq.n	8001e94 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001e90:	f000 f8c0 	bl	8002014 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e94:	4b0e      	ldr	r3, [pc, #56]	@ (8001ed0 <MX_USART1_UART_Init+0x94>)
 8001e96:	2100      	movs	r1, #0
 8001e98:	0018      	movs	r0, r3
 8001e9a:	f005 f8bb 	bl	8007014 <HAL_UARTEx_SetTxFifoThreshold>
 8001e9e:	1e03      	subs	r3, r0, #0
 8001ea0:	d001      	beq.n	8001ea6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001ea2:	f000 f8b7 	bl	8002014 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ea6:	4b0a      	ldr	r3, [pc, #40]	@ (8001ed0 <MX_USART1_UART_Init+0x94>)
 8001ea8:	2100      	movs	r1, #0
 8001eaa:	0018      	movs	r0, r3
 8001eac:	f005 f8f2 	bl	8007094 <HAL_UARTEx_SetRxFifoThreshold>
 8001eb0:	1e03      	subs	r3, r0, #0
 8001eb2:	d001      	beq.n	8001eb8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001eb4:	f000 f8ae 	bl	8002014 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001eb8:	4b05      	ldr	r3, [pc, #20]	@ (8001ed0 <MX_USART1_UART_Init+0x94>)
 8001eba:	0018      	movs	r0, r3
 8001ebc:	f005 f870 	bl	8006fa0 <HAL_UARTEx_DisableFifoMode>
 8001ec0:	1e03      	subs	r3, r0, #0
 8001ec2:	d001      	beq.n	8001ec8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001ec4:	f000 f8a6 	bl	8002014 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ec8:	46c0      	nop			@ (mov r8, r8)
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	46c0      	nop			@ (mov r8, r8)
 8001ed0:	200002d0 	.word	0x200002d0
 8001ed4:	40013800 	.word	0x40013800

08001ed8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ed8:	b590      	push	{r4, r7, lr}
 8001eda:	b089      	sub	sp, #36	@ 0x24
 8001edc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ede:	240c      	movs	r4, #12
 8001ee0:	193b      	adds	r3, r7, r4
 8001ee2:	0018      	movs	r0, r3
 8001ee4:	2314      	movs	r3, #20
 8001ee6:	001a      	movs	r2, r3
 8001ee8:	2100      	movs	r1, #0
 8001eea:	f005 fb49 	bl	8007580 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eee:	4b1b      	ldr	r3, [pc, #108]	@ (8001f5c <MX_GPIO_Init+0x84>)
 8001ef0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001ef2:	4b1a      	ldr	r3, [pc, #104]	@ (8001f5c <MX_GPIO_Init+0x84>)
 8001ef4:	2101      	movs	r1, #1
 8001ef6:	430a      	orrs	r2, r1
 8001ef8:	635a      	str	r2, [r3, #52]	@ 0x34
 8001efa:	4b18      	ldr	r3, [pc, #96]	@ (8001f5c <MX_GPIO_Init+0x84>)
 8001efc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001efe:	2201      	movs	r2, #1
 8001f00:	4013      	ands	r3, r2
 8001f02:	60bb      	str	r3, [r7, #8]
 8001f04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f06:	4b15      	ldr	r3, [pc, #84]	@ (8001f5c <MX_GPIO_Init+0x84>)
 8001f08:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f0a:	4b14      	ldr	r3, [pc, #80]	@ (8001f5c <MX_GPIO_Init+0x84>)
 8001f0c:	2104      	movs	r1, #4
 8001f0e:	430a      	orrs	r2, r1
 8001f10:	635a      	str	r2, [r3, #52]	@ 0x34
 8001f12:	4b12      	ldr	r3, [pc, #72]	@ (8001f5c <MX_GPIO_Init+0x84>)
 8001f14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f16:	2204      	movs	r2, #4
 8001f18:	4013      	ands	r3, r2
 8001f1a:	607b      	str	r3, [r7, #4]
 8001f1c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8001f1e:	23a0      	movs	r3, #160	@ 0xa0
 8001f20:	05db      	lsls	r3, r3, #23
 8001f22:	2200      	movs	r2, #0
 8001f24:	2138      	movs	r1, #56	@ 0x38
 8001f26:	0018      	movs	r0, r3
 8001f28:	f001 fa42 	bl	80033b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA3 PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001f2c:	0021      	movs	r1, r4
 8001f2e:	187b      	adds	r3, r7, r1
 8001f30:	2238      	movs	r2, #56	@ 0x38
 8001f32:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f34:	187b      	adds	r3, r7, r1
 8001f36:	2201      	movs	r2, #1
 8001f38:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3a:	187b      	adds	r3, r7, r1
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f40:	187b      	adds	r3, r7, r1
 8001f42:	2200      	movs	r2, #0
 8001f44:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f46:	187a      	adds	r2, r7, r1
 8001f48:	23a0      	movs	r3, #160	@ 0xa0
 8001f4a:	05db      	lsls	r3, r3, #23
 8001f4c:	0011      	movs	r1, r2
 8001f4e:	0018      	movs	r0, r3
 8001f50:	f001 f8c2 	bl	80030d8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001f54:	46c0      	nop			@ (mov r8, r8)
 8001f56:	46bd      	mov	sp, r7
 8001f58:	b009      	add	sp, #36	@ 0x24
 8001f5a:	bd90      	pop	{r4, r7, pc}
 8001f5c:	40021000 	.word	0x40021000

08001f60 <_ADXL343_ReadReg8>:

/* USER CODE BEGIN 4 */
int _ADXL343_ReadReg8 (unsigned char TargetRegister, unsigned char * TargetValue, uint8_t size)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b084      	sub	sp, #16
 8001f64:	af02      	add	r7, sp, #8
 8001f66:	6039      	str	r1, [r7, #0]
 8001f68:	0011      	movs	r1, r2
 8001f6a:	1dfb      	adds	r3, r7, #7
 8001f6c:	1c02      	adds	r2, r0, #0
 8001f6e:	701a      	strb	r2, [r3, #0]
 8001f70:	1dbb      	adds	r3, r7, #6
 8001f72:	1c0a      	adds	r2, r1, #0
 8001f74:	701a      	strb	r2, [r3, #0]
  if (!HAL_I2C_Master_Transmit(&hi2c1, 0x14<<1, TargetRegister, 1, 1000)==HAL_OK)
 8001f76:	1dfb      	adds	r3, r7, #7
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	001a      	movs	r2, r3
 8001f7c:	4811      	ldr	r0, [pc, #68]	@ (8001fc4 <_ADXL343_ReadReg8+0x64>)
 8001f7e:	23fa      	movs	r3, #250	@ 0xfa
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	9300      	str	r3, [sp, #0]
 8001f84:	2301      	movs	r3, #1
 8001f86:	2128      	movs	r1, #40	@ 0x28
 8001f88:	f001 fad6 	bl	8003538 <HAL_I2C_Master_Transmit>
 8001f8c:	1e03      	subs	r3, r0, #0
 8001f8e:	d002      	beq.n	8001f96 <_ADXL343_ReadReg8+0x36>
      return -1;
 8001f90:	2301      	movs	r3, #1
 8001f92:	425b      	negs	r3, r3
 8001f94:	e011      	b.n	8001fba <_ADXL343_ReadReg8+0x5a>

  if (!HAL_I2C_Master_Receive(&hi2c1, 0x14<<1, TargetValue, size, 1000)==HAL_OK)
 8001f96:	1dbb      	adds	r3, r7, #6
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	b299      	uxth	r1, r3
 8001f9c:	683a      	ldr	r2, [r7, #0]
 8001f9e:	4809      	ldr	r0, [pc, #36]	@ (8001fc4 <_ADXL343_ReadReg8+0x64>)
 8001fa0:	23fa      	movs	r3, #250	@ 0xfa
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	9300      	str	r3, [sp, #0]
 8001fa6:	000b      	movs	r3, r1
 8001fa8:	2128      	movs	r1, #40	@ 0x28
 8001faa:	f001 fbef 	bl	800378c <HAL_I2C_Master_Receive>
 8001fae:	1e03      	subs	r3, r0, #0
 8001fb0:	d002      	beq.n	8001fb8 <_ADXL343_ReadReg8+0x58>
    return -2;
 8001fb2:	2302      	movs	r3, #2
 8001fb4:	425b      	negs	r3, r3
 8001fb6:	e000      	b.n	8001fba <_ADXL343_ReadReg8+0x5a>

  return 0;
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	0018      	movs	r0, r3
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	b002      	add	sp, #8
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	46c0      	nop			@ (mov r8, r8)
 8001fc4:	200001cc 	.word	0x200001cc

08001fc8 <_ADXL343_WriteReg8>:

int _ADXL343_WriteReg8 (unsigned char TargetRegister, unsigned char TargetValue)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b086      	sub	sp, #24
 8001fcc:	af02      	add	r7, sp, #8
 8001fce:	0002      	movs	r2, r0
 8001fd0:	1dfb      	adds	r3, r7, #7
 8001fd2:	701a      	strb	r2, [r3, #0]
 8001fd4:	1dbb      	adds	r3, r7, #6
 8001fd6:	1c0a      	adds	r2, r1, #0
 8001fd8:	701a      	strb	r2, [r3, #0]
  unsigned char buff [2];
  buff[0] = TargetRegister;
 8001fda:	210c      	movs	r1, #12
 8001fdc:	187b      	adds	r3, r7, r1
 8001fde:	1dfa      	adds	r2, r7, #7
 8001fe0:	7812      	ldrb	r2, [r2, #0]
 8001fe2:	701a      	strb	r2, [r3, #0]
  buff[1] = TargetValue;
 8001fe4:	187b      	adds	r3, r7, r1
 8001fe6:	1dba      	adds	r2, r7, #6
 8001fe8:	7812      	ldrb	r2, [r2, #0]
 8001fea:	705a      	strb	r2, [r3, #1]

  if (HAL_I2C_Master_Transmit(&hi2c1, 0x14<<1, buff, 2, 100))
 8001fec:	187a      	adds	r2, r7, r1
 8001fee:	4808      	ldr	r0, [pc, #32]	@ (8002010 <_ADXL343_WriteReg8+0x48>)
 8001ff0:	2364      	movs	r3, #100	@ 0x64
 8001ff2:	9300      	str	r3, [sp, #0]
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	2128      	movs	r1, #40	@ 0x28
 8001ff8:	f001 fa9e 	bl	8003538 <HAL_I2C_Master_Transmit>
 8001ffc:	1e03      	subs	r3, r0, #0
 8001ffe:	d002      	beq.n	8002006 <_ADXL343_WriteReg8+0x3e>
      return -1;
 8002000:	2301      	movs	r3, #1
 8002002:	425b      	negs	r3, r3
 8002004:	e000      	b.n	8002008 <_ADXL343_WriteReg8+0x40>

  return 0;
 8002006:	2300      	movs	r3, #0
}
 8002008:	0018      	movs	r0, r3
 800200a:	46bd      	mov	sp, r7
 800200c:	b004      	add	sp, #16
 800200e:	bd80      	pop	{r7, pc}
 8002010:	200001cc 	.word	0x200001cc

08002014 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002018:	b672      	cpsid	i
}
 800201a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800201c:	46c0      	nop			@ (mov r8, r8)
 800201e:	e7fd      	b.n	800201c <Error_Handler+0x8>

08002020 <minmea_isfield>:
        return false;

    return true;
}

static inline bool minmea_isfield(char c) {
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	0002      	movs	r2, r0
 8002028:	1dfb      	adds	r3, r7, #7
 800202a:	701a      	strb	r2, [r3, #0]
    return isprint((unsigned char) c) && c != ',' && c != '*';
 800202c:	1dfb      	adds	r3, r7, #7
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	1c5a      	adds	r2, r3, #1
 8002032:	4b0d      	ldr	r3, [pc, #52]	@ (8002068 <minmea_isfield+0x48>)
 8002034:	18d3      	adds	r3, r2, r3
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	001a      	movs	r2, r3
 800203a:	2397      	movs	r3, #151	@ 0x97
 800203c:	4013      	ands	r3, r2
 800203e:	d009      	beq.n	8002054 <minmea_isfield+0x34>
 8002040:	1dfb      	adds	r3, r7, #7
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	2b2c      	cmp	r3, #44	@ 0x2c
 8002046:	d005      	beq.n	8002054 <minmea_isfield+0x34>
 8002048:	1dfb      	adds	r3, r7, #7
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	2b2a      	cmp	r3, #42	@ 0x2a
 800204e:	d001      	beq.n	8002054 <minmea_isfield+0x34>
 8002050:	2301      	movs	r3, #1
 8002052:	e000      	b.n	8002056 <minmea_isfield+0x36>
 8002054:	2300      	movs	r3, #0
 8002056:	1c1a      	adds	r2, r3, #0
 8002058:	2301      	movs	r3, #1
 800205a:	4013      	ands	r3, r2
 800205c:	b2db      	uxtb	r3, r3
}
 800205e:	0018      	movs	r0, r3
 8002060:	46bd      	mov	sp, r7
 8002062:	b002      	add	sp, #8
 8002064:	bd80      	pop	{r7, pc}
 8002066:	46c0      	nop			@ (mov r8, r8)
 8002068:	08008db0 	.word	0x08008db0

0800206c <minmea_scan>:

bool minmea_scan(const char *sentence, const char *format, ...)
{
 800206c:	b40e      	push	{r1, r2, r3}
 800206e:	b5b0      	push	{r4, r5, r7, lr}
 8002070:	b0a7      	sub	sp, #156	@ 0x9c
 8002072:	af00      	add	r7, sp, #0
 8002074:	6078      	str	r0, [r7, #4]
    bool result = false;
 8002076:	2397      	movs	r3, #151	@ 0x97
 8002078:	18fb      	adds	r3, r7, r3
 800207a:	2200      	movs	r2, #0
 800207c:	701a      	strb	r2, [r3, #0]
    bool optional = false;
 800207e:	2396      	movs	r3, #150	@ 0x96
 8002080:	18fb      	adds	r3, r7, r3
 8002082:	2200      	movs	r2, #0
 8002084:	701a      	strb	r2, [r3, #0]
    va_list ap;
    va_start(ap, format);
 8002086:	23a8      	movs	r3, #168	@ 0xa8
 8002088:	2208      	movs	r2, #8
 800208a:	189b      	adds	r3, r3, r2
 800208c:	19db      	adds	r3, r3, r7
 800208e:	62fb      	str	r3, [r7, #44]	@ 0x2c

    const char *field = sentence;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2290      	movs	r2, #144	@ 0x90
 8002094:	18ba      	adds	r2, r7, r2
 8002096:	6013      	str	r3, [r2, #0]
        } else { \
            field = NULL; \
        } \
    } while (0)

    while (*format) {
 8002098:	e345      	b.n	8002726 <minmea_scan+0x6ba>
        char type = *format++;
 800209a:	21a4      	movs	r1, #164	@ 0xa4
 800209c:	2008      	movs	r0, #8
 800209e:	180b      	adds	r3, r1, r0
 80020a0:	19db      	adds	r3, r3, r7
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	1c5a      	adds	r2, r3, #1
 80020a6:	1809      	adds	r1, r1, r0
 80020a8:	19c9      	adds	r1, r1, r7
 80020aa:	600a      	str	r2, [r1, #0]
 80020ac:	2143      	movs	r1, #67	@ 0x43
 80020ae:	187a      	adds	r2, r7, r1
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	7013      	strb	r3, [r2, #0]

        if (type == ';') {
 80020b4:	187b      	adds	r3, r7, r1
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	2b3b      	cmp	r3, #59	@ 0x3b
 80020ba:	d104      	bne.n	80020c6 <minmea_scan+0x5a>
            // All further fields are optional.
            optional = true;
 80020bc:	2396      	movs	r3, #150	@ 0x96
 80020be:	18fb      	adds	r3, r7, r3
 80020c0:	2201      	movs	r2, #1
 80020c2:	701a      	strb	r2, [r3, #0]
            continue;
 80020c4:	e32f      	b.n	8002726 <minmea_scan+0x6ba>
        }

        if (!field && !optional) {
 80020c6:	2390      	movs	r3, #144	@ 0x90
 80020c8:	18fb      	adds	r3, r7, r3
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d108      	bne.n	80020e2 <minmea_scan+0x76>
 80020d0:	2396      	movs	r3, #150	@ 0x96
 80020d2:	18fb      	adds	r3, r7, r3
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	2201      	movs	r2, #1
 80020d8:	4053      	eors	r3, r2
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d000      	beq.n	80020e2 <minmea_scan+0x76>
 80020e0:	e32f      	b.n	8002742 <minmea_scan+0x6d6>
            // Field requested but we ran out if input. Bail out.
            goto parse_error;
        }

        switch (type) {
 80020e2:	2343      	movs	r3, #67	@ 0x43
 80020e4:	18fb      	adds	r3, r7, r3
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	3b44      	subs	r3, #68	@ 0x44
 80020ea:	2b30      	cmp	r3, #48	@ 0x30
 80020ec:	d900      	bls.n	80020f0 <minmea_scan+0x84>
 80020ee:	e32a      	b.n	8002746 <minmea_scan+0x6da>
 80020f0:	009a      	lsls	r2, r3, #2
 80020f2:	4bbd      	ldr	r3, [pc, #756]	@ (80023e8 <minmea_scan+0x37c>)
 80020f4:	18d3      	adds	r3, r2, r3
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	469f      	mov	pc, r3
            case 'c': { // Single character field (char).
                char value = '\0';
 80020fa:	258f      	movs	r5, #143	@ 0x8f
 80020fc:	197b      	adds	r3, r7, r5
 80020fe:	2200      	movs	r2, #0
 8002100:	701a      	strb	r2, [r3, #0]

                if (field && minmea_isfield(*field))
 8002102:	2490      	movs	r4, #144	@ 0x90
 8002104:	193b      	adds	r3, r7, r4
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d00c      	beq.n	8002126 <minmea_scan+0xba>
 800210c:	193b      	adds	r3, r7, r4
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	0018      	movs	r0, r3
 8002114:	f7ff ff84 	bl	8002020 <minmea_isfield>
 8002118:	1e03      	subs	r3, r0, #0
 800211a:	d004      	beq.n	8002126 <minmea_scan+0xba>
                    value = *field;
 800211c:	197b      	adds	r3, r7, r5
 800211e:	193a      	adds	r2, r7, r4
 8002120:	6812      	ldr	r2, [r2, #0]
 8002122:	7812      	ldrb	r2, [r2, #0]
 8002124:	701a      	strb	r2, [r3, #0]

                *va_arg(ap, char *) = value;
 8002126:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002128:	1d1a      	adds	r2, r3, #4
 800212a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	228f      	movs	r2, #143	@ 0x8f
 8002130:	18ba      	adds	r2, r7, r2
 8002132:	7812      	ldrb	r2, [r2, #0]
 8002134:	701a      	strb	r2, [r3, #0]
            } break;
 8002136:	e2db      	b.n	80026f0 <minmea_scan+0x684>

            case 'd': { // Single character direction field (int).
                int value = 0;
 8002138:	2300      	movs	r3, #0
 800213a:	2288      	movs	r2, #136	@ 0x88
 800213c:	18ba      	adds	r2, r7, r2
 800213e:	6013      	str	r3, [r2, #0]

                if (field && minmea_isfield(*field)) {
 8002140:	2490      	movs	r4, #144	@ 0x90
 8002142:	193b      	adds	r3, r7, r4
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d022      	beq.n	8002190 <minmea_scan+0x124>
 800214a:	193b      	adds	r3, r7, r4
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	0018      	movs	r0, r3
 8002152:	f7ff ff65 	bl	8002020 <minmea_isfield>
 8002156:	1e03      	subs	r3, r0, #0
 8002158:	d01a      	beq.n	8002190 <minmea_scan+0x124>
                    switch (*field) {
 800215a:	193b      	adds	r3, r7, r4
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	2b57      	cmp	r3, #87	@ 0x57
 8002162:	d00f      	beq.n	8002184 <minmea_scan+0x118>
 8002164:	dd00      	ble.n	8002168 <minmea_scan+0xfc>
 8002166:	e2f0      	b.n	800274a <minmea_scan+0x6de>
 8002168:	2b53      	cmp	r3, #83	@ 0x53
 800216a:	d00b      	beq.n	8002184 <minmea_scan+0x118>
 800216c:	dd00      	ble.n	8002170 <minmea_scan+0x104>
 800216e:	e2ec      	b.n	800274a <minmea_scan+0x6de>
 8002170:	2b45      	cmp	r3, #69	@ 0x45
 8002172:	d002      	beq.n	800217a <minmea_scan+0x10e>
 8002174:	2b4e      	cmp	r3, #78	@ 0x4e
 8002176:	d000      	beq.n	800217a <minmea_scan+0x10e>
 8002178:	e2e7      	b.n	800274a <minmea_scan+0x6de>
                        case 'N':
                        case 'E':
                            value = 1;
 800217a:	2301      	movs	r3, #1
 800217c:	2288      	movs	r2, #136	@ 0x88
 800217e:	18ba      	adds	r2, r7, r2
 8002180:	6013      	str	r3, [r2, #0]
                            break;
 8002182:	e005      	b.n	8002190 <minmea_scan+0x124>
                        case 'S':
                        case 'W':
                            value = -1;
 8002184:	2301      	movs	r3, #1
 8002186:	425b      	negs	r3, r3
 8002188:	2288      	movs	r2, #136	@ 0x88
 800218a:	18ba      	adds	r2, r7, r2
 800218c:	6013      	str	r3, [r2, #0]
                            break;
 800218e:	46c0      	nop			@ (mov r8, r8)
                        default:
                            goto parse_error;
                    }
                }

                *va_arg(ap, int *) = value;
 8002190:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002192:	1d1a      	adds	r2, r3, #4
 8002194:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2288      	movs	r2, #136	@ 0x88
 800219a:	18ba      	adds	r2, r7, r2
 800219c:	6812      	ldr	r2, [r2, #0]
 800219e:	601a      	str	r2, [r3, #0]
            } break;
 80021a0:	e2a6      	b.n	80026f0 <minmea_scan+0x684>

            case 'f': { // Fractional value with scale (struct minmea_float).
                int sign = 0;
 80021a2:	2300      	movs	r3, #0
 80021a4:	2284      	movs	r2, #132	@ 0x84
 80021a6:	18ba      	adds	r2, r7, r2
 80021a8:	6013      	str	r3, [r2, #0]
                int_least32_t value = -1;
 80021aa:	2301      	movs	r3, #1
 80021ac:	425b      	negs	r3, r3
 80021ae:	2280      	movs	r2, #128	@ 0x80
 80021b0:	18ba      	adds	r2, r7, r2
 80021b2:	6013      	str	r3, [r2, #0]
                int_least32_t scale = 0;
 80021b4:	2300      	movs	r3, #0
 80021b6:	67fb      	str	r3, [r7, #124]	@ 0x7c

                if (field) {
 80021b8:	2390      	movs	r3, #144	@ 0x90
 80021ba:	18fb      	adds	r3, r7, r3
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d100      	bne.n	80021c4 <minmea_scan+0x158>
 80021c2:	e088      	b.n	80022d6 <minmea_scan+0x26a>
                    while (minmea_isfield(*field)) {
 80021c4:	e07d      	b.n	80022c2 <minmea_scan+0x256>
                        if (*field == '+' && !sign && value == -1) {
 80021c6:	2390      	movs	r3, #144	@ 0x90
 80021c8:	18fb      	adds	r3, r7, r3
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	2b2b      	cmp	r3, #43	@ 0x2b
 80021d0:	d10d      	bne.n	80021ee <minmea_scan+0x182>
 80021d2:	2284      	movs	r2, #132	@ 0x84
 80021d4:	18bb      	adds	r3, r7, r2
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d108      	bne.n	80021ee <minmea_scan+0x182>
 80021dc:	2380      	movs	r3, #128	@ 0x80
 80021de:	18fb      	adds	r3, r7, r3
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	3301      	adds	r3, #1
 80021e4:	d103      	bne.n	80021ee <minmea_scan+0x182>
                            sign = 1;
 80021e6:	2301      	movs	r3, #1
 80021e8:	18ba      	adds	r2, r7, r2
 80021ea:	6013      	str	r3, [r2, #0]
 80021ec:	e063      	b.n	80022b6 <minmea_scan+0x24a>
                        } else if (*field == '-' && !sign && value == -1) {
 80021ee:	2390      	movs	r3, #144	@ 0x90
 80021f0:	18fb      	adds	r3, r7, r3
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	2b2d      	cmp	r3, #45	@ 0x2d
 80021f8:	d10e      	bne.n	8002218 <minmea_scan+0x1ac>
 80021fa:	2284      	movs	r2, #132	@ 0x84
 80021fc:	18bb      	adds	r3, r7, r2
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d109      	bne.n	8002218 <minmea_scan+0x1ac>
 8002204:	2380      	movs	r3, #128	@ 0x80
 8002206:	18fb      	adds	r3, r7, r3
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	3301      	adds	r3, #1
 800220c:	d104      	bne.n	8002218 <minmea_scan+0x1ac>
                            sign = -1;
 800220e:	2301      	movs	r3, #1
 8002210:	425b      	negs	r3, r3
 8002212:	18ba      	adds	r2, r7, r2
 8002214:	6013      	str	r3, [r2, #0]
 8002216:	e04e      	b.n	80022b6 <minmea_scan+0x24a>
                        } else if (isdigit((unsigned char) *field)) {
 8002218:	2190      	movs	r1, #144	@ 0x90
 800221a:	187b      	adds	r3, r7, r1
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	1c5a      	adds	r2, r3, #1
 8002222:	4b72      	ldr	r3, [pc, #456]	@ (80023ec <minmea_scan+0x380>)
 8002224:	18d3      	adds	r3, r2, r3
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	001a      	movs	r2, r3
 800222a:	2304      	movs	r3, #4
 800222c:	4013      	ands	r3, r2
 800222e:	d035      	beq.n	800229c <minmea_scan+0x230>
                            int digit = *field - '0';
 8002230:	187b      	adds	r3, r7, r1
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	3b30      	subs	r3, #48	@ 0x30
 8002238:	63bb      	str	r3, [r7, #56]	@ 0x38
                            if (value == -1)
 800223a:	2280      	movs	r2, #128	@ 0x80
 800223c:	18bb      	adds	r3, r7, r2
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	3301      	adds	r3, #1
 8002242:	d102      	bne.n	800224a <minmea_scan+0x1de>
                                value = 0;
 8002244:	2300      	movs	r3, #0
 8002246:	18ba      	adds	r2, r7, r2
 8002248:	6013      	str	r3, [r2, #0]
                            if (value > (INT_LEAST32_MAX-digit) / 10) {
 800224a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800224c:	4a68      	ldr	r2, [pc, #416]	@ (80023f0 <minmea_scan+0x384>)
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	210a      	movs	r1, #10
 8002252:	0018      	movs	r0, r3
 8002254:	f7fd fff4 	bl	8000240 <__divsi3>
 8002258:	0003      	movs	r3, r0
 800225a:	001a      	movs	r2, r3
 800225c:	2380      	movs	r3, #128	@ 0x80
 800225e:	18fb      	adds	r3, r7, r3
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4293      	cmp	r3, r2
 8002264:	dd04      	ble.n	8002270 <minmea_scan+0x204>
                                /* we ran out of bits, what do we do? */
                                if (scale) {
 8002266:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002268:	2b00      	cmp	r3, #0
 800226a:	d100      	bne.n	800226e <minmea_scan+0x202>
 800226c:	e26f      	b.n	800274e <minmea_scan+0x6e2>
                                    /* truncate extra precision */
                                    break;
 800226e:	e032      	b.n	80022d6 <minmea_scan+0x26a>
                                } else {
                                    /* integer overflow. bail out. */
                                    goto parse_error;
                                }
                            }
                            value = (10 * value) + digit;
 8002270:	2180      	movs	r1, #128	@ 0x80
 8002272:	187b      	adds	r3, r7, r1
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	0013      	movs	r3, r2
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	189b      	adds	r3, r3, r2
 800227c:	005b      	lsls	r3, r3, #1
 800227e:	001a      	movs	r2, r3
 8002280:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002282:	189b      	adds	r3, r3, r2
 8002284:	187a      	adds	r2, r7, r1
 8002286:	6013      	str	r3, [r2, #0]
                            if (scale)
 8002288:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800228a:	2b00      	cmp	r3, #0
 800228c:	d013      	beq.n	80022b6 <minmea_scan+0x24a>
                                scale *= 10;
 800228e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8002290:	0013      	movs	r3, r2
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	189b      	adds	r3, r3, r2
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800229a:	e00c      	b.n	80022b6 <minmea_scan+0x24a>
                        } else if (*field == '.' && scale == 0) {
 800229c:	2390      	movs	r3, #144	@ 0x90
 800229e:	18fb      	adds	r3, r7, r3
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	2b2e      	cmp	r3, #46	@ 0x2e
 80022a6:	d000      	beq.n	80022aa <minmea_scan+0x23e>
 80022a8:	e253      	b.n	8002752 <minmea_scan+0x6e6>
 80022aa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d000      	beq.n	80022b2 <minmea_scan+0x246>
 80022b0:	e24f      	b.n	8002752 <minmea_scan+0x6e6>
                            scale = 1;
 80022b2:	2301      	movs	r3, #1
 80022b4:	67fb      	str	r3, [r7, #124]	@ 0x7c
                        } else {
                            goto parse_error;
                        }
                        field++;
 80022b6:	2290      	movs	r2, #144	@ 0x90
 80022b8:	18bb      	adds	r3, r7, r2
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	3301      	adds	r3, #1
 80022be:	18ba      	adds	r2, r7, r2
 80022c0:	6013      	str	r3, [r2, #0]
                    while (minmea_isfield(*field)) {
 80022c2:	2390      	movs	r3, #144	@ 0x90
 80022c4:	18fb      	adds	r3, r7, r3
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	0018      	movs	r0, r3
 80022cc:	f7ff fea8 	bl	8002020 <minmea_isfield>
 80022d0:	1e03      	subs	r3, r0, #0
 80022d2:	d000      	beq.n	80022d6 <minmea_scan+0x26a>
 80022d4:	e777      	b.n	80021c6 <minmea_scan+0x15a>
                    }
                }

                if ((sign || scale) && value == -1)
 80022d6:	2384      	movs	r3, #132	@ 0x84
 80022d8:	18fb      	adds	r3, r7, r3
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d102      	bne.n	80022e6 <minmea_scan+0x27a>
 80022e0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d005      	beq.n	80022f2 <minmea_scan+0x286>
 80022e6:	2380      	movs	r3, #128	@ 0x80
 80022e8:	18fb      	adds	r3, r7, r3
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	3301      	adds	r3, #1
 80022ee:	d100      	bne.n	80022f2 <minmea_scan+0x286>
 80022f0:	e231      	b.n	8002756 <minmea_scan+0x6ea>
                    goto parse_error;

                if (value == -1) {
 80022f2:	2280      	movs	r2, #128	@ 0x80
 80022f4:	18bb      	adds	r3, r7, r2
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	3301      	adds	r3, #1
 80022fa:	d105      	bne.n	8002308 <minmea_scan+0x29c>
                    /* No digits were scanned. */
                    value = 0;
 80022fc:	2300      	movs	r3, #0
 80022fe:	18ba      	adds	r2, r7, r2
 8002300:	6013      	str	r3, [r2, #0]
                    scale = 0;
 8002302:	2300      	movs	r3, #0
 8002304:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002306:	e004      	b.n	8002312 <minmea_scan+0x2a6>
                } else if (scale == 0) {
 8002308:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800230a:	2b00      	cmp	r3, #0
 800230c:	d101      	bne.n	8002312 <minmea_scan+0x2a6>
                    /* No decimal point. */
                    scale = 1;
 800230e:	2301      	movs	r3, #1
 8002310:	67fb      	str	r3, [r7, #124]	@ 0x7c
                }
                if (sign)
 8002312:	2284      	movs	r2, #132	@ 0x84
 8002314:	18bb      	adds	r3, r7, r2
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d007      	beq.n	800232c <minmea_scan+0x2c0>
                    value *= sign;
 800231c:	2180      	movs	r1, #128	@ 0x80
 800231e:	187b      	adds	r3, r7, r1
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	18ba      	adds	r2, r7, r2
 8002324:	6812      	ldr	r2, [r2, #0]
 8002326:	4353      	muls	r3, r2
 8002328:	187a      	adds	r2, r7, r1
 800232a:	6013      	str	r3, [r2, #0]

                *va_arg(ap, struct minmea_float *) = (struct minmea_float) {value, scale};
 800232c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800232e:	1d1a      	adds	r2, r3, #4
 8002330:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2280      	movs	r2, #128	@ 0x80
 8002336:	18ba      	adds	r2, r7, r2
 8002338:	6812      	ldr	r2, [r2, #0]
 800233a:	601a      	str	r2, [r3, #0]
 800233c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800233e:	605a      	str	r2, [r3, #4]
            } break;
 8002340:	e1d6      	b.n	80026f0 <minmea_scan+0x684>

            case 'i': { // Integer value, default 0 (int).
                int value = 0;
 8002342:	2300      	movs	r3, #0
 8002344:	67bb      	str	r3, [r7, #120]	@ 0x78

                if (field) {
 8002346:	2290      	movs	r2, #144	@ 0x90
 8002348:	18bb      	adds	r3, r7, r2
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d011      	beq.n	8002374 <minmea_scan+0x308>
                    char *endptr;
                    value = strtol(field, &endptr, 10);
 8002350:	2320      	movs	r3, #32
 8002352:	18f9      	adds	r1, r7, r3
 8002354:	18bb      	adds	r3, r7, r2
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	220a      	movs	r2, #10
 800235a:	0018      	movs	r0, r3
 800235c:	f004 ffc4 	bl	80072e8 <strtol>
 8002360:	0003      	movs	r3, r0
 8002362:	67bb      	str	r3, [r7, #120]	@ 0x78
                    if (minmea_isfield(*endptr))
 8002364:	6a3b      	ldr	r3, [r7, #32]
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	0018      	movs	r0, r3
 800236a:	f7ff fe59 	bl	8002020 <minmea_isfield>
 800236e:	1e03      	subs	r3, r0, #0
 8002370:	d000      	beq.n	8002374 <minmea_scan+0x308>
 8002372:	e1f2      	b.n	800275a <minmea_scan+0x6ee>
                        goto parse_error;
                }

                *va_arg(ap, int *) = value;
 8002374:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002376:	1d1a      	adds	r2, r3, #4
 8002378:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800237e:	601a      	str	r2, [r3, #0]
            } break;
 8002380:	e1b6      	b.n	80026f0 <minmea_scan+0x684>

            case 's': { // String value (char *).
                char *buf = va_arg(ap, char *);
 8002382:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002384:	1d1a      	adds	r2, r3, #4
 8002386:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	677b      	str	r3, [r7, #116]	@ 0x74

                if (field) {
 800238c:	2390      	movs	r3, #144	@ 0x90
 800238e:	18fb      	adds	r3, r7, r3
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d014      	beq.n	80023c0 <minmea_scan+0x354>
                    while (minmea_isfield(*field))
 8002396:	e00a      	b.n	80023ae <minmea_scan+0x342>
                        *buf++ = *field++;
 8002398:	2190      	movs	r1, #144	@ 0x90
 800239a:	187b      	adds	r3, r7, r1
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	1c53      	adds	r3, r2, #1
 80023a0:	1879      	adds	r1, r7, r1
 80023a2:	600b      	str	r3, [r1, #0]
 80023a4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80023a6:	1c59      	adds	r1, r3, #1
 80023a8:	6779      	str	r1, [r7, #116]	@ 0x74
 80023aa:	7812      	ldrb	r2, [r2, #0]
 80023ac:	701a      	strb	r2, [r3, #0]
                    while (minmea_isfield(*field))
 80023ae:	2390      	movs	r3, #144	@ 0x90
 80023b0:	18fb      	adds	r3, r7, r3
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	0018      	movs	r0, r3
 80023b8:	f7ff fe32 	bl	8002020 <minmea_isfield>
 80023bc:	1e03      	subs	r3, r0, #0
 80023be:	d1eb      	bne.n	8002398 <minmea_scan+0x32c>
                }

                *buf = '\0';
 80023c0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80023c2:	2200      	movs	r2, #0
 80023c4:	701a      	strb	r2, [r3, #0]
            } break;
 80023c6:	e193      	b.n	80026f0 <minmea_scan+0x684>

            case 't': { // NMEA talker+sentence identifier (char *).
                // This field is always mandatory.
                if (!field)
 80023c8:	2290      	movs	r2, #144	@ 0x90
 80023ca:	18bb      	adds	r3, r7, r2
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d100      	bne.n	80023d4 <minmea_scan+0x368>
 80023d2:	e1c4      	b.n	800275e <minmea_scan+0x6f2>
                    goto parse_error;

                if (field[0] != '$')
 80023d4:	18bb      	adds	r3, r7, r2
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	2b24      	cmp	r3, #36	@ 0x24
 80023dc:	d000      	beq.n	80023e0 <minmea_scan+0x374>
 80023de:	e1c0      	b.n	8002762 <minmea_scan+0x6f6>
                    goto parse_error;
                for (int i=0; i<5; i++)
 80023e0:	2300      	movs	r3, #0
 80023e2:	673b      	str	r3, [r7, #112]	@ 0x70
 80023e4:	e01c      	b.n	8002420 <minmea_scan+0x3b4>
 80023e6:	46c0      	nop			@ (mov r8, r8)
 80023e8:	08008c10 	.word	0x08008c10
 80023ec:	08008db0 	.word	0x08008db0
 80023f0:	7fffffff 	.word	0x7fffffff
                    if (!minmea_isfield(field[1+i]))
 80023f4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80023f6:	3301      	adds	r3, #1
 80023f8:	001a      	movs	r2, r3
 80023fa:	2390      	movs	r3, #144	@ 0x90
 80023fc:	18fb      	adds	r3, r7, r3
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	189b      	adds	r3, r3, r2
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	0018      	movs	r0, r3
 8002406:	f7ff fe0b 	bl	8002020 <minmea_isfield>
 800240a:	0003      	movs	r3, r0
 800240c:	001a      	movs	r2, r3
 800240e:	2301      	movs	r3, #1
 8002410:	4053      	eors	r3, r2
 8002412:	b2db      	uxtb	r3, r3
 8002414:	2b00      	cmp	r3, #0
 8002416:	d000      	beq.n	800241a <minmea_scan+0x3ae>
 8002418:	e1a5      	b.n	8002766 <minmea_scan+0x6fa>
                for (int i=0; i<5; i++)
 800241a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800241c:	3301      	adds	r3, #1
 800241e:	673b      	str	r3, [r7, #112]	@ 0x70
 8002420:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002422:	2b04      	cmp	r3, #4
 8002424:	dde6      	ble.n	80023f4 <minmea_scan+0x388>
                        goto parse_error;

                char *buf = va_arg(ap, char *);
 8002426:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002428:	1d1a      	adds	r2, r3, #4
 800242a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	63fb      	str	r3, [r7, #60]	@ 0x3c
                memcpy(buf, field+1, 5);
 8002430:	2390      	movs	r3, #144	@ 0x90
 8002432:	18fb      	adds	r3, r7, r3
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	1c59      	adds	r1, r3, #1
 8002438:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800243a:	2205      	movs	r2, #5
 800243c:	0018      	movs	r0, r3
 800243e:	f005 f922 	bl	8007686 <memcpy>
                buf[5] = '\0';
 8002442:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002444:	3305      	adds	r3, #5
 8002446:	2200      	movs	r2, #0
 8002448:	701a      	strb	r2, [r3, #0]
            } break;
 800244a:	e151      	b.n	80026f0 <minmea_scan+0x684>

            case 'D': { // Date (int, int, int), -1 if empty.
                struct minmea_date *date = va_arg(ap, struct minmea_date *);
 800244c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800244e:	1d1a      	adds	r2, r3, #4
 8002450:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	633b      	str	r3, [r7, #48]	@ 0x30

                int d = -1, m = -1, y = -1;
 8002456:	2301      	movs	r3, #1
 8002458:	425b      	negs	r3, r3
 800245a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800245c:	2301      	movs	r3, #1
 800245e:	425b      	negs	r3, r3
 8002460:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002462:	2301      	movs	r3, #1
 8002464:	425b      	negs	r3, r3
 8002466:	667b      	str	r3, [r7, #100]	@ 0x64

                if (field && minmea_isfield(*field)) {
 8002468:	2290      	movs	r2, #144	@ 0x90
 800246a:	18bb      	adds	r3, r7, r2
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d067      	beq.n	8002542 <minmea_scan+0x4d6>
 8002472:	18bb      	adds	r3, r7, r2
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	0018      	movs	r0, r3
 800247a:	f7ff fdd1 	bl	8002020 <minmea_isfield>
 800247e:	1e03      	subs	r3, r0, #0
 8002480:	d05f      	beq.n	8002542 <minmea_scan+0x4d6>
                    // Always six digits.
                    for (int i=0; i<6; i++)
 8002482:	2300      	movs	r3, #0
 8002484:	663b      	str	r3, [r7, #96]	@ 0x60
 8002486:	e011      	b.n	80024ac <minmea_scan+0x440>
                        if (!isdigit((unsigned char) field[i]))
 8002488:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800248a:	2290      	movs	r2, #144	@ 0x90
 800248c:	18ba      	adds	r2, r7, r2
 800248e:	6812      	ldr	r2, [r2, #0]
 8002490:	18d3      	adds	r3, r2, r3
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	1c5a      	adds	r2, r3, #1
 8002496:	4bbb      	ldr	r3, [pc, #748]	@ (8002784 <minmea_scan+0x718>)
 8002498:	18d3      	adds	r3, r2, r3
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	001a      	movs	r2, r3
 800249e:	2304      	movs	r3, #4
 80024a0:	4013      	ands	r3, r2
 80024a2:	d100      	bne.n	80024a6 <minmea_scan+0x43a>
 80024a4:	e161      	b.n	800276a <minmea_scan+0x6fe>
                    for (int i=0; i<6; i++)
 80024a6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80024a8:	3301      	adds	r3, #1
 80024aa:	663b      	str	r3, [r7, #96]	@ 0x60
 80024ac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80024ae:	2b05      	cmp	r3, #5
 80024b0:	ddea      	ble.n	8002488 <minmea_scan+0x41c>
                            goto parse_error;

                    d = strtol((char[]) {field[0], field[1], '\0'}, NULL, 10);
 80024b2:	2490      	movs	r4, #144	@ 0x90
 80024b4:	193b      	adds	r3, r7, r4
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	781a      	ldrb	r2, [r3, #0]
 80024ba:	211c      	movs	r1, #28
 80024bc:	187b      	adds	r3, r7, r1
 80024be:	701a      	strb	r2, [r3, #0]
 80024c0:	193b      	adds	r3, r7, r4
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	3301      	adds	r3, #1
 80024c6:	781a      	ldrb	r2, [r3, #0]
 80024c8:	187b      	adds	r3, r7, r1
 80024ca:	705a      	strb	r2, [r3, #1]
 80024cc:	187b      	adds	r3, r7, r1
 80024ce:	2200      	movs	r2, #0
 80024d0:	709a      	strb	r2, [r3, #2]
 80024d2:	187b      	adds	r3, r7, r1
 80024d4:	220a      	movs	r2, #10
 80024d6:	2100      	movs	r1, #0
 80024d8:	0018      	movs	r0, r3
 80024da:	f004 ff05 	bl	80072e8 <strtol>
 80024de:	0003      	movs	r3, r0
 80024e0:	66fb      	str	r3, [r7, #108]	@ 0x6c
                    m = strtol((char[]) {field[2], field[3], '\0'}, NULL, 10);
 80024e2:	193b      	adds	r3, r7, r4
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	3302      	adds	r3, #2
 80024e8:	781a      	ldrb	r2, [r3, #0]
 80024ea:	2118      	movs	r1, #24
 80024ec:	187b      	adds	r3, r7, r1
 80024ee:	701a      	strb	r2, [r3, #0]
 80024f0:	193b      	adds	r3, r7, r4
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	3303      	adds	r3, #3
 80024f6:	781a      	ldrb	r2, [r3, #0]
 80024f8:	187b      	adds	r3, r7, r1
 80024fa:	705a      	strb	r2, [r3, #1]
 80024fc:	187b      	adds	r3, r7, r1
 80024fe:	2200      	movs	r2, #0
 8002500:	709a      	strb	r2, [r3, #2]
 8002502:	187b      	adds	r3, r7, r1
 8002504:	220a      	movs	r2, #10
 8002506:	2100      	movs	r1, #0
 8002508:	0018      	movs	r0, r3
 800250a:	f004 feed 	bl	80072e8 <strtol>
 800250e:	0003      	movs	r3, r0
 8002510:	66bb      	str	r3, [r7, #104]	@ 0x68
                    y = strtol((char[]) {field[4], field[5], '\0'}, NULL, 10);
 8002512:	193b      	adds	r3, r7, r4
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	3304      	adds	r3, #4
 8002518:	781a      	ldrb	r2, [r3, #0]
 800251a:	2114      	movs	r1, #20
 800251c:	187b      	adds	r3, r7, r1
 800251e:	701a      	strb	r2, [r3, #0]
 8002520:	193b      	adds	r3, r7, r4
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	3305      	adds	r3, #5
 8002526:	781a      	ldrb	r2, [r3, #0]
 8002528:	187b      	adds	r3, r7, r1
 800252a:	705a      	strb	r2, [r3, #1]
 800252c:	187b      	adds	r3, r7, r1
 800252e:	2200      	movs	r2, #0
 8002530:	709a      	strb	r2, [r3, #2]
 8002532:	187b      	adds	r3, r7, r1
 8002534:	220a      	movs	r2, #10
 8002536:	2100      	movs	r1, #0
 8002538:	0018      	movs	r0, r3
 800253a:	f004 fed5 	bl	80072e8 <strtol>
 800253e:	0003      	movs	r3, r0
 8002540:	667b      	str	r3, [r7, #100]	@ 0x64
                }

                date->day = d;
 8002542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002544:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002546:	601a      	str	r2, [r3, #0]
                date->month = m;
 8002548:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800254a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800254c:	605a      	str	r2, [r3, #4]
                date->year = y;
 800254e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002550:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8002552:	609a      	str	r2, [r3, #8]
            } break;
 8002554:	e0cc      	b.n	80026f0 <minmea_scan+0x684>

            case 'T': { // Time (int, int, int, int), -1 if empty.
                struct minmea_time *time = va_arg(ap, struct minmea_time *);
 8002556:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002558:	1d1a      	adds	r2, r3, #4
 800255a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	637b      	str	r3, [r7, #52]	@ 0x34

                int h = -1, i = -1, s = -1, u = -1;
 8002560:	2301      	movs	r3, #1
 8002562:	425b      	negs	r3, r3
 8002564:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002566:	2301      	movs	r3, #1
 8002568:	425b      	negs	r3, r3
 800256a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800256c:	2301      	movs	r3, #1
 800256e:	425b      	negs	r3, r3
 8002570:	657b      	str	r3, [r7, #84]	@ 0x54
 8002572:	2301      	movs	r3, #1
 8002574:	425b      	negs	r3, r3
 8002576:	653b      	str	r3, [r7, #80]	@ 0x50

                if (field && minmea_isfield(*field)) {
 8002578:	2290      	movs	r2, #144	@ 0x90
 800257a:	18bb      	adds	r3, r7, r2
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d100      	bne.n	8002584 <minmea_scan+0x518>
 8002582:	e0a7      	b.n	80026d4 <minmea_scan+0x668>
 8002584:	18bb      	adds	r3, r7, r2
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	0018      	movs	r0, r3
 800258c:	f7ff fd48 	bl	8002020 <minmea_isfield>
 8002590:	1e03      	subs	r3, r0, #0
 8002592:	d100      	bne.n	8002596 <minmea_scan+0x52a>
 8002594:	e09e      	b.n	80026d4 <minmea_scan+0x668>
                    // Minimum required: integer time.
                    for (int i=0; i<6; i++)
 8002596:	2300      	movs	r3, #0
 8002598:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800259a:	e011      	b.n	80025c0 <minmea_scan+0x554>
                        if (!isdigit((unsigned char) field[i]))
 800259c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800259e:	2290      	movs	r2, #144	@ 0x90
 80025a0:	18ba      	adds	r2, r7, r2
 80025a2:	6812      	ldr	r2, [r2, #0]
 80025a4:	18d3      	adds	r3, r2, r3
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	1c5a      	adds	r2, r3, #1
 80025aa:	4b76      	ldr	r3, [pc, #472]	@ (8002784 <minmea_scan+0x718>)
 80025ac:	18d3      	adds	r3, r2, r3
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	001a      	movs	r2, r3
 80025b2:	2304      	movs	r3, #4
 80025b4:	4013      	ands	r3, r2
 80025b6:	d100      	bne.n	80025ba <minmea_scan+0x54e>
 80025b8:	e0d9      	b.n	800276e <minmea_scan+0x702>
                    for (int i=0; i<6; i++)
 80025ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80025bc:	3301      	adds	r3, #1
 80025be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80025c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80025c2:	2b05      	cmp	r3, #5
 80025c4:	ddea      	ble.n	800259c <minmea_scan+0x530>
                            goto parse_error;

                    h = strtol((char[]) {field[0], field[1], '\0'}, NULL, 10);
 80025c6:	2490      	movs	r4, #144	@ 0x90
 80025c8:	193b      	adds	r3, r7, r4
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	781a      	ldrb	r2, [r3, #0]
 80025ce:	2110      	movs	r1, #16
 80025d0:	187b      	adds	r3, r7, r1
 80025d2:	701a      	strb	r2, [r3, #0]
 80025d4:	193b      	adds	r3, r7, r4
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	3301      	adds	r3, #1
 80025da:	781a      	ldrb	r2, [r3, #0]
 80025dc:	187b      	adds	r3, r7, r1
 80025de:	705a      	strb	r2, [r3, #1]
 80025e0:	187b      	adds	r3, r7, r1
 80025e2:	2200      	movs	r2, #0
 80025e4:	709a      	strb	r2, [r3, #2]
 80025e6:	187b      	adds	r3, r7, r1
 80025e8:	220a      	movs	r2, #10
 80025ea:	2100      	movs	r1, #0
 80025ec:	0018      	movs	r0, r3
 80025ee:	f004 fe7b 	bl	80072e8 <strtol>
 80025f2:	0003      	movs	r3, r0
 80025f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
                    i = strtol((char[]) {field[2], field[3], '\0'}, NULL, 10);
 80025f6:	193b      	adds	r3, r7, r4
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	3302      	adds	r3, #2
 80025fc:	781a      	ldrb	r2, [r3, #0]
 80025fe:	210c      	movs	r1, #12
 8002600:	187b      	adds	r3, r7, r1
 8002602:	701a      	strb	r2, [r3, #0]
 8002604:	193b      	adds	r3, r7, r4
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	3303      	adds	r3, #3
 800260a:	781a      	ldrb	r2, [r3, #0]
 800260c:	187b      	adds	r3, r7, r1
 800260e:	705a      	strb	r2, [r3, #1]
 8002610:	187b      	adds	r3, r7, r1
 8002612:	2200      	movs	r2, #0
 8002614:	709a      	strb	r2, [r3, #2]
 8002616:	187b      	adds	r3, r7, r1
 8002618:	220a      	movs	r2, #10
 800261a:	2100      	movs	r1, #0
 800261c:	0018      	movs	r0, r3
 800261e:	f004 fe63 	bl	80072e8 <strtol>
 8002622:	0003      	movs	r3, r0
 8002624:	65bb      	str	r3, [r7, #88]	@ 0x58
                    s = strtol((char[]) {field[4], field[5], '\0'}, NULL, 10);
 8002626:	193b      	adds	r3, r7, r4
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	3304      	adds	r3, #4
 800262c:	781a      	ldrb	r2, [r3, #0]
 800262e:	2108      	movs	r1, #8
 8002630:	187b      	adds	r3, r7, r1
 8002632:	701a      	strb	r2, [r3, #0]
 8002634:	193b      	adds	r3, r7, r4
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	3305      	adds	r3, #5
 800263a:	781a      	ldrb	r2, [r3, #0]
 800263c:	187b      	adds	r3, r7, r1
 800263e:	705a      	strb	r2, [r3, #1]
 8002640:	187b      	adds	r3, r7, r1
 8002642:	2200      	movs	r2, #0
 8002644:	709a      	strb	r2, [r3, #2]
 8002646:	187b      	adds	r3, r7, r1
 8002648:	220a      	movs	r2, #10
 800264a:	2100      	movs	r1, #0
 800264c:	0018      	movs	r0, r3
 800264e:	f004 fe4b 	bl	80072e8 <strtol>
 8002652:	0003      	movs	r3, r0
 8002654:	657b      	str	r3, [r7, #84]	@ 0x54
                    field += 6;
 8002656:	193b      	adds	r3, r7, r4
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	3306      	adds	r3, #6
 800265c:	193a      	adds	r2, r7, r4
 800265e:	6013      	str	r3, [r2, #0]

                    // Extra: fractional time. Saved as microseconds.
                    if (*field++ == '.') {
 8002660:	193b      	adds	r3, r7, r4
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	1c5a      	adds	r2, r3, #1
 8002666:	1939      	adds	r1, r7, r4
 8002668:	600a      	str	r2, [r1, #0]
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	2b2e      	cmp	r3, #46	@ 0x2e
 800266e:	d12f      	bne.n	80026d0 <minmea_scan+0x664>
                        int value = 0;
 8002670:	2300      	movs	r3, #0
 8002672:	64bb      	str	r3, [r7, #72]	@ 0x48
                        int scale = 1000000;
 8002674:	4b44      	ldr	r3, [pc, #272]	@ (8002788 <minmea_scan+0x71c>)
 8002676:	647b      	str	r3, [r7, #68]	@ 0x44
                        while (isdigit((unsigned char) *field) && scale > 1) {
 8002678:	e016      	b.n	80026a8 <minmea_scan+0x63c>
                            value = (value * 10) + (*field++ - '0');
 800267a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800267c:	0013      	movs	r3, r2
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	189b      	adds	r3, r3, r2
 8002682:	005b      	lsls	r3, r3, #1
 8002684:	0019      	movs	r1, r3
 8002686:	2090      	movs	r0, #144	@ 0x90
 8002688:	183b      	adds	r3, r7, r0
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	1c5a      	adds	r2, r3, #1
 800268e:	1838      	adds	r0, r7, r0
 8002690:	6002      	str	r2, [r0, #0]
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	3b30      	subs	r3, #48	@ 0x30
 8002696:	18cb      	adds	r3, r1, r3
 8002698:	64bb      	str	r3, [r7, #72]	@ 0x48
                            scale /= 10;
 800269a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800269c:	210a      	movs	r1, #10
 800269e:	0018      	movs	r0, r3
 80026a0:	f7fd fdce 	bl	8000240 <__divsi3>
 80026a4:	0003      	movs	r3, r0
 80026a6:	647b      	str	r3, [r7, #68]	@ 0x44
                        while (isdigit((unsigned char) *field) && scale > 1) {
 80026a8:	2390      	movs	r3, #144	@ 0x90
 80026aa:	18fb      	adds	r3, r7, r3
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	1c5a      	adds	r2, r3, #1
 80026b2:	4b34      	ldr	r3, [pc, #208]	@ (8002784 <minmea_scan+0x718>)
 80026b4:	18d3      	adds	r3, r2, r3
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	001a      	movs	r2, r3
 80026ba:	2304      	movs	r3, #4
 80026bc:	4013      	ands	r3, r2
 80026be:	d002      	beq.n	80026c6 <minmea_scan+0x65a>
 80026c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	dcd9      	bgt.n	800267a <minmea_scan+0x60e>
                        }
                        u = value * scale;
 80026c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80026c8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80026ca:	4353      	muls	r3, r2
 80026cc:	653b      	str	r3, [r7, #80]	@ 0x50
 80026ce:	e001      	b.n	80026d4 <minmea_scan+0x668>
                    } else {
                        u = 0;
 80026d0:	2300      	movs	r3, #0
 80026d2:	653b      	str	r3, [r7, #80]	@ 0x50
                    }
                }

                time->hours = h;
 80026d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026d6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80026d8:	601a      	str	r2, [r3, #0]
                time->minutes = i;
 80026da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026dc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80026de:	605a      	str	r2, [r3, #4]
                time->seconds = s;
 80026e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026e2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80026e4:	609a      	str	r2, [r3, #8]
                time->microseconds = u;
 80026e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026e8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80026ea:	60da      	str	r2, [r3, #12]
            } break;
 80026ec:	e000      	b.n	80026f0 <minmea_scan+0x684>

            case '_': { // Ignore the field.
            } break;
 80026ee:	46c0      	nop			@ (mov r8, r8)
            default: { // Unknown.
                goto parse_error;
            } break;
        }

        next_field();
 80026f0:	e002      	b.n	80026f8 <minmea_scan+0x68c>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	3301      	adds	r3, #1
 80026f6:	607b      	str	r3, [r7, #4]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	0018      	movs	r0, r3
 80026fe:	f7ff fc8f 	bl	8002020 <minmea_isfield>
 8002702:	1e03      	subs	r3, r0, #0
 8002704:	d1f5      	bne.n	80026f2 <minmea_scan+0x686>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	2b2c      	cmp	r3, #44	@ 0x2c
 800270c:	d107      	bne.n	800271e <minmea_scan+0x6b2>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	3301      	adds	r3, #1
 8002712:	607b      	str	r3, [r7, #4]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2290      	movs	r2, #144	@ 0x90
 8002718:	18ba      	adds	r2, r7, r2
 800271a:	6013      	str	r3, [r2, #0]
 800271c:	e003      	b.n	8002726 <minmea_scan+0x6ba>
 800271e:	2300      	movs	r3, #0
 8002720:	2290      	movs	r2, #144	@ 0x90
 8002722:	18ba      	adds	r2, r7, r2
 8002724:	6013      	str	r3, [r2, #0]
    while (*format) {
 8002726:	23a4      	movs	r3, #164	@ 0xa4
 8002728:	2208      	movs	r2, #8
 800272a:	189b      	adds	r3, r3, r2
 800272c:	19db      	adds	r3, r3, r7
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d000      	beq.n	8002738 <minmea_scan+0x6cc>
 8002736:	e4b0      	b.n	800209a <minmea_scan+0x2e>
    }

    result = true;
 8002738:	2397      	movs	r3, #151	@ 0x97
 800273a:	18fb      	adds	r3, r7, r3
 800273c:	2201      	movs	r2, #1
 800273e:	701a      	strb	r2, [r3, #0]
 8002740:	e016      	b.n	8002770 <minmea_scan+0x704>
            goto parse_error;
 8002742:	46c0      	nop			@ (mov r8, r8)
 8002744:	e014      	b.n	8002770 <minmea_scan+0x704>
                goto parse_error;
 8002746:	46c0      	nop			@ (mov r8, r8)
 8002748:	e012      	b.n	8002770 <minmea_scan+0x704>
                            goto parse_error;
 800274a:	46c0      	nop			@ (mov r8, r8)
 800274c:	e010      	b.n	8002770 <minmea_scan+0x704>
                                    goto parse_error;
 800274e:	46c0      	nop			@ (mov r8, r8)
 8002750:	e00e      	b.n	8002770 <minmea_scan+0x704>
                            goto parse_error;
 8002752:	46c0      	nop			@ (mov r8, r8)
 8002754:	e00c      	b.n	8002770 <minmea_scan+0x704>
                    goto parse_error;
 8002756:	46c0      	nop			@ (mov r8, r8)
 8002758:	e00a      	b.n	8002770 <minmea_scan+0x704>
                        goto parse_error;
 800275a:	46c0      	nop			@ (mov r8, r8)
 800275c:	e008      	b.n	8002770 <minmea_scan+0x704>
                    goto parse_error;
 800275e:	46c0      	nop			@ (mov r8, r8)
 8002760:	e006      	b.n	8002770 <minmea_scan+0x704>
                    goto parse_error;
 8002762:	46c0      	nop			@ (mov r8, r8)
 8002764:	e004      	b.n	8002770 <minmea_scan+0x704>
                        goto parse_error;
 8002766:	46c0      	nop			@ (mov r8, r8)
 8002768:	e002      	b.n	8002770 <minmea_scan+0x704>
                            goto parse_error;
 800276a:	46c0      	nop			@ (mov r8, r8)
 800276c:	e000      	b.n	8002770 <minmea_scan+0x704>
                            goto parse_error;
 800276e:	46c0      	nop			@ (mov r8, r8)

parse_error:
    va_end(ap);
    return result;
 8002770:	2397      	movs	r3, #151	@ 0x97
 8002772:	18fb      	adds	r3, r7, r3
 8002774:	781b      	ldrb	r3, [r3, #0]
}
 8002776:	0018      	movs	r0, r3
 8002778:	46bd      	mov	sp, r7
 800277a:	b027      	add	sp, #156	@ 0x9c
 800277c:	bcb0      	pop	{r4, r5, r7}
 800277e:	bc08      	pop	{r3}
 8002780:	b003      	add	sp, #12
 8002782:	4718      	bx	r3
 8002784:	08008db0 	.word	0x08008db0
 8002788:	000f4240 	.word	0x000f4240

0800278c <minmea_parse_rmc>:

    return MINMEA_UNKNOWN;
}

bool minmea_parse_rmc(struct minmea_sentence_rmc *frame, const char *sentence)
{
 800278c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800278e:	46d6      	mov	lr, sl
 8002790:	464f      	mov	r7, r9
 8002792:	4646      	mov	r6, r8
 8002794:	b5c0      	push	{r6, r7, lr}
 8002796:	b092      	sub	sp, #72	@ 0x48
 8002798:	af0a      	add	r7, sp, #40	@ 0x28
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
    char type[6];
    char validity;
    int latitude_direction;
    int longitude_direction;
    int variation_direction;
    if (!minmea_scan(sentence, "tTcfdfdffDfd",
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	469a      	mov	sl, r3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	3314      	adds	r3, #20
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	321c      	adds	r2, #28
 80027aa:	6879      	ldr	r1, [r7, #4]
 80027ac:	3124      	adds	r1, #36	@ 0x24
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	302c      	adds	r0, #44	@ 0x2c
 80027b2:	687c      	ldr	r4, [r7, #4]
 80027b4:	3434      	adds	r4, #52	@ 0x34
 80027b6:	687d      	ldr	r5, [r7, #4]
 80027b8:	3540      	adds	r5, #64	@ 0x40
 80027ba:	2618      	movs	r6, #24
 80027bc:	46b1      	mov	r9, r6
 80027be:	44b9      	add	r9, r7
 80027c0:	4e2a      	ldr	r6, [pc, #168]	@ (800286c <minmea_parse_rmc+0xe0>)
 80027c2:	46b0      	mov	r8, r6
 80027c4:	683e      	ldr	r6, [r7, #0]
 80027c6:	46b4      	mov	ip, r6
 80027c8:	2608      	movs	r6, #8
 80027ca:	19be      	adds	r6, r7, r6
 80027cc:	9609      	str	r6, [sp, #36]	@ 0x24
 80027ce:	9508      	str	r5, [sp, #32]
 80027d0:	9407      	str	r4, [sp, #28]
 80027d2:	9006      	str	r0, [sp, #24]
 80027d4:	9105      	str	r1, [sp, #20]
 80027d6:	210c      	movs	r1, #12
 80027d8:	1879      	adds	r1, r7, r1
 80027da:	9104      	str	r1, [sp, #16]
 80027dc:	9203      	str	r2, [sp, #12]
 80027de:	2210      	movs	r2, #16
 80027e0:	18ba      	adds	r2, r7, r2
 80027e2:	9202      	str	r2, [sp, #8]
 80027e4:	9301      	str	r3, [sp, #4]
 80027e6:	2317      	movs	r3, #23
 80027e8:	18fb      	adds	r3, r7, r3
 80027ea:	9300      	str	r3, [sp, #0]
 80027ec:	4653      	mov	r3, sl
 80027ee:	464a      	mov	r2, r9
 80027f0:	4641      	mov	r1, r8
 80027f2:	4660      	mov	r0, ip
 80027f4:	f7ff fc3a 	bl	800206c <minmea_scan>
 80027f8:	0003      	movs	r3, r0
 80027fa:	001a      	movs	r2, r3
 80027fc:	2301      	movs	r3, #1
 80027fe:	4053      	eors	r3, r2
 8002800:	b2db      	uxtb	r3, r3
 8002802:	2b00      	cmp	r3, #0
 8002804:	d001      	beq.n	800280a <minmea_parse_rmc+0x7e>
            &frame->longitude, &longitude_direction,
            &frame->speed,
            &frame->course,
            &frame->date,
            &frame->variation, &variation_direction))
        return false;
 8002806:	2300      	movs	r3, #0
 8002808:	e027      	b.n	800285a <minmea_parse_rmc+0xce>
    if (strcmp(type+2, "RMC"))
 800280a:	2318      	movs	r3, #24
 800280c:	18fb      	adds	r3, r7, r3
 800280e:	3302      	adds	r3, #2
 8002810:	4a17      	ldr	r2, [pc, #92]	@ (8002870 <minmea_parse_rmc+0xe4>)
 8002812:	0011      	movs	r1, r2
 8002814:	0018      	movs	r0, r3
 8002816:	f7fd fc75 	bl	8000104 <strcmp>
 800281a:	1e03      	subs	r3, r0, #0
 800281c:	d001      	beq.n	8002822 <minmea_parse_rmc+0x96>
        return false;
 800281e:	2300      	movs	r3, #0
 8002820:	e01b      	b.n	800285a <minmea_parse_rmc+0xce>

    frame->valid = (validity == 'A');
 8002822:	2317      	movs	r3, #23
 8002824:	18fb      	adds	r3, r7, r3
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	3b41      	subs	r3, #65	@ 0x41
 800282a:	425a      	negs	r2, r3
 800282c:	4153      	adcs	r3, r2
 800282e:	b2da      	uxtb	r2, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	741a      	strb	r2, [r3, #16]
    frame->latitude.value *= latitude_direction;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	695b      	ldr	r3, [r3, #20]
 8002838:	693a      	ldr	r2, [r7, #16]
 800283a:	435a      	muls	r2, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	615a      	str	r2, [r3, #20]
    frame->longitude.value *= longitude_direction;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	69db      	ldr	r3, [r3, #28]
 8002844:	68fa      	ldr	r2, [r7, #12]
 8002846:	435a      	muls	r2, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	61da      	str	r2, [r3, #28]
    frame->variation.value *= variation_direction;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002850:	68ba      	ldr	r2, [r7, #8]
 8002852:	435a      	muls	r2, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	641a      	str	r2, [r3, #64]	@ 0x40

    return true;
 8002858:	2301      	movs	r3, #1
}
 800285a:	0018      	movs	r0, r3
 800285c:	46bd      	mov	sp, r7
 800285e:	b008      	add	sp, #32
 8002860:	bce0      	pop	{r5, r6, r7}
 8002862:	46ba      	mov	sl, r7
 8002864:	46b1      	mov	r9, r6
 8002866:	46a8      	mov	r8, r5
 8002868:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800286a:	46c0      	nop			@ (mov r8, r8)
 800286c:	080085cc 	.word	0x080085cc
 8002870:	080085b8 	.word	0x080085b8

08002874 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800287a:	4b11      	ldr	r3, [pc, #68]	@ (80028c0 <HAL_MspInit+0x4c>)
 800287c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800287e:	4b10      	ldr	r3, [pc, #64]	@ (80028c0 <HAL_MspInit+0x4c>)
 8002880:	2101      	movs	r1, #1
 8002882:	430a      	orrs	r2, r1
 8002884:	641a      	str	r2, [r3, #64]	@ 0x40
 8002886:	4b0e      	ldr	r3, [pc, #56]	@ (80028c0 <HAL_MspInit+0x4c>)
 8002888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800288a:	2201      	movs	r2, #1
 800288c:	4013      	ands	r3, r2
 800288e:	607b      	str	r3, [r7, #4]
 8002890:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002892:	4b0b      	ldr	r3, [pc, #44]	@ (80028c0 <HAL_MspInit+0x4c>)
 8002894:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002896:	4b0a      	ldr	r3, [pc, #40]	@ (80028c0 <HAL_MspInit+0x4c>)
 8002898:	2180      	movs	r1, #128	@ 0x80
 800289a:	0549      	lsls	r1, r1, #21
 800289c:	430a      	orrs	r2, r1
 800289e:	63da      	str	r2, [r3, #60]	@ 0x3c
 80028a0:	4b07      	ldr	r3, [pc, #28]	@ (80028c0 <HAL_MspInit+0x4c>)
 80028a2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80028a4:	2380      	movs	r3, #128	@ 0x80
 80028a6:	055b      	lsls	r3, r3, #21
 80028a8:	4013      	ands	r3, r2
 80028aa:	603b      	str	r3, [r7, #0]
 80028ac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80028ae:	23c0      	movs	r3, #192	@ 0xc0
 80028b0:	00db      	lsls	r3, r3, #3
 80028b2:	0018      	movs	r0, r3
 80028b4:	f000 fb46 	bl	8002f44 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028b8:	46c0      	nop			@ (mov r8, r8)
 80028ba:	46bd      	mov	sp, r7
 80028bc:	b002      	add	sp, #8
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	40021000 	.word	0x40021000

080028c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80028c4:	b590      	push	{r4, r7, lr}
 80028c6:	b09d      	sub	sp, #116	@ 0x74
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028cc:	235c      	movs	r3, #92	@ 0x5c
 80028ce:	18fb      	adds	r3, r7, r3
 80028d0:	0018      	movs	r0, r3
 80028d2:	2314      	movs	r3, #20
 80028d4:	001a      	movs	r2, r3
 80028d6:	2100      	movs	r1, #0
 80028d8:	f004 fe52 	bl	8007580 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80028dc:	2410      	movs	r4, #16
 80028de:	193b      	adds	r3, r7, r4
 80028e0:	0018      	movs	r0, r3
 80028e2:	234c      	movs	r3, #76	@ 0x4c
 80028e4:	001a      	movs	r2, r3
 80028e6:	2100      	movs	r1, #0
 80028e8:	f004 fe4a 	bl	8007580 <memset>
  if(hi2c->Instance==I2C1)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a23      	ldr	r2, [pc, #140]	@ (8002980 <HAL_I2C_MspInit+0xbc>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d13f      	bne.n	8002976 <HAL_I2C_MspInit+0xb2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80028f6:	193b      	adds	r3, r7, r4
 80028f8:	2220      	movs	r2, #32
 80028fa:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80028fc:	193b      	adds	r3, r7, r4
 80028fe:	2200      	movs	r2, #0
 8002900:	619a      	str	r2, [r3, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002902:	193b      	adds	r3, r7, r4
 8002904:	0018      	movs	r0, r3
 8002906:	f002 f90b 	bl	8004b20 <HAL_RCCEx_PeriphCLKConfig>
 800290a:	1e03      	subs	r3, r0, #0
 800290c:	d001      	beq.n	8002912 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800290e:	f7ff fb81 	bl	8002014 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002912:	4b1c      	ldr	r3, [pc, #112]	@ (8002984 <HAL_I2C_MspInit+0xc0>)
 8002914:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002916:	4b1b      	ldr	r3, [pc, #108]	@ (8002984 <HAL_I2C_MspInit+0xc0>)
 8002918:	2101      	movs	r1, #1
 800291a:	430a      	orrs	r2, r1
 800291c:	635a      	str	r2, [r3, #52]	@ 0x34
 800291e:	4b19      	ldr	r3, [pc, #100]	@ (8002984 <HAL_I2C_MspInit+0xc0>)
 8002920:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002922:	2201      	movs	r2, #1
 8002924:	4013      	ands	r3, r2
 8002926:	60fb      	str	r3, [r7, #12]
 8002928:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800292a:	215c      	movs	r1, #92	@ 0x5c
 800292c:	187b      	adds	r3, r7, r1
 800292e:	22c0      	movs	r2, #192	@ 0xc0
 8002930:	00d2      	lsls	r2, r2, #3
 8002932:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002934:	187b      	adds	r3, r7, r1
 8002936:	2212      	movs	r2, #18
 8002938:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800293a:	187b      	adds	r3, r7, r1
 800293c:	2200      	movs	r2, #0
 800293e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002940:	187b      	adds	r3, r7, r1
 8002942:	2200      	movs	r2, #0
 8002944:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8002946:	187b      	adds	r3, r7, r1
 8002948:	2206      	movs	r2, #6
 800294a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800294c:	187a      	adds	r2, r7, r1
 800294e:	23a0      	movs	r3, #160	@ 0xa0
 8002950:	05db      	lsls	r3, r3, #23
 8002952:	0011      	movs	r1, r2
 8002954:	0018      	movs	r0, r3
 8002956:	f000 fbbf 	bl	80030d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800295a:	4b0a      	ldr	r3, [pc, #40]	@ (8002984 <HAL_I2C_MspInit+0xc0>)
 800295c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800295e:	4b09      	ldr	r3, [pc, #36]	@ (8002984 <HAL_I2C_MspInit+0xc0>)
 8002960:	2180      	movs	r1, #128	@ 0x80
 8002962:	0389      	lsls	r1, r1, #14
 8002964:	430a      	orrs	r2, r1
 8002966:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002968:	4b06      	ldr	r3, [pc, #24]	@ (8002984 <HAL_I2C_MspInit+0xc0>)
 800296a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800296c:	2380      	movs	r3, #128	@ 0x80
 800296e:	039b      	lsls	r3, r3, #14
 8002970:	4013      	ands	r3, r2
 8002972:	60bb      	str	r3, [r7, #8]
 8002974:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002976:	46c0      	nop			@ (mov r8, r8)
 8002978:	46bd      	mov	sp, r7
 800297a:	b01d      	add	sp, #116	@ 0x74
 800297c:	bd90      	pop	{r4, r7, pc}
 800297e:	46c0      	nop			@ (mov r8, r8)
 8002980:	40005400 	.word	0x40005400
 8002984:	40021000 	.word	0x40021000

08002988 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002988:	b590      	push	{r4, r7, lr}
 800298a:	b08b      	sub	sp, #44	@ 0x2c
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002990:	2414      	movs	r4, #20
 8002992:	193b      	adds	r3, r7, r4
 8002994:	0018      	movs	r0, r3
 8002996:	2314      	movs	r3, #20
 8002998:	001a      	movs	r2, r3
 800299a:	2100      	movs	r1, #0
 800299c:	f004 fdf0 	bl	8007580 <memset>
  if(hspi->Instance==SPI1)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a1b      	ldr	r2, [pc, #108]	@ (8002a14 <HAL_SPI_MspInit+0x8c>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d130      	bne.n	8002a0c <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80029aa:	4b1b      	ldr	r3, [pc, #108]	@ (8002a18 <HAL_SPI_MspInit+0x90>)
 80029ac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80029ae:	4b1a      	ldr	r3, [pc, #104]	@ (8002a18 <HAL_SPI_MspInit+0x90>)
 80029b0:	2180      	movs	r1, #128	@ 0x80
 80029b2:	0149      	lsls	r1, r1, #5
 80029b4:	430a      	orrs	r2, r1
 80029b6:	641a      	str	r2, [r3, #64]	@ 0x40
 80029b8:	4b17      	ldr	r3, [pc, #92]	@ (8002a18 <HAL_SPI_MspInit+0x90>)
 80029ba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80029bc:	2380      	movs	r3, #128	@ 0x80
 80029be:	015b      	lsls	r3, r3, #5
 80029c0:	4013      	ands	r3, r2
 80029c2:	613b      	str	r3, [r7, #16]
 80029c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029c6:	4b14      	ldr	r3, [pc, #80]	@ (8002a18 <HAL_SPI_MspInit+0x90>)
 80029c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80029ca:	4b13      	ldr	r3, [pc, #76]	@ (8002a18 <HAL_SPI_MspInit+0x90>)
 80029cc:	2101      	movs	r1, #1
 80029ce:	430a      	orrs	r2, r1
 80029d0:	635a      	str	r2, [r3, #52]	@ 0x34
 80029d2:	4b11      	ldr	r3, [pc, #68]	@ (8002a18 <HAL_SPI_MspInit+0x90>)
 80029d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029d6:	2201      	movs	r2, #1
 80029d8:	4013      	ands	r3, r2
 80029da:	60fb      	str	r3, [r7, #12]
 80029dc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA2     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80029de:	0021      	movs	r1, r4
 80029e0:	187b      	adds	r3, r7, r1
 80029e2:	2206      	movs	r2, #6
 80029e4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029e6:	187b      	adds	r3, r7, r1
 80029e8:	2202      	movs	r2, #2
 80029ea:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ec:	187b      	adds	r3, r7, r1
 80029ee:	2200      	movs	r2, #0
 80029f0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029f2:	187b      	adds	r3, r7, r1
 80029f4:	2200      	movs	r2, #0
 80029f6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80029f8:	187b      	adds	r3, r7, r1
 80029fa:	2200      	movs	r2, #0
 80029fc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029fe:	187a      	adds	r2, r7, r1
 8002a00:	23a0      	movs	r3, #160	@ 0xa0
 8002a02:	05db      	lsls	r3, r3, #23
 8002a04:	0011      	movs	r1, r2
 8002a06:	0018      	movs	r0, r3
 8002a08:	f000 fb66 	bl	80030d8 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002a0c:	46c0      	nop			@ (mov r8, r8)
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	b00b      	add	sp, #44	@ 0x2c
 8002a12:	bd90      	pop	{r4, r7, pc}
 8002a14:	40013000 	.word	0x40013000
 8002a18:	40021000 	.word	0x40021000

08002a1c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b084      	sub	sp, #16
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a0a      	ldr	r2, [pc, #40]	@ (8002a54 <HAL_TIM_Base_MspInit+0x38>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d10d      	bne.n	8002a4a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002a2e:	4b0a      	ldr	r3, [pc, #40]	@ (8002a58 <HAL_TIM_Base_MspInit+0x3c>)
 8002a30:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002a32:	4b09      	ldr	r3, [pc, #36]	@ (8002a58 <HAL_TIM_Base_MspInit+0x3c>)
 8002a34:	2180      	movs	r1, #128	@ 0x80
 8002a36:	02c9      	lsls	r1, r1, #11
 8002a38:	430a      	orrs	r2, r1
 8002a3a:	641a      	str	r2, [r3, #64]	@ 0x40
 8002a3c:	4b06      	ldr	r3, [pc, #24]	@ (8002a58 <HAL_TIM_Base_MspInit+0x3c>)
 8002a3e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002a40:	2380      	movs	r3, #128	@ 0x80
 8002a42:	02db      	lsls	r3, r3, #11
 8002a44:	4013      	ands	r3, r2
 8002a46:	60fb      	str	r3, [r7, #12]
 8002a48:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM17_MspInit 1 */

  }

}
 8002a4a:	46c0      	nop			@ (mov r8, r8)
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	b004      	add	sp, #16
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	46c0      	nop			@ (mov r8, r8)
 8002a54:	40014800 	.word	0x40014800
 8002a58:	40021000 	.word	0x40021000

08002a5c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002a5c:	b590      	push	{r4, r7, lr}
 8002a5e:	b089      	sub	sp, #36	@ 0x24
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a64:	240c      	movs	r4, #12
 8002a66:	193b      	adds	r3, r7, r4
 8002a68:	0018      	movs	r0, r3
 8002a6a:	2314      	movs	r3, #20
 8002a6c:	001a      	movs	r2, r3
 8002a6e:	2100      	movs	r1, #0
 8002a70:	f004 fd86 	bl	8007580 <memset>
  if(htim->Instance==TIM17)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a14      	ldr	r2, [pc, #80]	@ (8002acc <HAL_TIM_MspPostInit+0x70>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d122      	bne.n	8002ac4 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM17_MspPostInit 0 */

  /* USER CODE END TIM17_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a7e:	4b14      	ldr	r3, [pc, #80]	@ (8002ad0 <HAL_TIM_MspPostInit+0x74>)
 8002a80:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a82:	4b13      	ldr	r3, [pc, #76]	@ (8002ad0 <HAL_TIM_MspPostInit+0x74>)
 8002a84:	2101      	movs	r1, #1
 8002a86:	430a      	orrs	r2, r1
 8002a88:	635a      	str	r2, [r3, #52]	@ 0x34
 8002a8a:	4b11      	ldr	r3, [pc, #68]	@ (8002ad0 <HAL_TIM_MspPostInit+0x74>)
 8002a8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a8e:	2201      	movs	r2, #1
 8002a90:	4013      	ands	r3, r2
 8002a92:	60bb      	str	r3, [r7, #8]
 8002a94:	68bb      	ldr	r3, [r7, #8]
    /**TIM17 GPIO Configuration
    PA7     ------> TIM17_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002a96:	0021      	movs	r1, r4
 8002a98:	187b      	adds	r3, r7, r1
 8002a9a:	2280      	movs	r2, #128	@ 0x80
 8002a9c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a9e:	187b      	adds	r3, r7, r1
 8002aa0:	2202      	movs	r2, #2
 8002aa2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa4:	187b      	adds	r3, r7, r1
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aaa:	187b      	adds	r3, r7, r1
 8002aac:	2200      	movs	r2, #0
 8002aae:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM17;
 8002ab0:	187b      	adds	r3, r7, r1
 8002ab2:	2205      	movs	r2, #5
 8002ab4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ab6:	187a      	adds	r2, r7, r1
 8002ab8:	23a0      	movs	r3, #160	@ 0xa0
 8002aba:	05db      	lsls	r3, r3, #23
 8002abc:	0011      	movs	r1, r2
 8002abe:	0018      	movs	r0, r3
 8002ac0:	f000 fb0a 	bl	80030d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8002ac4:	46c0      	nop			@ (mov r8, r8)
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	b009      	add	sp, #36	@ 0x24
 8002aca:	bd90      	pop	{r4, r7, pc}
 8002acc:	40014800 	.word	0x40014800
 8002ad0:	40021000 	.word	0x40021000

08002ad4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ad4:	b590      	push	{r4, r7, lr}
 8002ad6:	b09f      	sub	sp, #124	@ 0x7c
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002adc:	2364      	movs	r3, #100	@ 0x64
 8002ade:	18fb      	adds	r3, r7, r3
 8002ae0:	0018      	movs	r0, r3
 8002ae2:	2314      	movs	r3, #20
 8002ae4:	001a      	movs	r2, r3
 8002ae6:	2100      	movs	r1, #0
 8002ae8:	f004 fd4a 	bl	8007580 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002aec:	2418      	movs	r4, #24
 8002aee:	193b      	adds	r3, r7, r4
 8002af0:	0018      	movs	r0, r3
 8002af2:	234c      	movs	r3, #76	@ 0x4c
 8002af4:	001a      	movs	r2, r3
 8002af6:	2100      	movs	r1, #0
 8002af8:	f004 fd42 	bl	8007580 <memset>
  if(huart->Instance==USART1)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a45      	ldr	r2, [pc, #276]	@ (8002c18 <HAL_UART_MspInit+0x144>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d13e      	bne.n	8002b84 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002b06:	193b      	adds	r3, r7, r4
 8002b08:	2201      	movs	r2, #1
 8002b0a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002b0c:	193b      	adds	r3, r7, r4
 8002b0e:	2200      	movs	r2, #0
 8002b10:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b12:	193b      	adds	r3, r7, r4
 8002b14:	0018      	movs	r0, r3
 8002b16:	f002 f803 	bl	8004b20 <HAL_RCCEx_PeriphCLKConfig>
 8002b1a:	1e03      	subs	r3, r0, #0
 8002b1c:	d001      	beq.n	8002b22 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002b1e:	f7ff fa79 	bl	8002014 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b22:	4b3e      	ldr	r3, [pc, #248]	@ (8002c1c <HAL_UART_MspInit+0x148>)
 8002b24:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002b26:	4b3d      	ldr	r3, [pc, #244]	@ (8002c1c <HAL_UART_MspInit+0x148>)
 8002b28:	2180      	movs	r1, #128	@ 0x80
 8002b2a:	01c9      	lsls	r1, r1, #7
 8002b2c:	430a      	orrs	r2, r1
 8002b2e:	641a      	str	r2, [r3, #64]	@ 0x40
 8002b30:	4b3a      	ldr	r3, [pc, #232]	@ (8002c1c <HAL_UART_MspInit+0x148>)
 8002b32:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002b34:	2380      	movs	r3, #128	@ 0x80
 8002b36:	01db      	lsls	r3, r3, #7
 8002b38:	4013      	ands	r3, r2
 8002b3a:	617b      	str	r3, [r7, #20]
 8002b3c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b3e:	4b37      	ldr	r3, [pc, #220]	@ (8002c1c <HAL_UART_MspInit+0x148>)
 8002b40:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002b42:	4b36      	ldr	r3, [pc, #216]	@ (8002c1c <HAL_UART_MspInit+0x148>)
 8002b44:	2104      	movs	r1, #4
 8002b46:	430a      	orrs	r2, r1
 8002b48:	635a      	str	r2, [r3, #52]	@ 0x34
 8002b4a:	4b34      	ldr	r3, [pc, #208]	@ (8002c1c <HAL_UART_MspInit+0x148>)
 8002b4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b4e:	2204      	movs	r2, #4
 8002b50:	4013      	ands	r3, r2
 8002b52:	613b      	str	r3, [r7, #16]
 8002b54:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002b56:	2164      	movs	r1, #100	@ 0x64
 8002b58:	187b      	adds	r3, r7, r1
 8002b5a:	2230      	movs	r2, #48	@ 0x30
 8002b5c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b5e:	187b      	adds	r3, r7, r1
 8002b60:	2202      	movs	r2, #2
 8002b62:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b64:	187b      	adds	r3, r7, r1
 8002b66:	2200      	movs	r2, #0
 8002b68:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b6a:	187b      	adds	r3, r7, r1
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8002b70:	187b      	adds	r3, r7, r1
 8002b72:	2201      	movs	r2, #1
 8002b74:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b76:	187b      	adds	r3, r7, r1
 8002b78:	4a29      	ldr	r2, [pc, #164]	@ (8002c20 <HAL_UART_MspInit+0x14c>)
 8002b7a:	0019      	movs	r1, r3
 8002b7c:	0010      	movs	r0, r2
 8002b7e:	f000 faab 	bl	80030d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002b82:	e045      	b.n	8002c10 <HAL_UART_MspInit+0x13c>
  else if(huart->Instance==USART2)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a26      	ldr	r2, [pc, #152]	@ (8002c24 <HAL_UART_MspInit+0x150>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d140      	bne.n	8002c10 <HAL_UART_MspInit+0x13c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002b8e:	2118      	movs	r1, #24
 8002b90:	187b      	adds	r3, r7, r1
 8002b92:	2202      	movs	r2, #2
 8002b94:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002b96:	187b      	adds	r3, r7, r1
 8002b98:	2200      	movs	r2, #0
 8002b9a:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b9c:	187b      	adds	r3, r7, r1
 8002b9e:	0018      	movs	r0, r3
 8002ba0:	f001 ffbe 	bl	8004b20 <HAL_RCCEx_PeriphCLKConfig>
 8002ba4:	1e03      	subs	r3, r0, #0
 8002ba6:	d001      	beq.n	8002bac <HAL_UART_MspInit+0xd8>
      Error_Handler();
 8002ba8:	f7ff fa34 	bl	8002014 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002bac:	4b1b      	ldr	r3, [pc, #108]	@ (8002c1c <HAL_UART_MspInit+0x148>)
 8002bae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002bb0:	4b1a      	ldr	r3, [pc, #104]	@ (8002c1c <HAL_UART_MspInit+0x148>)
 8002bb2:	2180      	movs	r1, #128	@ 0x80
 8002bb4:	0289      	lsls	r1, r1, #10
 8002bb6:	430a      	orrs	r2, r1
 8002bb8:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002bba:	4b18      	ldr	r3, [pc, #96]	@ (8002c1c <HAL_UART_MspInit+0x148>)
 8002bbc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002bbe:	2380      	movs	r3, #128	@ 0x80
 8002bc0:	029b      	lsls	r3, r3, #10
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	60fb      	str	r3, [r7, #12]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bc8:	4b14      	ldr	r3, [pc, #80]	@ (8002c1c <HAL_UART_MspInit+0x148>)
 8002bca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002bcc:	4b13      	ldr	r3, [pc, #76]	@ (8002c1c <HAL_UART_MspInit+0x148>)
 8002bce:	2101      	movs	r1, #1
 8002bd0:	430a      	orrs	r2, r1
 8002bd2:	635a      	str	r2, [r3, #52]	@ 0x34
 8002bd4:	4b11      	ldr	r3, [pc, #68]	@ (8002c1c <HAL_UART_MspInit+0x148>)
 8002bd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bd8:	2201      	movs	r2, #1
 8002bda:	4013      	ands	r3, r2
 8002bdc:	60bb      	str	r3, [r7, #8]
 8002bde:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002be0:	2164      	movs	r1, #100	@ 0x64
 8002be2:	187b      	adds	r3, r7, r1
 8002be4:	22c0      	movs	r2, #192	@ 0xc0
 8002be6:	0212      	lsls	r2, r2, #8
 8002be8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bea:	187b      	adds	r3, r7, r1
 8002bec:	2202      	movs	r2, #2
 8002bee:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf0:	187b      	adds	r3, r7, r1
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bf6:	187b      	adds	r3, r7, r1
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8002bfc:	187b      	adds	r3, r7, r1
 8002bfe:	2201      	movs	r2, #1
 8002c00:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c02:	187a      	adds	r2, r7, r1
 8002c04:	23a0      	movs	r3, #160	@ 0xa0
 8002c06:	05db      	lsls	r3, r3, #23
 8002c08:	0011      	movs	r1, r2
 8002c0a:	0018      	movs	r0, r3
 8002c0c:	f000 fa64 	bl	80030d8 <HAL_GPIO_Init>
}
 8002c10:	46c0      	nop			@ (mov r8, r8)
 8002c12:	46bd      	mov	sp, r7
 8002c14:	b01f      	add	sp, #124	@ 0x7c
 8002c16:	bd90      	pop	{r4, r7, pc}
 8002c18:	40013800 	.word	0x40013800
 8002c1c:	40021000 	.word	0x40021000
 8002c20:	50000800 	.word	0x50000800
 8002c24:	40004400 	.word	0x40004400

08002c28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002c2c:	46c0      	nop			@ (mov r8, r8)
 8002c2e:	e7fd      	b.n	8002c2c <NMI_Handler+0x4>

08002c30 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c34:	46c0      	nop			@ (mov r8, r8)
 8002c36:	e7fd      	b.n	8002c34 <HardFault_Handler+0x4>

08002c38 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002c3c:	46c0      	nop			@ (mov r8, r8)
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}

08002c42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c42:	b580      	push	{r7, lr}
 8002c44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c46:	46c0      	nop			@ (mov r8, r8)
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c50:	f000 f938 	bl	8002ec4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c54:	46c0      	nop			@ (mov r8, r8)
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}

08002c5a <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c5a:	b580      	push	{r7, lr}
 8002c5c:	b086      	sub	sp, #24
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	60f8      	str	r0, [r7, #12]
 8002c62:	60b9      	str	r1, [r7, #8]
 8002c64:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c66:	2300      	movs	r3, #0
 8002c68:	617b      	str	r3, [r7, #20]
 8002c6a:	e00a      	b.n	8002c82 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002c6c:	e000      	b.n	8002c70 <_read+0x16>
 8002c6e:	bf00      	nop
 8002c70:	0001      	movs	r1, r0
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	1c5a      	adds	r2, r3, #1
 8002c76:	60ba      	str	r2, [r7, #8]
 8002c78:	b2ca      	uxtb	r2, r1
 8002c7a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	3301      	adds	r3, #1
 8002c80:	617b      	str	r3, [r7, #20]
 8002c82:	697a      	ldr	r2, [r7, #20]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	429a      	cmp	r2, r3
 8002c88:	dbf0      	blt.n	8002c6c <_read+0x12>
  }

  return len;
 8002c8a:	687b      	ldr	r3, [r7, #4]
}
 8002c8c:	0018      	movs	r0, r3
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	b006      	add	sp, #24
 8002c92:	bd80      	pop	{r7, pc}

08002c94 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b086      	sub	sp, #24
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	60f8      	str	r0, [r7, #12]
 8002c9c:	60b9      	str	r1, [r7, #8]
 8002c9e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	617b      	str	r3, [r7, #20]
 8002ca4:	e009      	b.n	8002cba <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	1c5a      	adds	r2, r3, #1
 8002caa:	60ba      	str	r2, [r7, #8]
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	0018      	movs	r0, r3
 8002cb0:	e000      	b.n	8002cb4 <_write+0x20>
 8002cb2:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	3301      	adds	r3, #1
 8002cb8:	617b      	str	r3, [r7, #20]
 8002cba:	697a      	ldr	r2, [r7, #20]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	dbf1      	blt.n	8002ca6 <_write+0x12>
  }
  return len;
 8002cc2:	687b      	ldr	r3, [r7, #4]
}
 8002cc4:	0018      	movs	r0, r3
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	b006      	add	sp, #24
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <_close>:

int _close(int file)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b082      	sub	sp, #8
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	425b      	negs	r3, r3
}
 8002cd8:	0018      	movs	r0, r3
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	b002      	add	sp, #8
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	2280      	movs	r2, #128	@ 0x80
 8002cee:	0192      	lsls	r2, r2, #6
 8002cf0:	605a      	str	r2, [r3, #4]
  return 0;
 8002cf2:	2300      	movs	r3, #0
}
 8002cf4:	0018      	movs	r0, r3
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	b002      	add	sp, #8
 8002cfa:	bd80      	pop	{r7, pc}

08002cfc <_isatty>:

int _isatty(int file)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002d04:	2301      	movs	r3, #1
}
 8002d06:	0018      	movs	r0, r3
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	b002      	add	sp, #8
 8002d0c:	bd80      	pop	{r7, pc}

08002d0e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d0e:	b580      	push	{r7, lr}
 8002d10:	b084      	sub	sp, #16
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	60f8      	str	r0, [r7, #12]
 8002d16:	60b9      	str	r1, [r7, #8]
 8002d18:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002d1a:	2300      	movs	r3, #0
}
 8002d1c:	0018      	movs	r0, r3
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	b004      	add	sp, #16
 8002d22:	bd80      	pop	{r7, pc}

08002d24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b086      	sub	sp, #24
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d2c:	4a14      	ldr	r2, [pc, #80]	@ (8002d80 <_sbrk+0x5c>)
 8002d2e:	4b15      	ldr	r3, [pc, #84]	@ (8002d84 <_sbrk+0x60>)
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d38:	4b13      	ldr	r3, [pc, #76]	@ (8002d88 <_sbrk+0x64>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d102      	bne.n	8002d46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d40:	4b11      	ldr	r3, [pc, #68]	@ (8002d88 <_sbrk+0x64>)
 8002d42:	4a12      	ldr	r2, [pc, #72]	@ (8002d8c <_sbrk+0x68>)
 8002d44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d46:	4b10      	ldr	r3, [pc, #64]	@ (8002d88 <_sbrk+0x64>)
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	18d3      	adds	r3, r2, r3
 8002d4e:	693a      	ldr	r2, [r7, #16]
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d207      	bcs.n	8002d64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d54:	f004 fc6a 	bl	800762c <__errno>
 8002d58:	0003      	movs	r3, r0
 8002d5a:	220c      	movs	r2, #12
 8002d5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	425b      	negs	r3, r3
 8002d62:	e009      	b.n	8002d78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d64:	4b08      	ldr	r3, [pc, #32]	@ (8002d88 <_sbrk+0x64>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d6a:	4b07      	ldr	r3, [pc, #28]	@ (8002d88 <_sbrk+0x64>)
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	18d2      	adds	r2, r2, r3
 8002d72:	4b05      	ldr	r3, [pc, #20]	@ (8002d88 <_sbrk+0x64>)
 8002d74:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002d76:	68fb      	ldr	r3, [r7, #12]
}
 8002d78:	0018      	movs	r0, r3
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	b006      	add	sp, #24
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	20024000 	.word	0x20024000
 8002d84:	00000400 	.word	0x00000400
 8002d88:	20000364 	.word	0x20000364
 8002d8c:	200004b8 	.word	0x200004b8

08002d90 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d94:	46c0      	nop			@ (mov r8, r8)
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
	...

08002d9c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002d9c:	480d      	ldr	r0, [pc, #52]	@ (8002dd4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002d9e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002da0:	f7ff fff6 	bl	8002d90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002da4:	480c      	ldr	r0, [pc, #48]	@ (8002dd8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002da6:	490d      	ldr	r1, [pc, #52]	@ (8002ddc <LoopForever+0xa>)
  ldr r2, =_sidata
 8002da8:	4a0d      	ldr	r2, [pc, #52]	@ (8002de0 <LoopForever+0xe>)
  movs r3, #0
 8002daa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002dac:	e002      	b.n	8002db4 <LoopCopyDataInit>

08002dae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002dae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002db0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002db2:	3304      	adds	r3, #4

08002db4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002db4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002db6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002db8:	d3f9      	bcc.n	8002dae <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002dba:	4a0a      	ldr	r2, [pc, #40]	@ (8002de4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002dbc:	4c0a      	ldr	r4, [pc, #40]	@ (8002de8 <LoopForever+0x16>)
  movs r3, #0
 8002dbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002dc0:	e001      	b.n	8002dc6 <LoopFillZerobss>

08002dc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002dc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002dc4:	3204      	adds	r2, #4

08002dc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002dc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002dc8:	d3fb      	bcc.n	8002dc2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002dca:	f004 fc35 	bl	8007638 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8002dce:	f7fe fd89 	bl	80018e4 <main>

08002dd2 <LoopForever>:

LoopForever:
  b LoopForever
 8002dd2:	e7fe      	b.n	8002dd2 <LoopForever>
  ldr   r0, =_estack
 8002dd4:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8002dd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ddc:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8002de0:	08008ef4 	.word	0x08008ef4
  ldr r2, =_sbss
 8002de4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8002de8:	200004b8 	.word	0x200004b8

08002dec <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002dec:	e7fe      	b.n	8002dec <ADC1_COMP_IRQHandler>
	...

08002df0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b082      	sub	sp, #8
 8002df4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002df6:	1dfb      	adds	r3, r7, #7
 8002df8:	2200      	movs	r2, #0
 8002dfa:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002dfc:	4b0b      	ldr	r3, [pc, #44]	@ (8002e2c <HAL_Init+0x3c>)
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	4b0a      	ldr	r3, [pc, #40]	@ (8002e2c <HAL_Init+0x3c>)
 8002e02:	2180      	movs	r1, #128	@ 0x80
 8002e04:	0049      	lsls	r1, r1, #1
 8002e06:	430a      	orrs	r2, r1
 8002e08:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002e0a:	2003      	movs	r0, #3
 8002e0c:	f000 f810 	bl	8002e30 <HAL_InitTick>
 8002e10:	1e03      	subs	r3, r0, #0
 8002e12:	d003      	beq.n	8002e1c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002e14:	1dfb      	adds	r3, r7, #7
 8002e16:	2201      	movs	r2, #1
 8002e18:	701a      	strb	r2, [r3, #0]
 8002e1a:	e001      	b.n	8002e20 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002e1c:	f7ff fd2a 	bl	8002874 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002e20:	1dfb      	adds	r3, r7, #7
 8002e22:	781b      	ldrb	r3, [r3, #0]
}
 8002e24:	0018      	movs	r0, r3
 8002e26:	46bd      	mov	sp, r7
 8002e28:	b002      	add	sp, #8
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	40022000 	.word	0x40022000

08002e30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e30:	b590      	push	{r4, r7, lr}
 8002e32:	b085      	sub	sp, #20
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002e38:	230f      	movs	r3, #15
 8002e3a:	18fb      	adds	r3, r7, r3
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002e40:	4b1d      	ldr	r3, [pc, #116]	@ (8002eb8 <HAL_InitTick+0x88>)
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d02b      	beq.n	8002ea0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002e48:	4b1c      	ldr	r3, [pc, #112]	@ (8002ebc <HAL_InitTick+0x8c>)
 8002e4a:	681c      	ldr	r4, [r3, #0]
 8002e4c:	4b1a      	ldr	r3, [pc, #104]	@ (8002eb8 <HAL_InitTick+0x88>)
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	0019      	movs	r1, r3
 8002e52:	23fa      	movs	r3, #250	@ 0xfa
 8002e54:	0098      	lsls	r0, r3, #2
 8002e56:	f7fd f969 	bl	800012c <__udivsi3>
 8002e5a:	0003      	movs	r3, r0
 8002e5c:	0019      	movs	r1, r3
 8002e5e:	0020      	movs	r0, r4
 8002e60:	f7fd f964 	bl	800012c <__udivsi3>
 8002e64:	0003      	movs	r3, r0
 8002e66:	0018      	movs	r0, r3
 8002e68:	f000 f929 	bl	80030be <HAL_SYSTICK_Config>
 8002e6c:	1e03      	subs	r3, r0, #0
 8002e6e:	d112      	bne.n	8002e96 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2b03      	cmp	r3, #3
 8002e74:	d80a      	bhi.n	8002e8c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e76:	6879      	ldr	r1, [r7, #4]
 8002e78:	2301      	movs	r3, #1
 8002e7a:	425b      	negs	r3, r3
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	0018      	movs	r0, r3
 8002e80:	f000 f908 	bl	8003094 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002e84:	4b0e      	ldr	r3, [pc, #56]	@ (8002ec0 <HAL_InitTick+0x90>)
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	601a      	str	r2, [r3, #0]
 8002e8a:	e00d      	b.n	8002ea8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002e8c:	230f      	movs	r3, #15
 8002e8e:	18fb      	adds	r3, r7, r3
 8002e90:	2201      	movs	r2, #1
 8002e92:	701a      	strb	r2, [r3, #0]
 8002e94:	e008      	b.n	8002ea8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002e96:	230f      	movs	r3, #15
 8002e98:	18fb      	adds	r3, r7, r3
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	701a      	strb	r2, [r3, #0]
 8002e9e:	e003      	b.n	8002ea8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002ea0:	230f      	movs	r3, #15
 8002ea2:	18fb      	adds	r3, r7, r3
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002ea8:	230f      	movs	r3, #15
 8002eaa:	18fb      	adds	r3, r7, r3
 8002eac:	781b      	ldrb	r3, [r3, #0]
}
 8002eae:	0018      	movs	r0, r3
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	b005      	add	sp, #20
 8002eb4:	bd90      	pop	{r4, r7, pc}
 8002eb6:	46c0      	nop			@ (mov r8, r8)
 8002eb8:	20000008 	.word	0x20000008
 8002ebc:	20000000 	.word	0x20000000
 8002ec0:	20000004 	.word	0x20000004

08002ec4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002ec8:	4b05      	ldr	r3, [pc, #20]	@ (8002ee0 <HAL_IncTick+0x1c>)
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	001a      	movs	r2, r3
 8002ece:	4b05      	ldr	r3, [pc, #20]	@ (8002ee4 <HAL_IncTick+0x20>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	18d2      	adds	r2, r2, r3
 8002ed4:	4b03      	ldr	r3, [pc, #12]	@ (8002ee4 <HAL_IncTick+0x20>)
 8002ed6:	601a      	str	r2, [r3, #0]
}
 8002ed8:	46c0      	nop			@ (mov r8, r8)
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	46c0      	nop			@ (mov r8, r8)
 8002ee0:	20000008 	.word	0x20000008
 8002ee4:	20000368 	.word	0x20000368

08002ee8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	af00      	add	r7, sp, #0
  return uwTick;
 8002eec:	4b02      	ldr	r3, [pc, #8]	@ (8002ef8 <HAL_GetTick+0x10>)
 8002eee:	681b      	ldr	r3, [r3, #0]
}
 8002ef0:	0018      	movs	r0, r3
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	46c0      	nop			@ (mov r8, r8)
 8002ef8:	20000368 	.word	0x20000368

08002efc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b084      	sub	sp, #16
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f04:	f7ff fff0 	bl	8002ee8 <HAL_GetTick>
 8002f08:	0003      	movs	r3, r0
 8002f0a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	3301      	adds	r3, #1
 8002f14:	d005      	beq.n	8002f22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f16:	4b0a      	ldr	r3, [pc, #40]	@ (8002f40 <HAL_Delay+0x44>)
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	001a      	movs	r2, r3
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	189b      	adds	r3, r3, r2
 8002f20:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002f22:	46c0      	nop			@ (mov r8, r8)
 8002f24:	f7ff ffe0 	bl	8002ee8 <HAL_GetTick>
 8002f28:	0002      	movs	r2, r0
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	68fa      	ldr	r2, [r7, #12]
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d8f7      	bhi.n	8002f24 <HAL_Delay+0x28>
  {
  }
}
 8002f34:	46c0      	nop			@ (mov r8, r8)
 8002f36:	46c0      	nop			@ (mov r8, r8)
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	b004      	add	sp, #16
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	46c0      	nop			@ (mov r8, r8)
 8002f40:	20000008 	.word	0x20000008

08002f44 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8002f4c:	4b06      	ldr	r3, [pc, #24]	@ (8002f68 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a06      	ldr	r2, [pc, #24]	@ (8002f6c <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8002f52:	4013      	ands	r3, r2
 8002f54:	0019      	movs	r1, r3
 8002f56:	4b04      	ldr	r3, [pc, #16]	@ (8002f68 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	430a      	orrs	r2, r1
 8002f5c:	601a      	str	r2, [r3, #0]
}
 8002f5e:	46c0      	nop			@ (mov r8, r8)
 8002f60:	46bd      	mov	sp, r7
 8002f62:	b002      	add	sp, #8
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	46c0      	nop			@ (mov r8, r8)
 8002f68:	40010000 	.word	0x40010000
 8002f6c:	fffff9ff 	.word	0xfffff9ff

08002f70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f70:	b590      	push	{r4, r7, lr}
 8002f72:	b083      	sub	sp, #12
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	0002      	movs	r2, r0
 8002f78:	6039      	str	r1, [r7, #0]
 8002f7a:	1dfb      	adds	r3, r7, #7
 8002f7c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002f7e:	1dfb      	adds	r3, r7, #7
 8002f80:	781b      	ldrb	r3, [r3, #0]
 8002f82:	2b7f      	cmp	r3, #127	@ 0x7f
 8002f84:	d828      	bhi.n	8002fd8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002f86:	4a2f      	ldr	r2, [pc, #188]	@ (8003044 <__NVIC_SetPriority+0xd4>)
 8002f88:	1dfb      	adds	r3, r7, #7
 8002f8a:	781b      	ldrb	r3, [r3, #0]
 8002f8c:	b25b      	sxtb	r3, r3
 8002f8e:	089b      	lsrs	r3, r3, #2
 8002f90:	33c0      	adds	r3, #192	@ 0xc0
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	589b      	ldr	r3, [r3, r2]
 8002f96:	1dfa      	adds	r2, r7, #7
 8002f98:	7812      	ldrb	r2, [r2, #0]
 8002f9a:	0011      	movs	r1, r2
 8002f9c:	2203      	movs	r2, #3
 8002f9e:	400a      	ands	r2, r1
 8002fa0:	00d2      	lsls	r2, r2, #3
 8002fa2:	21ff      	movs	r1, #255	@ 0xff
 8002fa4:	4091      	lsls	r1, r2
 8002fa6:	000a      	movs	r2, r1
 8002fa8:	43d2      	mvns	r2, r2
 8002faa:	401a      	ands	r2, r3
 8002fac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	019b      	lsls	r3, r3, #6
 8002fb2:	22ff      	movs	r2, #255	@ 0xff
 8002fb4:	401a      	ands	r2, r3
 8002fb6:	1dfb      	adds	r3, r7, #7
 8002fb8:	781b      	ldrb	r3, [r3, #0]
 8002fba:	0018      	movs	r0, r3
 8002fbc:	2303      	movs	r3, #3
 8002fbe:	4003      	ands	r3, r0
 8002fc0:	00db      	lsls	r3, r3, #3
 8002fc2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002fc4:	481f      	ldr	r0, [pc, #124]	@ (8003044 <__NVIC_SetPriority+0xd4>)
 8002fc6:	1dfb      	adds	r3, r7, #7
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	b25b      	sxtb	r3, r3
 8002fcc:	089b      	lsrs	r3, r3, #2
 8002fce:	430a      	orrs	r2, r1
 8002fd0:	33c0      	adds	r3, #192	@ 0xc0
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002fd6:	e031      	b.n	800303c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002fd8:	4a1b      	ldr	r2, [pc, #108]	@ (8003048 <__NVIC_SetPriority+0xd8>)
 8002fda:	1dfb      	adds	r3, r7, #7
 8002fdc:	781b      	ldrb	r3, [r3, #0]
 8002fde:	0019      	movs	r1, r3
 8002fe0:	230f      	movs	r3, #15
 8002fe2:	400b      	ands	r3, r1
 8002fe4:	3b08      	subs	r3, #8
 8002fe6:	089b      	lsrs	r3, r3, #2
 8002fe8:	3306      	adds	r3, #6
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	18d3      	adds	r3, r2, r3
 8002fee:	3304      	adds	r3, #4
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	1dfa      	adds	r2, r7, #7
 8002ff4:	7812      	ldrb	r2, [r2, #0]
 8002ff6:	0011      	movs	r1, r2
 8002ff8:	2203      	movs	r2, #3
 8002ffa:	400a      	ands	r2, r1
 8002ffc:	00d2      	lsls	r2, r2, #3
 8002ffe:	21ff      	movs	r1, #255	@ 0xff
 8003000:	4091      	lsls	r1, r2
 8003002:	000a      	movs	r2, r1
 8003004:	43d2      	mvns	r2, r2
 8003006:	401a      	ands	r2, r3
 8003008:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	019b      	lsls	r3, r3, #6
 800300e:	22ff      	movs	r2, #255	@ 0xff
 8003010:	401a      	ands	r2, r3
 8003012:	1dfb      	adds	r3, r7, #7
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	0018      	movs	r0, r3
 8003018:	2303      	movs	r3, #3
 800301a:	4003      	ands	r3, r0
 800301c:	00db      	lsls	r3, r3, #3
 800301e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003020:	4809      	ldr	r0, [pc, #36]	@ (8003048 <__NVIC_SetPriority+0xd8>)
 8003022:	1dfb      	adds	r3, r7, #7
 8003024:	781b      	ldrb	r3, [r3, #0]
 8003026:	001c      	movs	r4, r3
 8003028:	230f      	movs	r3, #15
 800302a:	4023      	ands	r3, r4
 800302c:	3b08      	subs	r3, #8
 800302e:	089b      	lsrs	r3, r3, #2
 8003030:	430a      	orrs	r2, r1
 8003032:	3306      	adds	r3, #6
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	18c3      	adds	r3, r0, r3
 8003038:	3304      	adds	r3, #4
 800303a:	601a      	str	r2, [r3, #0]
}
 800303c:	46c0      	nop			@ (mov r8, r8)
 800303e:	46bd      	mov	sp, r7
 8003040:	b003      	add	sp, #12
 8003042:	bd90      	pop	{r4, r7, pc}
 8003044:	e000e100 	.word	0xe000e100
 8003048:	e000ed00 	.word	0xe000ed00

0800304c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b082      	sub	sp, #8
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	1e5a      	subs	r2, r3, #1
 8003058:	2380      	movs	r3, #128	@ 0x80
 800305a:	045b      	lsls	r3, r3, #17
 800305c:	429a      	cmp	r2, r3
 800305e:	d301      	bcc.n	8003064 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003060:	2301      	movs	r3, #1
 8003062:	e010      	b.n	8003086 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003064:	4b0a      	ldr	r3, [pc, #40]	@ (8003090 <SysTick_Config+0x44>)
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	3a01      	subs	r2, #1
 800306a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800306c:	2301      	movs	r3, #1
 800306e:	425b      	negs	r3, r3
 8003070:	2103      	movs	r1, #3
 8003072:	0018      	movs	r0, r3
 8003074:	f7ff ff7c 	bl	8002f70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003078:	4b05      	ldr	r3, [pc, #20]	@ (8003090 <SysTick_Config+0x44>)
 800307a:	2200      	movs	r2, #0
 800307c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800307e:	4b04      	ldr	r3, [pc, #16]	@ (8003090 <SysTick_Config+0x44>)
 8003080:	2207      	movs	r2, #7
 8003082:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003084:	2300      	movs	r3, #0
}
 8003086:	0018      	movs	r0, r3
 8003088:	46bd      	mov	sp, r7
 800308a:	b002      	add	sp, #8
 800308c:	bd80      	pop	{r7, pc}
 800308e:	46c0      	nop			@ (mov r8, r8)
 8003090:	e000e010 	.word	0xe000e010

08003094 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b084      	sub	sp, #16
 8003098:	af00      	add	r7, sp, #0
 800309a:	60b9      	str	r1, [r7, #8]
 800309c:	607a      	str	r2, [r7, #4]
 800309e:	210f      	movs	r1, #15
 80030a0:	187b      	adds	r3, r7, r1
 80030a2:	1c02      	adds	r2, r0, #0
 80030a4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80030a6:	68ba      	ldr	r2, [r7, #8]
 80030a8:	187b      	adds	r3, r7, r1
 80030aa:	781b      	ldrb	r3, [r3, #0]
 80030ac:	b25b      	sxtb	r3, r3
 80030ae:	0011      	movs	r1, r2
 80030b0:	0018      	movs	r0, r3
 80030b2:	f7ff ff5d 	bl	8002f70 <__NVIC_SetPriority>
}
 80030b6:	46c0      	nop			@ (mov r8, r8)
 80030b8:	46bd      	mov	sp, r7
 80030ba:	b004      	add	sp, #16
 80030bc:	bd80      	pop	{r7, pc}

080030be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030be:	b580      	push	{r7, lr}
 80030c0:	b082      	sub	sp, #8
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	0018      	movs	r0, r3
 80030ca:	f7ff ffbf 	bl	800304c <SysTick_Config>
 80030ce:	0003      	movs	r3, r0
}
 80030d0:	0018      	movs	r0, r3
 80030d2:	46bd      	mov	sp, r7
 80030d4:	b002      	add	sp, #8
 80030d6:	bd80      	pop	{r7, pc}

080030d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b086      	sub	sp, #24
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80030e2:	2300      	movs	r3, #0
 80030e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030e6:	e14d      	b.n	8003384 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2101      	movs	r1, #1
 80030ee:	697a      	ldr	r2, [r7, #20]
 80030f0:	4091      	lsls	r1, r2
 80030f2:	000a      	movs	r2, r1
 80030f4:	4013      	ands	r3, r2
 80030f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d100      	bne.n	8003100 <HAL_GPIO_Init+0x28>
 80030fe:	e13e      	b.n	800337e <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	2203      	movs	r2, #3
 8003106:	4013      	ands	r3, r2
 8003108:	2b01      	cmp	r3, #1
 800310a:	d005      	beq.n	8003118 <HAL_GPIO_Init+0x40>
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	2203      	movs	r2, #3
 8003112:	4013      	ands	r3, r2
 8003114:	2b02      	cmp	r3, #2
 8003116:	d130      	bne.n	800317a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	005b      	lsls	r3, r3, #1
 8003122:	2203      	movs	r2, #3
 8003124:	409a      	lsls	r2, r3
 8003126:	0013      	movs	r3, r2
 8003128:	43da      	mvns	r2, r3
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	4013      	ands	r3, r2
 800312e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	68da      	ldr	r2, [r3, #12]
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	005b      	lsls	r3, r3, #1
 8003138:	409a      	lsls	r2, r3
 800313a:	0013      	movs	r3, r2
 800313c:	693a      	ldr	r2, [r7, #16]
 800313e:	4313      	orrs	r3, r2
 8003140:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	693a      	ldr	r2, [r7, #16]
 8003146:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800314e:	2201      	movs	r2, #1
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	409a      	lsls	r2, r3
 8003154:	0013      	movs	r3, r2
 8003156:	43da      	mvns	r2, r3
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	4013      	ands	r3, r2
 800315c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	091b      	lsrs	r3, r3, #4
 8003164:	2201      	movs	r2, #1
 8003166:	401a      	ands	r2, r3
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	409a      	lsls	r2, r3
 800316c:	0013      	movs	r3, r2
 800316e:	693a      	ldr	r2, [r7, #16]
 8003170:	4313      	orrs	r3, r2
 8003172:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	693a      	ldr	r2, [r7, #16]
 8003178:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	2203      	movs	r2, #3
 8003180:	4013      	ands	r3, r2
 8003182:	2b03      	cmp	r3, #3
 8003184:	d017      	beq.n	80031b6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	68db      	ldr	r3, [r3, #12]
 800318a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	005b      	lsls	r3, r3, #1
 8003190:	2203      	movs	r2, #3
 8003192:	409a      	lsls	r2, r3
 8003194:	0013      	movs	r3, r2
 8003196:	43da      	mvns	r2, r3
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	4013      	ands	r3, r2
 800319c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	689a      	ldr	r2, [r3, #8]
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	005b      	lsls	r3, r3, #1
 80031a6:	409a      	lsls	r2, r3
 80031a8:	0013      	movs	r3, r2
 80031aa:	693a      	ldr	r2, [r7, #16]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	693a      	ldr	r2, [r7, #16]
 80031b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	2203      	movs	r2, #3
 80031bc:	4013      	ands	r3, r2
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d123      	bne.n	800320a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	08da      	lsrs	r2, r3, #3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	3208      	adds	r2, #8
 80031ca:	0092      	lsls	r2, r2, #2
 80031cc:	58d3      	ldr	r3, [r2, r3]
 80031ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	2207      	movs	r2, #7
 80031d4:	4013      	ands	r3, r2
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	220f      	movs	r2, #15
 80031da:	409a      	lsls	r2, r3
 80031dc:	0013      	movs	r3, r2
 80031de:	43da      	mvns	r2, r3
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	4013      	ands	r3, r2
 80031e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	691a      	ldr	r2, [r3, #16]
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	2107      	movs	r1, #7
 80031ee:	400b      	ands	r3, r1
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	409a      	lsls	r2, r3
 80031f4:	0013      	movs	r3, r2
 80031f6:	693a      	ldr	r2, [r7, #16]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	08da      	lsrs	r2, r3, #3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	3208      	adds	r2, #8
 8003204:	0092      	lsls	r2, r2, #2
 8003206:	6939      	ldr	r1, [r7, #16]
 8003208:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	005b      	lsls	r3, r3, #1
 8003214:	2203      	movs	r2, #3
 8003216:	409a      	lsls	r2, r3
 8003218:	0013      	movs	r3, r2
 800321a:	43da      	mvns	r2, r3
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	4013      	ands	r3, r2
 8003220:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	2203      	movs	r2, #3
 8003228:	401a      	ands	r2, r3
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	005b      	lsls	r3, r3, #1
 800322e:	409a      	lsls	r2, r3
 8003230:	0013      	movs	r3, r2
 8003232:	693a      	ldr	r2, [r7, #16]
 8003234:	4313      	orrs	r3, r2
 8003236:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	693a      	ldr	r2, [r7, #16]
 800323c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	685a      	ldr	r2, [r3, #4]
 8003242:	23c0      	movs	r3, #192	@ 0xc0
 8003244:	029b      	lsls	r3, r3, #10
 8003246:	4013      	ands	r3, r2
 8003248:	d100      	bne.n	800324c <HAL_GPIO_Init+0x174>
 800324a:	e098      	b.n	800337e <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800324c:	4a53      	ldr	r2, [pc, #332]	@ (800339c <HAL_GPIO_Init+0x2c4>)
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	089b      	lsrs	r3, r3, #2
 8003252:	3318      	adds	r3, #24
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	589b      	ldr	r3, [r3, r2]
 8003258:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	2203      	movs	r2, #3
 800325e:	4013      	ands	r3, r2
 8003260:	00db      	lsls	r3, r3, #3
 8003262:	220f      	movs	r2, #15
 8003264:	409a      	lsls	r2, r3
 8003266:	0013      	movs	r3, r2
 8003268:	43da      	mvns	r2, r3
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	4013      	ands	r3, r2
 800326e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	23a0      	movs	r3, #160	@ 0xa0
 8003274:	05db      	lsls	r3, r3, #23
 8003276:	429a      	cmp	r2, r3
 8003278:	d019      	beq.n	80032ae <HAL_GPIO_Init+0x1d6>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a48      	ldr	r2, [pc, #288]	@ (80033a0 <HAL_GPIO_Init+0x2c8>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d013      	beq.n	80032aa <HAL_GPIO_Init+0x1d2>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4a47      	ldr	r2, [pc, #284]	@ (80033a4 <HAL_GPIO_Init+0x2cc>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d00d      	beq.n	80032a6 <HAL_GPIO_Init+0x1ce>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4a46      	ldr	r2, [pc, #280]	@ (80033a8 <HAL_GPIO_Init+0x2d0>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d007      	beq.n	80032a2 <HAL_GPIO_Init+0x1ca>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a45      	ldr	r2, [pc, #276]	@ (80033ac <HAL_GPIO_Init+0x2d4>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d101      	bne.n	800329e <HAL_GPIO_Init+0x1c6>
 800329a:	2304      	movs	r3, #4
 800329c:	e008      	b.n	80032b0 <HAL_GPIO_Init+0x1d8>
 800329e:	2305      	movs	r3, #5
 80032a0:	e006      	b.n	80032b0 <HAL_GPIO_Init+0x1d8>
 80032a2:	2303      	movs	r3, #3
 80032a4:	e004      	b.n	80032b0 <HAL_GPIO_Init+0x1d8>
 80032a6:	2302      	movs	r3, #2
 80032a8:	e002      	b.n	80032b0 <HAL_GPIO_Init+0x1d8>
 80032aa:	2301      	movs	r3, #1
 80032ac:	e000      	b.n	80032b0 <HAL_GPIO_Init+0x1d8>
 80032ae:	2300      	movs	r3, #0
 80032b0:	697a      	ldr	r2, [r7, #20]
 80032b2:	2103      	movs	r1, #3
 80032b4:	400a      	ands	r2, r1
 80032b6:	00d2      	lsls	r2, r2, #3
 80032b8:	4093      	lsls	r3, r2
 80032ba:	693a      	ldr	r2, [r7, #16]
 80032bc:	4313      	orrs	r3, r2
 80032be:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80032c0:	4936      	ldr	r1, [pc, #216]	@ (800339c <HAL_GPIO_Init+0x2c4>)
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	089b      	lsrs	r3, r3, #2
 80032c6:	3318      	adds	r3, #24
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	693a      	ldr	r2, [r7, #16]
 80032cc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80032ce:	4b33      	ldr	r3, [pc, #204]	@ (800339c <HAL_GPIO_Init+0x2c4>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	43da      	mvns	r2, r3
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	4013      	ands	r3, r2
 80032dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	685a      	ldr	r2, [r3, #4]
 80032e2:	2380      	movs	r3, #128	@ 0x80
 80032e4:	035b      	lsls	r3, r3, #13
 80032e6:	4013      	ands	r3, r2
 80032e8:	d003      	beq.n	80032f2 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80032ea:	693a      	ldr	r2, [r7, #16]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80032f2:	4b2a      	ldr	r3, [pc, #168]	@ (800339c <HAL_GPIO_Init+0x2c4>)
 80032f4:	693a      	ldr	r2, [r7, #16]
 80032f6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80032f8:	4b28      	ldr	r3, [pc, #160]	@ (800339c <HAL_GPIO_Init+0x2c4>)
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	43da      	mvns	r2, r3
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	4013      	ands	r3, r2
 8003306:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	685a      	ldr	r2, [r3, #4]
 800330c:	2380      	movs	r3, #128	@ 0x80
 800330e:	039b      	lsls	r3, r3, #14
 8003310:	4013      	ands	r3, r2
 8003312:	d003      	beq.n	800331c <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8003314:	693a      	ldr	r2, [r7, #16]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	4313      	orrs	r3, r2
 800331a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800331c:	4b1f      	ldr	r3, [pc, #124]	@ (800339c <HAL_GPIO_Init+0x2c4>)
 800331e:	693a      	ldr	r2, [r7, #16]
 8003320:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003322:	4a1e      	ldr	r2, [pc, #120]	@ (800339c <HAL_GPIO_Init+0x2c4>)
 8003324:	2384      	movs	r3, #132	@ 0x84
 8003326:	58d3      	ldr	r3, [r2, r3]
 8003328:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	43da      	mvns	r2, r3
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	4013      	ands	r3, r2
 8003332:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	685a      	ldr	r2, [r3, #4]
 8003338:	2380      	movs	r3, #128	@ 0x80
 800333a:	029b      	lsls	r3, r3, #10
 800333c:	4013      	ands	r3, r2
 800333e:	d003      	beq.n	8003348 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003340:	693a      	ldr	r2, [r7, #16]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	4313      	orrs	r3, r2
 8003346:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003348:	4914      	ldr	r1, [pc, #80]	@ (800339c <HAL_GPIO_Init+0x2c4>)
 800334a:	2284      	movs	r2, #132	@ 0x84
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8003350:	4a12      	ldr	r2, [pc, #72]	@ (800339c <HAL_GPIO_Init+0x2c4>)
 8003352:	2380      	movs	r3, #128	@ 0x80
 8003354:	58d3      	ldr	r3, [r2, r3]
 8003356:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	43da      	mvns	r2, r3
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	4013      	ands	r3, r2
 8003360:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	685a      	ldr	r2, [r3, #4]
 8003366:	2380      	movs	r3, #128	@ 0x80
 8003368:	025b      	lsls	r3, r3, #9
 800336a:	4013      	ands	r3, r2
 800336c:	d003      	beq.n	8003376 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800336e:	693a      	ldr	r2, [r7, #16]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	4313      	orrs	r3, r2
 8003374:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003376:	4909      	ldr	r1, [pc, #36]	@ (800339c <HAL_GPIO_Init+0x2c4>)
 8003378:	2280      	movs	r2, #128	@ 0x80
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	3301      	adds	r3, #1
 8003382:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	40da      	lsrs	r2, r3
 800338c:	1e13      	subs	r3, r2, #0
 800338e:	d000      	beq.n	8003392 <HAL_GPIO_Init+0x2ba>
 8003390:	e6aa      	b.n	80030e8 <HAL_GPIO_Init+0x10>
  }
}
 8003392:	46c0      	nop			@ (mov r8, r8)
 8003394:	46c0      	nop			@ (mov r8, r8)
 8003396:	46bd      	mov	sp, r7
 8003398:	b006      	add	sp, #24
 800339a:	bd80      	pop	{r7, pc}
 800339c:	40021800 	.word	0x40021800
 80033a0:	50000400 	.word	0x50000400
 80033a4:	50000800 	.word	0x50000800
 80033a8:	50000c00 	.word	0x50000c00
 80033ac:	50001000 	.word	0x50001000

080033b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b082      	sub	sp, #8
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	0008      	movs	r0, r1
 80033ba:	0011      	movs	r1, r2
 80033bc:	1cbb      	adds	r3, r7, #2
 80033be:	1c02      	adds	r2, r0, #0
 80033c0:	801a      	strh	r2, [r3, #0]
 80033c2:	1c7b      	adds	r3, r7, #1
 80033c4:	1c0a      	adds	r2, r1, #0
 80033c6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80033c8:	1c7b      	adds	r3, r7, #1
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d004      	beq.n	80033da <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80033d0:	1cbb      	adds	r3, r7, #2
 80033d2:	881a      	ldrh	r2, [r3, #0]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80033d8:	e003      	b.n	80033e2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80033da:	1cbb      	adds	r3, r7, #2
 80033dc:	881a      	ldrh	r2, [r3, #0]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80033e2:	46c0      	nop			@ (mov r8, r8)
 80033e4:	46bd      	mov	sp, r7
 80033e6:	b002      	add	sp, #8
 80033e8:	bd80      	pop	{r7, pc}
	...

080033ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b082      	sub	sp, #8
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d101      	bne.n	80033fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e08f      	b.n	800351e <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2241      	movs	r2, #65	@ 0x41
 8003402:	5c9b      	ldrb	r3, [r3, r2]
 8003404:	b2db      	uxtb	r3, r3
 8003406:	2b00      	cmp	r3, #0
 8003408:	d107      	bne.n	800341a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2240      	movs	r2, #64	@ 0x40
 800340e:	2100      	movs	r1, #0
 8003410:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	0018      	movs	r0, r3
 8003416:	f7ff fa55 	bl	80028c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2241      	movs	r2, #65	@ 0x41
 800341e:	2124      	movs	r1, #36	@ 0x24
 8003420:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	2101      	movs	r1, #1
 800342e:	438a      	bics	r2, r1
 8003430:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	685a      	ldr	r2, [r3, #4]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	493b      	ldr	r1, [pc, #236]	@ (8003528 <HAL_I2C_Init+0x13c>)
 800343c:	400a      	ands	r2, r1
 800343e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	689a      	ldr	r2, [r3, #8]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4938      	ldr	r1, [pc, #224]	@ (800352c <HAL_I2C_Init+0x140>)
 800344c:	400a      	ands	r2, r1
 800344e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	2b01      	cmp	r3, #1
 8003456:	d108      	bne.n	800346a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	689a      	ldr	r2, [r3, #8]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	2180      	movs	r1, #128	@ 0x80
 8003462:	0209      	lsls	r1, r1, #8
 8003464:	430a      	orrs	r2, r1
 8003466:	609a      	str	r2, [r3, #8]
 8003468:	e007      	b.n	800347a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	689a      	ldr	r2, [r3, #8]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	2184      	movs	r1, #132	@ 0x84
 8003474:	0209      	lsls	r1, r1, #8
 8003476:	430a      	orrs	r2, r1
 8003478:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	68db      	ldr	r3, [r3, #12]
 800347e:	2b02      	cmp	r3, #2
 8003480:	d109      	bne.n	8003496 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	685a      	ldr	r2, [r3, #4]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	2180      	movs	r1, #128	@ 0x80
 800348e:	0109      	lsls	r1, r1, #4
 8003490:	430a      	orrs	r2, r1
 8003492:	605a      	str	r2, [r3, #4]
 8003494:	e007      	b.n	80034a6 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	685a      	ldr	r2, [r3, #4]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4923      	ldr	r1, [pc, #140]	@ (8003530 <HAL_I2C_Init+0x144>)
 80034a2:	400a      	ands	r2, r1
 80034a4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	685a      	ldr	r2, [r3, #4]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4920      	ldr	r1, [pc, #128]	@ (8003534 <HAL_I2C_Init+0x148>)
 80034b2:	430a      	orrs	r2, r1
 80034b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	68da      	ldr	r2, [r3, #12]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	491a      	ldr	r1, [pc, #104]	@ (800352c <HAL_I2C_Init+0x140>)
 80034c2:	400a      	ands	r2, r1
 80034c4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	691a      	ldr	r2, [r3, #16]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	695b      	ldr	r3, [r3, #20]
 80034ce:	431a      	orrs	r2, r3
 80034d0:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	699b      	ldr	r3, [r3, #24]
 80034d6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	430a      	orrs	r2, r1
 80034de:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	69d9      	ldr	r1, [r3, #28]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6a1a      	ldr	r2, [r3, #32]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	430a      	orrs	r2, r1
 80034ee:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	2101      	movs	r1, #1
 80034fc:	430a      	orrs	r2, r1
 80034fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2241      	movs	r2, #65	@ 0x41
 800350a:	2120      	movs	r1, #32
 800350c:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2242      	movs	r2, #66	@ 0x42
 8003518:	2100      	movs	r1, #0
 800351a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800351c:	2300      	movs	r3, #0
}
 800351e:	0018      	movs	r0, r3
 8003520:	46bd      	mov	sp, r7
 8003522:	b002      	add	sp, #8
 8003524:	bd80      	pop	{r7, pc}
 8003526:	46c0      	nop			@ (mov r8, r8)
 8003528:	f0ffffff 	.word	0xf0ffffff
 800352c:	ffff7fff 	.word	0xffff7fff
 8003530:	fffff7ff 	.word	0xfffff7ff
 8003534:	02008000 	.word	0x02008000

08003538 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003538:	b590      	push	{r4, r7, lr}
 800353a:	b089      	sub	sp, #36	@ 0x24
 800353c:	af02      	add	r7, sp, #8
 800353e:	60f8      	str	r0, [r7, #12]
 8003540:	0008      	movs	r0, r1
 8003542:	607a      	str	r2, [r7, #4]
 8003544:	0019      	movs	r1, r3
 8003546:	230a      	movs	r3, #10
 8003548:	18fb      	adds	r3, r7, r3
 800354a:	1c02      	adds	r2, r0, #0
 800354c:	801a      	strh	r2, [r3, #0]
 800354e:	2308      	movs	r3, #8
 8003550:	18fb      	adds	r3, r7, r3
 8003552:	1c0a      	adds	r2, r1, #0
 8003554:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2241      	movs	r2, #65	@ 0x41
 800355a:	5c9b      	ldrb	r3, [r3, r2]
 800355c:	b2db      	uxtb	r3, r3
 800355e:	2b20      	cmp	r3, #32
 8003560:	d000      	beq.n	8003564 <HAL_I2C_Master_Transmit+0x2c>
 8003562:	e10a      	b.n	800377a <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2240      	movs	r2, #64	@ 0x40
 8003568:	5c9b      	ldrb	r3, [r3, r2]
 800356a:	2b01      	cmp	r3, #1
 800356c:	d101      	bne.n	8003572 <HAL_I2C_Master_Transmit+0x3a>
 800356e:	2302      	movs	r3, #2
 8003570:	e104      	b.n	800377c <HAL_I2C_Master_Transmit+0x244>
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2240      	movs	r2, #64	@ 0x40
 8003576:	2101      	movs	r1, #1
 8003578:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800357a:	f7ff fcb5 	bl	8002ee8 <HAL_GetTick>
 800357e:	0003      	movs	r3, r0
 8003580:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003582:	2380      	movs	r3, #128	@ 0x80
 8003584:	0219      	lsls	r1, r3, #8
 8003586:	68f8      	ldr	r0, [r7, #12]
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	9300      	str	r3, [sp, #0]
 800358c:	2319      	movs	r3, #25
 800358e:	2201      	movs	r2, #1
 8003590:	f000 fa26 	bl	80039e0 <I2C_WaitOnFlagUntilTimeout>
 8003594:	1e03      	subs	r3, r0, #0
 8003596:	d001      	beq.n	800359c <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e0ef      	b.n	800377c <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2241      	movs	r2, #65	@ 0x41
 80035a0:	2121      	movs	r1, #33	@ 0x21
 80035a2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2242      	movs	r2, #66	@ 0x42
 80035a8:	2110      	movs	r1, #16
 80035aa:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2200      	movs	r2, #0
 80035b0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2208      	movs	r2, #8
 80035bc:	18ba      	adds	r2, r7, r2
 80035be:	8812      	ldrh	r2, [r2, #0]
 80035c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2200      	movs	r2, #0
 80035c6:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	2bff      	cmp	r3, #255	@ 0xff
 80035d0:	d906      	bls.n	80035e0 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	22ff      	movs	r2, #255	@ 0xff
 80035d6:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80035d8:	2380      	movs	r3, #128	@ 0x80
 80035da:	045b      	lsls	r3, r3, #17
 80035dc:	617b      	str	r3, [r7, #20]
 80035de:	e007      	b.n	80035f0 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035e4:	b29a      	uxth	r2, r3
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80035ea:	2380      	movs	r3, #128	@ 0x80
 80035ec:	049b      	lsls	r3, r3, #18
 80035ee:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d027      	beq.n	8003648 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035fc:	781a      	ldrb	r2, [r3, #0]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003608:	1c5a      	adds	r2, r3, #1
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003612:	b29b      	uxth	r3, r3
 8003614:	3b01      	subs	r3, #1
 8003616:	b29a      	uxth	r2, r3
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003620:	3b01      	subs	r3, #1
 8003622:	b29a      	uxth	r2, r3
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800362c:	b2db      	uxtb	r3, r3
 800362e:	3301      	adds	r3, #1
 8003630:	b2da      	uxtb	r2, r3
 8003632:	697c      	ldr	r4, [r7, #20]
 8003634:	230a      	movs	r3, #10
 8003636:	18fb      	adds	r3, r7, r3
 8003638:	8819      	ldrh	r1, [r3, #0]
 800363a:	68f8      	ldr	r0, [r7, #12]
 800363c:	4b51      	ldr	r3, [pc, #324]	@ (8003784 <HAL_I2C_Master_Transmit+0x24c>)
 800363e:	9300      	str	r3, [sp, #0]
 8003640:	0023      	movs	r3, r4
 8003642:	f000 fc45 	bl	8003ed0 <I2C_TransferConfig>
 8003646:	e06f      	b.n	8003728 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800364c:	b2da      	uxtb	r2, r3
 800364e:	697c      	ldr	r4, [r7, #20]
 8003650:	230a      	movs	r3, #10
 8003652:	18fb      	adds	r3, r7, r3
 8003654:	8819      	ldrh	r1, [r3, #0]
 8003656:	68f8      	ldr	r0, [r7, #12]
 8003658:	4b4a      	ldr	r3, [pc, #296]	@ (8003784 <HAL_I2C_Master_Transmit+0x24c>)
 800365a:	9300      	str	r3, [sp, #0]
 800365c:	0023      	movs	r3, r4
 800365e:	f000 fc37 	bl	8003ed0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003662:	e061      	b.n	8003728 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003664:	693a      	ldr	r2, [r7, #16]
 8003666:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	0018      	movs	r0, r3
 800366c:	f000 fa10 	bl	8003a90 <I2C_WaitOnTXISFlagUntilTimeout>
 8003670:	1e03      	subs	r3, r0, #0
 8003672:	d001      	beq.n	8003678 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	e081      	b.n	800377c <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800367c:	781a      	ldrb	r2, [r3, #0]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003688:	1c5a      	adds	r2, r3, #1
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003692:	b29b      	uxth	r3, r3
 8003694:	3b01      	subs	r3, #1
 8003696:	b29a      	uxth	r2, r3
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036a0:	3b01      	subs	r3, #1
 80036a2:	b29a      	uxth	r2, r3
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036ac:	b29b      	uxth	r3, r3
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d03a      	beq.n	8003728 <HAL_I2C_Master_Transmit+0x1f0>
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d136      	bne.n	8003728 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80036ba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80036bc:	68f8      	ldr	r0, [r7, #12]
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	9300      	str	r3, [sp, #0]
 80036c2:	0013      	movs	r3, r2
 80036c4:	2200      	movs	r2, #0
 80036c6:	2180      	movs	r1, #128	@ 0x80
 80036c8:	f000 f98a 	bl	80039e0 <I2C_WaitOnFlagUntilTimeout>
 80036cc:	1e03      	subs	r3, r0, #0
 80036ce:	d001      	beq.n	80036d4 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e053      	b.n	800377c <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036d8:	b29b      	uxth	r3, r3
 80036da:	2bff      	cmp	r3, #255	@ 0xff
 80036dc:	d911      	bls.n	8003702 <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	22ff      	movs	r2, #255	@ 0xff
 80036e2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036e8:	b2da      	uxtb	r2, r3
 80036ea:	2380      	movs	r3, #128	@ 0x80
 80036ec:	045c      	lsls	r4, r3, #17
 80036ee:	230a      	movs	r3, #10
 80036f0:	18fb      	adds	r3, r7, r3
 80036f2:	8819      	ldrh	r1, [r3, #0]
 80036f4:	68f8      	ldr	r0, [r7, #12]
 80036f6:	2300      	movs	r3, #0
 80036f8:	9300      	str	r3, [sp, #0]
 80036fa:	0023      	movs	r3, r4
 80036fc:	f000 fbe8 	bl	8003ed0 <I2C_TransferConfig>
 8003700:	e012      	b.n	8003728 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003706:	b29a      	uxth	r2, r3
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003710:	b2da      	uxtb	r2, r3
 8003712:	2380      	movs	r3, #128	@ 0x80
 8003714:	049c      	lsls	r4, r3, #18
 8003716:	230a      	movs	r3, #10
 8003718:	18fb      	adds	r3, r7, r3
 800371a:	8819      	ldrh	r1, [r3, #0]
 800371c:	68f8      	ldr	r0, [r7, #12]
 800371e:	2300      	movs	r3, #0
 8003720:	9300      	str	r3, [sp, #0]
 8003722:	0023      	movs	r3, r4
 8003724:	f000 fbd4 	bl	8003ed0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800372c:	b29b      	uxth	r3, r3
 800372e:	2b00      	cmp	r3, #0
 8003730:	d198      	bne.n	8003664 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003732:	693a      	ldr	r2, [r7, #16]
 8003734:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	0018      	movs	r0, r3
 800373a:	f000 f9ef 	bl	8003b1c <I2C_WaitOnSTOPFlagUntilTimeout>
 800373e:	1e03      	subs	r3, r0, #0
 8003740:	d001      	beq.n	8003746 <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e01a      	b.n	800377c <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	2220      	movs	r2, #32
 800374c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	685a      	ldr	r2, [r3, #4]
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	490b      	ldr	r1, [pc, #44]	@ (8003788 <HAL_I2C_Master_Transmit+0x250>)
 800375a:	400a      	ands	r2, r1
 800375c:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2241      	movs	r2, #65	@ 0x41
 8003762:	2120      	movs	r1, #32
 8003764:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2242      	movs	r2, #66	@ 0x42
 800376a:	2100      	movs	r1, #0
 800376c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2240      	movs	r2, #64	@ 0x40
 8003772:	2100      	movs	r1, #0
 8003774:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003776:	2300      	movs	r3, #0
 8003778:	e000      	b.n	800377c <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 800377a:	2302      	movs	r3, #2
  }
}
 800377c:	0018      	movs	r0, r3
 800377e:	46bd      	mov	sp, r7
 8003780:	b007      	add	sp, #28
 8003782:	bd90      	pop	{r4, r7, pc}
 8003784:	80002000 	.word	0x80002000
 8003788:	fe00e800 	.word	0xfe00e800

0800378c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800378c:	b590      	push	{r4, r7, lr}
 800378e:	b089      	sub	sp, #36	@ 0x24
 8003790:	af02      	add	r7, sp, #8
 8003792:	60f8      	str	r0, [r7, #12]
 8003794:	0008      	movs	r0, r1
 8003796:	607a      	str	r2, [r7, #4]
 8003798:	0019      	movs	r1, r3
 800379a:	230a      	movs	r3, #10
 800379c:	18fb      	adds	r3, r7, r3
 800379e:	1c02      	adds	r2, r0, #0
 80037a0:	801a      	strh	r2, [r3, #0]
 80037a2:	2308      	movs	r3, #8
 80037a4:	18fb      	adds	r3, r7, r3
 80037a6:	1c0a      	adds	r2, r1, #0
 80037a8:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2241      	movs	r2, #65	@ 0x41
 80037ae:	5c9b      	ldrb	r3, [r3, r2]
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	2b20      	cmp	r3, #32
 80037b4:	d000      	beq.n	80037b8 <HAL_I2C_Master_Receive+0x2c>
 80037b6:	e0e8      	b.n	800398a <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2240      	movs	r2, #64	@ 0x40
 80037bc:	5c9b      	ldrb	r3, [r3, r2]
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d101      	bne.n	80037c6 <HAL_I2C_Master_Receive+0x3a>
 80037c2:	2302      	movs	r3, #2
 80037c4:	e0e2      	b.n	800398c <HAL_I2C_Master_Receive+0x200>
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2240      	movs	r2, #64	@ 0x40
 80037ca:	2101      	movs	r1, #1
 80037cc:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80037ce:	f7ff fb8b 	bl	8002ee8 <HAL_GetTick>
 80037d2:	0003      	movs	r3, r0
 80037d4:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80037d6:	2380      	movs	r3, #128	@ 0x80
 80037d8:	0219      	lsls	r1, r3, #8
 80037da:	68f8      	ldr	r0, [r7, #12]
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	9300      	str	r3, [sp, #0]
 80037e0:	2319      	movs	r3, #25
 80037e2:	2201      	movs	r2, #1
 80037e4:	f000 f8fc 	bl	80039e0 <I2C_WaitOnFlagUntilTimeout>
 80037e8:	1e03      	subs	r3, r0, #0
 80037ea:	d001      	beq.n	80037f0 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e0cd      	b.n	800398c <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2241      	movs	r2, #65	@ 0x41
 80037f4:	2122      	movs	r1, #34	@ 0x22
 80037f6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2242      	movs	r2, #66	@ 0x42
 80037fc:	2110      	movs	r1, #16
 80037fe:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2200      	movs	r2, #0
 8003804:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2208      	movs	r2, #8
 8003810:	18ba      	adds	r2, r7, r2
 8003812:	8812      	ldrh	r2, [r2, #0]
 8003814:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2200      	movs	r2, #0
 800381a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003820:	b29b      	uxth	r3, r3
 8003822:	2bff      	cmp	r3, #255	@ 0xff
 8003824:	d911      	bls.n	800384a <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	22ff      	movs	r2, #255	@ 0xff
 800382a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003830:	b2da      	uxtb	r2, r3
 8003832:	2380      	movs	r3, #128	@ 0x80
 8003834:	045c      	lsls	r4, r3, #17
 8003836:	230a      	movs	r3, #10
 8003838:	18fb      	adds	r3, r7, r3
 800383a:	8819      	ldrh	r1, [r3, #0]
 800383c:	68f8      	ldr	r0, [r7, #12]
 800383e:	4b55      	ldr	r3, [pc, #340]	@ (8003994 <HAL_I2C_Master_Receive+0x208>)
 8003840:	9300      	str	r3, [sp, #0]
 8003842:	0023      	movs	r3, r4
 8003844:	f000 fb44 	bl	8003ed0 <I2C_TransferConfig>
 8003848:	e076      	b.n	8003938 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800384e:	b29a      	uxth	r2, r3
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003858:	b2da      	uxtb	r2, r3
 800385a:	2380      	movs	r3, #128	@ 0x80
 800385c:	049c      	lsls	r4, r3, #18
 800385e:	230a      	movs	r3, #10
 8003860:	18fb      	adds	r3, r7, r3
 8003862:	8819      	ldrh	r1, [r3, #0]
 8003864:	68f8      	ldr	r0, [r7, #12]
 8003866:	4b4b      	ldr	r3, [pc, #300]	@ (8003994 <HAL_I2C_Master_Receive+0x208>)
 8003868:	9300      	str	r3, [sp, #0]
 800386a:	0023      	movs	r3, r4
 800386c:	f000 fb30 	bl	8003ed0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003870:	e062      	b.n	8003938 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003872:	697a      	ldr	r2, [r7, #20]
 8003874:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	0018      	movs	r0, r3
 800387a:	f000 f993 	bl	8003ba4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800387e:	1e03      	subs	r3, r0, #0
 8003880:	d001      	beq.n	8003886 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e082      	b.n	800398c <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003890:	b2d2      	uxtb	r2, r2
 8003892:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003898:	1c5a      	adds	r2, r3, #1
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038a2:	3b01      	subs	r3, #1
 80038a4:	b29a      	uxth	r2, r3
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038ae:	b29b      	uxth	r3, r3
 80038b0:	3b01      	subs	r3, #1
 80038b2:	b29a      	uxth	r2, r3
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038bc:	b29b      	uxth	r3, r3
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d03a      	beq.n	8003938 <HAL_I2C_Master_Receive+0x1ac>
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d136      	bne.n	8003938 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80038ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80038cc:	68f8      	ldr	r0, [r7, #12]
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	9300      	str	r3, [sp, #0]
 80038d2:	0013      	movs	r3, r2
 80038d4:	2200      	movs	r2, #0
 80038d6:	2180      	movs	r1, #128	@ 0x80
 80038d8:	f000 f882 	bl	80039e0 <I2C_WaitOnFlagUntilTimeout>
 80038dc:	1e03      	subs	r3, r0, #0
 80038de:	d001      	beq.n	80038e4 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	e053      	b.n	800398c <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038e8:	b29b      	uxth	r3, r3
 80038ea:	2bff      	cmp	r3, #255	@ 0xff
 80038ec:	d911      	bls.n	8003912 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	22ff      	movs	r2, #255	@ 0xff
 80038f2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038f8:	b2da      	uxtb	r2, r3
 80038fa:	2380      	movs	r3, #128	@ 0x80
 80038fc:	045c      	lsls	r4, r3, #17
 80038fe:	230a      	movs	r3, #10
 8003900:	18fb      	adds	r3, r7, r3
 8003902:	8819      	ldrh	r1, [r3, #0]
 8003904:	68f8      	ldr	r0, [r7, #12]
 8003906:	2300      	movs	r3, #0
 8003908:	9300      	str	r3, [sp, #0]
 800390a:	0023      	movs	r3, r4
 800390c:	f000 fae0 	bl	8003ed0 <I2C_TransferConfig>
 8003910:	e012      	b.n	8003938 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003916:	b29a      	uxth	r2, r3
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003920:	b2da      	uxtb	r2, r3
 8003922:	2380      	movs	r3, #128	@ 0x80
 8003924:	049c      	lsls	r4, r3, #18
 8003926:	230a      	movs	r3, #10
 8003928:	18fb      	adds	r3, r7, r3
 800392a:	8819      	ldrh	r1, [r3, #0]
 800392c:	68f8      	ldr	r0, [r7, #12]
 800392e:	2300      	movs	r3, #0
 8003930:	9300      	str	r3, [sp, #0]
 8003932:	0023      	movs	r3, r4
 8003934:	f000 facc 	bl	8003ed0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800393c:	b29b      	uxth	r3, r3
 800393e:	2b00      	cmp	r3, #0
 8003940:	d197      	bne.n	8003872 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003942:	697a      	ldr	r2, [r7, #20]
 8003944:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	0018      	movs	r0, r3
 800394a:	f000 f8e7 	bl	8003b1c <I2C_WaitOnSTOPFlagUntilTimeout>
 800394e:	1e03      	subs	r3, r0, #0
 8003950:	d001      	beq.n	8003956 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e01a      	b.n	800398c <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	2220      	movs	r2, #32
 800395c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	685a      	ldr	r2, [r3, #4]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	490b      	ldr	r1, [pc, #44]	@ (8003998 <HAL_I2C_Master_Receive+0x20c>)
 800396a:	400a      	ands	r2, r1
 800396c:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2241      	movs	r2, #65	@ 0x41
 8003972:	2120      	movs	r1, #32
 8003974:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2242      	movs	r2, #66	@ 0x42
 800397a:	2100      	movs	r1, #0
 800397c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2240      	movs	r2, #64	@ 0x40
 8003982:	2100      	movs	r1, #0
 8003984:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003986:	2300      	movs	r3, #0
 8003988:	e000      	b.n	800398c <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 800398a:	2302      	movs	r3, #2
  }
}
 800398c:	0018      	movs	r0, r3
 800398e:	46bd      	mov	sp, r7
 8003990:	b007      	add	sp, #28
 8003992:	bd90      	pop	{r4, r7, pc}
 8003994:	80002400 	.word	0x80002400
 8003998:	fe00e800 	.word	0xfe00e800

0800399c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b082      	sub	sp, #8
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	699b      	ldr	r3, [r3, #24]
 80039aa:	2202      	movs	r2, #2
 80039ac:	4013      	ands	r3, r2
 80039ae:	2b02      	cmp	r3, #2
 80039b0:	d103      	bne.n	80039ba <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	2200      	movs	r2, #0
 80039b8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	699b      	ldr	r3, [r3, #24]
 80039c0:	2201      	movs	r2, #1
 80039c2:	4013      	ands	r3, r2
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d007      	beq.n	80039d8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	699a      	ldr	r2, [r3, #24]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	2101      	movs	r1, #1
 80039d4:	430a      	orrs	r2, r1
 80039d6:	619a      	str	r2, [r3, #24]
  }
}
 80039d8:	46c0      	nop			@ (mov r8, r8)
 80039da:	46bd      	mov	sp, r7
 80039dc:	b002      	add	sp, #8
 80039de:	bd80      	pop	{r7, pc}

080039e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b084      	sub	sp, #16
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	60f8      	str	r0, [r7, #12]
 80039e8:	60b9      	str	r1, [r7, #8]
 80039ea:	603b      	str	r3, [r7, #0]
 80039ec:	1dfb      	adds	r3, r7, #7
 80039ee:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039f0:	e03a      	b.n	8003a68 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80039f2:	69ba      	ldr	r2, [r7, #24]
 80039f4:	6839      	ldr	r1, [r7, #0]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	0018      	movs	r0, r3
 80039fa:	f000 f971 	bl	8003ce0 <I2C_IsErrorOccurred>
 80039fe:	1e03      	subs	r3, r0, #0
 8003a00:	d001      	beq.n	8003a06 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e040      	b.n	8003a88 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	3301      	adds	r3, #1
 8003a0a:	d02d      	beq.n	8003a68 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a0c:	f7ff fa6c 	bl	8002ee8 <HAL_GetTick>
 8003a10:	0002      	movs	r2, r0
 8003a12:	69bb      	ldr	r3, [r7, #24]
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	683a      	ldr	r2, [r7, #0]
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d302      	bcc.n	8003a22 <I2C_WaitOnFlagUntilTimeout+0x42>
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d122      	bne.n	8003a68 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	699b      	ldr	r3, [r3, #24]
 8003a28:	68ba      	ldr	r2, [r7, #8]
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	68ba      	ldr	r2, [r7, #8]
 8003a2e:	1ad3      	subs	r3, r2, r3
 8003a30:	425a      	negs	r2, r3
 8003a32:	4153      	adcs	r3, r2
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	001a      	movs	r2, r3
 8003a38:	1dfb      	adds	r3, r7, #7
 8003a3a:	781b      	ldrb	r3, [r3, #0]
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d113      	bne.n	8003a68 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a44:	2220      	movs	r2, #32
 8003a46:	431a      	orrs	r2, r3
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2241      	movs	r2, #65	@ 0x41
 8003a50:	2120      	movs	r1, #32
 8003a52:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2242      	movs	r2, #66	@ 0x42
 8003a58:	2100      	movs	r1, #0
 8003a5a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2240      	movs	r2, #64	@ 0x40
 8003a60:	2100      	movs	r1, #0
 8003a62:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e00f      	b.n	8003a88 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	699b      	ldr	r3, [r3, #24]
 8003a6e:	68ba      	ldr	r2, [r7, #8]
 8003a70:	4013      	ands	r3, r2
 8003a72:	68ba      	ldr	r2, [r7, #8]
 8003a74:	1ad3      	subs	r3, r2, r3
 8003a76:	425a      	negs	r2, r3
 8003a78:	4153      	adcs	r3, r2
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	001a      	movs	r2, r3
 8003a7e:	1dfb      	adds	r3, r7, #7
 8003a80:	781b      	ldrb	r3, [r3, #0]
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d0b5      	beq.n	80039f2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a86:	2300      	movs	r3, #0
}
 8003a88:	0018      	movs	r0, r3
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	b004      	add	sp, #16
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	60f8      	str	r0, [r7, #12]
 8003a98:	60b9      	str	r1, [r7, #8]
 8003a9a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003a9c:	e032      	b.n	8003b04 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	68b9      	ldr	r1, [r7, #8]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	0018      	movs	r0, r3
 8003aa6:	f000 f91b 	bl	8003ce0 <I2C_IsErrorOccurred>
 8003aaa:	1e03      	subs	r3, r0, #0
 8003aac:	d001      	beq.n	8003ab2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e030      	b.n	8003b14 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	3301      	adds	r3, #1
 8003ab6:	d025      	beq.n	8003b04 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ab8:	f7ff fa16 	bl	8002ee8 <HAL_GetTick>
 8003abc:	0002      	movs	r2, r0
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	68ba      	ldr	r2, [r7, #8]
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d302      	bcc.n	8003ace <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d11a      	bne.n	8003b04 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	699b      	ldr	r3, [r3, #24]
 8003ad4:	2202      	movs	r2, #2
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	2b02      	cmp	r3, #2
 8003ada:	d013      	beq.n	8003b04 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ae0:	2220      	movs	r2, #32
 8003ae2:	431a      	orrs	r2, r3
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2241      	movs	r2, #65	@ 0x41
 8003aec:	2120      	movs	r1, #32
 8003aee:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2242      	movs	r2, #66	@ 0x42
 8003af4:	2100      	movs	r1, #0
 8003af6:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2240      	movs	r2, #64	@ 0x40
 8003afc:	2100      	movs	r1, #0
 8003afe:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e007      	b.n	8003b14 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	699b      	ldr	r3, [r3, #24]
 8003b0a:	2202      	movs	r2, #2
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	2b02      	cmp	r3, #2
 8003b10:	d1c5      	bne.n	8003a9e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003b12:	2300      	movs	r3, #0
}
 8003b14:	0018      	movs	r0, r3
 8003b16:	46bd      	mov	sp, r7
 8003b18:	b004      	add	sp, #16
 8003b1a:	bd80      	pop	{r7, pc}

08003b1c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b084      	sub	sp, #16
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	60f8      	str	r0, [r7, #12]
 8003b24:	60b9      	str	r1, [r7, #8]
 8003b26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b28:	e02f      	b.n	8003b8a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	68b9      	ldr	r1, [r7, #8]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	0018      	movs	r0, r3
 8003b32:	f000 f8d5 	bl	8003ce0 <I2C_IsErrorOccurred>
 8003b36:	1e03      	subs	r3, r0, #0
 8003b38:	d001      	beq.n	8003b3e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e02d      	b.n	8003b9a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b3e:	f7ff f9d3 	bl	8002ee8 <HAL_GetTick>
 8003b42:	0002      	movs	r2, r0
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	68ba      	ldr	r2, [r7, #8]
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d302      	bcc.n	8003b54 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d11a      	bne.n	8003b8a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	699b      	ldr	r3, [r3, #24]
 8003b5a:	2220      	movs	r2, #32
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	2b20      	cmp	r3, #32
 8003b60:	d013      	beq.n	8003b8a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b66:	2220      	movs	r2, #32
 8003b68:	431a      	orrs	r2, r3
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2241      	movs	r2, #65	@ 0x41
 8003b72:	2120      	movs	r1, #32
 8003b74:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2242      	movs	r2, #66	@ 0x42
 8003b7a:	2100      	movs	r1, #0
 8003b7c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2240      	movs	r2, #64	@ 0x40
 8003b82:	2100      	movs	r1, #0
 8003b84:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e007      	b.n	8003b9a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	699b      	ldr	r3, [r3, #24]
 8003b90:	2220      	movs	r2, #32
 8003b92:	4013      	ands	r3, r2
 8003b94:	2b20      	cmp	r3, #32
 8003b96:	d1c8      	bne.n	8003b2a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b98:	2300      	movs	r3, #0
}
 8003b9a:	0018      	movs	r0, r3
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	b004      	add	sp, #16
 8003ba0:	bd80      	pop	{r7, pc}
	...

08003ba4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b086      	sub	sp, #24
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	60f8      	str	r0, [r7, #12]
 8003bac:	60b9      	str	r1, [r7, #8]
 8003bae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bb0:	2317      	movs	r3, #23
 8003bb2:	18fb      	adds	r3, r7, r3
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003bb8:	e07b      	b.n	8003cb2 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	68b9      	ldr	r1, [r7, #8]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	0018      	movs	r0, r3
 8003bc2:	f000 f88d 	bl	8003ce0 <I2C_IsErrorOccurred>
 8003bc6:	1e03      	subs	r3, r0, #0
 8003bc8:	d003      	beq.n	8003bd2 <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 8003bca:	2317      	movs	r3, #23
 8003bcc:	18fb      	adds	r3, r7, r3
 8003bce:	2201      	movs	r2, #1
 8003bd0:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	699b      	ldr	r3, [r3, #24]
 8003bd8:	2220      	movs	r2, #32
 8003bda:	4013      	ands	r3, r2
 8003bdc:	2b20      	cmp	r3, #32
 8003bde:	d140      	bne.n	8003c62 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 8003be0:	2117      	movs	r1, #23
 8003be2:	187b      	adds	r3, r7, r1
 8003be4:	781b      	ldrb	r3, [r3, #0]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d13b      	bne.n	8003c62 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	699b      	ldr	r3, [r3, #24]
 8003bf0:	2204      	movs	r2, #4
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	2b04      	cmp	r3, #4
 8003bf6:	d106      	bne.n	8003c06 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d002      	beq.n	8003c06 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8003c00:	187b      	adds	r3, r7, r1
 8003c02:	2200      	movs	r2, #0
 8003c04:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	699b      	ldr	r3, [r3, #24]
 8003c0c:	2210      	movs	r2, #16
 8003c0e:	4013      	ands	r3, r2
 8003c10:	2b10      	cmp	r3, #16
 8003c12:	d123      	bne.n	8003c5c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	2210      	movs	r2, #16
 8003c1a:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2204      	movs	r2, #4
 8003c20:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	2220      	movs	r2, #32
 8003c28:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	685a      	ldr	r2, [r3, #4]
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4929      	ldr	r1, [pc, #164]	@ (8003cdc <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 8003c36:	400a      	ands	r2, r1
 8003c38:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2241      	movs	r2, #65	@ 0x41
 8003c3e:	2120      	movs	r1, #32
 8003c40:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2242      	movs	r2, #66	@ 0x42
 8003c46:	2100      	movs	r1, #0
 8003c48:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2240      	movs	r2, #64	@ 0x40
 8003c4e:	2100      	movs	r1, #0
 8003c50:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8003c52:	2317      	movs	r3, #23
 8003c54:	18fb      	adds	r3, r7, r3
 8003c56:	2201      	movs	r2, #1
 8003c58:	701a      	strb	r2, [r3, #0]
 8003c5a:	e002      	b.n	8003c62 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8003c62:	f7ff f941 	bl	8002ee8 <HAL_GetTick>
 8003c66:	0002      	movs	r2, r0
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	68ba      	ldr	r2, [r7, #8]
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d302      	bcc.n	8003c78 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d11c      	bne.n	8003cb2 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 8003c78:	2017      	movs	r0, #23
 8003c7a:	183b      	adds	r3, r7, r0
 8003c7c:	781b      	ldrb	r3, [r3, #0]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d117      	bne.n	8003cb2 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	699b      	ldr	r3, [r3, #24]
 8003c88:	2204      	movs	r2, #4
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	2b04      	cmp	r3, #4
 8003c8e:	d010      	beq.n	8003cb2 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c94:	2220      	movs	r2, #32
 8003c96:	431a      	orrs	r2, r3
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2241      	movs	r2, #65	@ 0x41
 8003ca0:	2120      	movs	r1, #32
 8003ca2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2240      	movs	r2, #64	@ 0x40
 8003ca8:	2100      	movs	r1, #0
 8003caa:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8003cac:	183b      	adds	r3, r7, r0
 8003cae:	2201      	movs	r2, #1
 8003cb0:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	699b      	ldr	r3, [r3, #24]
 8003cb8:	2204      	movs	r2, #4
 8003cba:	4013      	ands	r3, r2
 8003cbc:	2b04      	cmp	r3, #4
 8003cbe:	d005      	beq.n	8003ccc <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8003cc0:	2317      	movs	r3, #23
 8003cc2:	18fb      	adds	r3, r7, r3
 8003cc4:	781b      	ldrb	r3, [r3, #0]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d100      	bne.n	8003ccc <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8003cca:	e776      	b.n	8003bba <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 8003ccc:	2317      	movs	r3, #23
 8003cce:	18fb      	adds	r3, r7, r3
 8003cd0:	781b      	ldrb	r3, [r3, #0]
}
 8003cd2:	0018      	movs	r0, r3
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	b006      	add	sp, #24
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	46c0      	nop			@ (mov r8, r8)
 8003cdc:	fe00e800 	.word	0xfe00e800

08003ce0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b08a      	sub	sp, #40	@ 0x28
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	60f8      	str	r0, [r7, #12]
 8003ce8:	60b9      	str	r1, [r7, #8]
 8003cea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cec:	2327      	movs	r3, #39	@ 0x27
 8003cee:	18fb      	adds	r3, r7, r3
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	699b      	ldr	r3, [r3, #24]
 8003cfa:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003d04:	69bb      	ldr	r3, [r7, #24]
 8003d06:	2210      	movs	r2, #16
 8003d08:	4013      	ands	r3, r2
 8003d0a:	d100      	bne.n	8003d0e <I2C_IsErrorOccurred+0x2e>
 8003d0c:	e079      	b.n	8003e02 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	2210      	movs	r2, #16
 8003d14:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003d16:	e057      	b.n	8003dc8 <I2C_IsErrorOccurred+0xe8>
 8003d18:	2227      	movs	r2, #39	@ 0x27
 8003d1a:	18bb      	adds	r3, r7, r2
 8003d1c:	18ba      	adds	r2, r7, r2
 8003d1e:	7812      	ldrb	r2, [r2, #0]
 8003d20:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	3301      	adds	r3, #1
 8003d26:	d04f      	beq.n	8003dc8 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003d28:	f7ff f8de 	bl	8002ee8 <HAL_GetTick>
 8003d2c:	0002      	movs	r2, r0
 8003d2e:	69fb      	ldr	r3, [r7, #28]
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	68ba      	ldr	r2, [r7, #8]
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d302      	bcc.n	8003d3e <I2C_IsErrorOccurred+0x5e>
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d144      	bne.n	8003dc8 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	685a      	ldr	r2, [r3, #4]
 8003d44:	2380      	movs	r3, #128	@ 0x80
 8003d46:	01db      	lsls	r3, r3, #7
 8003d48:	4013      	ands	r3, r2
 8003d4a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003d4c:	2013      	movs	r0, #19
 8003d4e:	183b      	adds	r3, r7, r0
 8003d50:	68fa      	ldr	r2, [r7, #12]
 8003d52:	2142      	movs	r1, #66	@ 0x42
 8003d54:	5c52      	ldrb	r2, [r2, r1]
 8003d56:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	699a      	ldr	r2, [r3, #24]
 8003d5e:	2380      	movs	r3, #128	@ 0x80
 8003d60:	021b      	lsls	r3, r3, #8
 8003d62:	401a      	ands	r2, r3
 8003d64:	2380      	movs	r3, #128	@ 0x80
 8003d66:	021b      	lsls	r3, r3, #8
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d126      	bne.n	8003dba <I2C_IsErrorOccurred+0xda>
 8003d6c:	697a      	ldr	r2, [r7, #20]
 8003d6e:	2380      	movs	r3, #128	@ 0x80
 8003d70:	01db      	lsls	r3, r3, #7
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d021      	beq.n	8003dba <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8003d76:	183b      	adds	r3, r7, r0
 8003d78:	781b      	ldrb	r3, [r3, #0]
 8003d7a:	2b20      	cmp	r3, #32
 8003d7c:	d01d      	beq.n	8003dba <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	685a      	ldr	r2, [r3, #4]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	2180      	movs	r1, #128	@ 0x80
 8003d8a:	01c9      	lsls	r1, r1, #7
 8003d8c:	430a      	orrs	r2, r1
 8003d8e:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003d90:	f7ff f8aa 	bl	8002ee8 <HAL_GetTick>
 8003d94:	0003      	movs	r3, r0
 8003d96:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d98:	e00f      	b.n	8003dba <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003d9a:	f7ff f8a5 	bl	8002ee8 <HAL_GetTick>
 8003d9e:	0002      	movs	r2, r0
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	1ad3      	subs	r3, r2, r3
 8003da4:	2b19      	cmp	r3, #25
 8003da6:	d908      	bls.n	8003dba <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003da8:	6a3b      	ldr	r3, [r7, #32]
 8003daa:	2220      	movs	r2, #32
 8003dac:	4313      	orrs	r3, r2
 8003dae:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003db0:	2327      	movs	r3, #39	@ 0x27
 8003db2:	18fb      	adds	r3, r7, r3
 8003db4:	2201      	movs	r2, #1
 8003db6:	701a      	strb	r2, [r3, #0]

              break;
 8003db8:	e006      	b.n	8003dc8 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	699b      	ldr	r3, [r3, #24]
 8003dc0:	2220      	movs	r2, #32
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	2b20      	cmp	r3, #32
 8003dc6:	d1e8      	bne.n	8003d9a <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	699b      	ldr	r3, [r3, #24]
 8003dce:	2220      	movs	r2, #32
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	2b20      	cmp	r3, #32
 8003dd4:	d004      	beq.n	8003de0 <I2C_IsErrorOccurred+0x100>
 8003dd6:	2327      	movs	r3, #39	@ 0x27
 8003dd8:	18fb      	adds	r3, r7, r3
 8003dda:	781b      	ldrb	r3, [r3, #0]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d09b      	beq.n	8003d18 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003de0:	2327      	movs	r3, #39	@ 0x27
 8003de2:	18fb      	adds	r3, r7, r3
 8003de4:	781b      	ldrb	r3, [r3, #0]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d103      	bne.n	8003df2 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	2220      	movs	r2, #32
 8003df0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003df2:	6a3b      	ldr	r3, [r7, #32]
 8003df4:	2204      	movs	r2, #4
 8003df6:	4313      	orrs	r3, r2
 8003df8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003dfa:	2327      	movs	r3, #39	@ 0x27
 8003dfc:	18fb      	adds	r3, r7, r3
 8003dfe:	2201      	movs	r2, #1
 8003e00:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	699b      	ldr	r3, [r3, #24]
 8003e08:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003e0a:	69ba      	ldr	r2, [r7, #24]
 8003e0c:	2380      	movs	r3, #128	@ 0x80
 8003e0e:	005b      	lsls	r3, r3, #1
 8003e10:	4013      	ands	r3, r2
 8003e12:	d00c      	beq.n	8003e2e <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003e14:	6a3b      	ldr	r3, [r7, #32]
 8003e16:	2201      	movs	r2, #1
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	2280      	movs	r2, #128	@ 0x80
 8003e22:	0052      	lsls	r2, r2, #1
 8003e24:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003e26:	2327      	movs	r3, #39	@ 0x27
 8003e28:	18fb      	adds	r3, r7, r3
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003e2e:	69ba      	ldr	r2, [r7, #24]
 8003e30:	2380      	movs	r3, #128	@ 0x80
 8003e32:	00db      	lsls	r3, r3, #3
 8003e34:	4013      	ands	r3, r2
 8003e36:	d00c      	beq.n	8003e52 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003e38:	6a3b      	ldr	r3, [r7, #32]
 8003e3a:	2208      	movs	r2, #8
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	2280      	movs	r2, #128	@ 0x80
 8003e46:	00d2      	lsls	r2, r2, #3
 8003e48:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003e4a:	2327      	movs	r3, #39	@ 0x27
 8003e4c:	18fb      	adds	r3, r7, r3
 8003e4e:	2201      	movs	r2, #1
 8003e50:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003e52:	69ba      	ldr	r2, [r7, #24]
 8003e54:	2380      	movs	r3, #128	@ 0x80
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	4013      	ands	r3, r2
 8003e5a:	d00c      	beq.n	8003e76 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003e5c:	6a3b      	ldr	r3, [r7, #32]
 8003e5e:	2202      	movs	r2, #2
 8003e60:	4313      	orrs	r3, r2
 8003e62:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	2280      	movs	r2, #128	@ 0x80
 8003e6a:	0092      	lsls	r2, r2, #2
 8003e6c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003e6e:	2327      	movs	r3, #39	@ 0x27
 8003e70:	18fb      	adds	r3, r7, r3
 8003e72:	2201      	movs	r2, #1
 8003e74:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8003e76:	2327      	movs	r3, #39	@ 0x27
 8003e78:	18fb      	adds	r3, r7, r3
 8003e7a:	781b      	ldrb	r3, [r3, #0]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d01d      	beq.n	8003ebc <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	0018      	movs	r0, r3
 8003e84:	f7ff fd8a 	bl	800399c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	685a      	ldr	r2, [r3, #4]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	490e      	ldr	r1, [pc, #56]	@ (8003ecc <I2C_IsErrorOccurred+0x1ec>)
 8003e94:	400a      	ands	r2, r1
 8003e96:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003e9c:	6a3b      	ldr	r3, [r7, #32]
 8003e9e:	431a      	orrs	r2, r3
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2241      	movs	r2, #65	@ 0x41
 8003ea8:	2120      	movs	r1, #32
 8003eaa:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2242      	movs	r2, #66	@ 0x42
 8003eb0:	2100      	movs	r1, #0
 8003eb2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2240      	movs	r2, #64	@ 0x40
 8003eb8:	2100      	movs	r1, #0
 8003eba:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8003ebc:	2327      	movs	r3, #39	@ 0x27
 8003ebe:	18fb      	adds	r3, r7, r3
 8003ec0:	781b      	ldrb	r3, [r3, #0]
}
 8003ec2:	0018      	movs	r0, r3
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	b00a      	add	sp, #40	@ 0x28
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	46c0      	nop			@ (mov r8, r8)
 8003ecc:	fe00e800 	.word	0xfe00e800

08003ed0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003ed0:	b590      	push	{r4, r7, lr}
 8003ed2:	b087      	sub	sp, #28
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	60f8      	str	r0, [r7, #12]
 8003ed8:	0008      	movs	r0, r1
 8003eda:	0011      	movs	r1, r2
 8003edc:	607b      	str	r3, [r7, #4]
 8003ede:	240a      	movs	r4, #10
 8003ee0:	193b      	adds	r3, r7, r4
 8003ee2:	1c02      	adds	r2, r0, #0
 8003ee4:	801a      	strh	r2, [r3, #0]
 8003ee6:	2009      	movs	r0, #9
 8003ee8:	183b      	adds	r3, r7, r0
 8003eea:	1c0a      	adds	r2, r1, #0
 8003eec:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003eee:	193b      	adds	r3, r7, r4
 8003ef0:	881b      	ldrh	r3, [r3, #0]
 8003ef2:	059b      	lsls	r3, r3, #22
 8003ef4:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003ef6:	183b      	adds	r3, r7, r0
 8003ef8:	781b      	ldrb	r3, [r3, #0]
 8003efa:	0419      	lsls	r1, r3, #16
 8003efc:	23ff      	movs	r3, #255	@ 0xff
 8003efe:	041b      	lsls	r3, r3, #16
 8003f00:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003f02:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003f08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	005b      	lsls	r3, r3, #1
 8003f0e:	085b      	lsrs	r3, r3, #1
 8003f10:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003f1a:	0d51      	lsrs	r1, r2, #21
 8003f1c:	2280      	movs	r2, #128	@ 0x80
 8003f1e:	00d2      	lsls	r2, r2, #3
 8003f20:	400a      	ands	r2, r1
 8003f22:	4907      	ldr	r1, [pc, #28]	@ (8003f40 <I2C_TransferConfig+0x70>)
 8003f24:	430a      	orrs	r2, r1
 8003f26:	43d2      	mvns	r2, r2
 8003f28:	401a      	ands	r2, r3
 8003f2a:	0011      	movs	r1, r2
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	697a      	ldr	r2, [r7, #20]
 8003f32:	430a      	orrs	r2, r1
 8003f34:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003f36:	46c0      	nop			@ (mov r8, r8)
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	b007      	add	sp, #28
 8003f3c:	bd90      	pop	{r4, r7, pc}
 8003f3e:	46c0      	nop			@ (mov r8, r8)
 8003f40:	03ff63ff 	.word	0x03ff63ff

08003f44 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b082      	sub	sp, #8
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2241      	movs	r2, #65	@ 0x41
 8003f52:	5c9b      	ldrb	r3, [r3, r2]
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	2b20      	cmp	r3, #32
 8003f58:	d138      	bne.n	8003fcc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2240      	movs	r2, #64	@ 0x40
 8003f5e:	5c9b      	ldrb	r3, [r3, r2]
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d101      	bne.n	8003f68 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003f64:	2302      	movs	r3, #2
 8003f66:	e032      	b.n	8003fce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2240      	movs	r2, #64	@ 0x40
 8003f6c:	2101      	movs	r1, #1
 8003f6e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2241      	movs	r2, #65	@ 0x41
 8003f74:	2124      	movs	r1, #36	@ 0x24
 8003f76:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	2101      	movs	r1, #1
 8003f84:	438a      	bics	r2, r1
 8003f86:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4911      	ldr	r1, [pc, #68]	@ (8003fd8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003f94:	400a      	ands	r2, r1
 8003f96:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	6819      	ldr	r1, [r3, #0]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	683a      	ldr	r2, [r7, #0]
 8003fa4:	430a      	orrs	r2, r1
 8003fa6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	2101      	movs	r1, #1
 8003fb4:	430a      	orrs	r2, r1
 8003fb6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2241      	movs	r2, #65	@ 0x41
 8003fbc:	2120      	movs	r1, #32
 8003fbe:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2240      	movs	r2, #64	@ 0x40
 8003fc4:	2100      	movs	r1, #0
 8003fc6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	e000      	b.n	8003fce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003fcc:	2302      	movs	r3, #2
  }
}
 8003fce:	0018      	movs	r0, r3
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	b002      	add	sp, #8
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	46c0      	nop			@ (mov r8, r8)
 8003fd8:	ffffefff 	.word	0xffffefff

08003fdc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b084      	sub	sp, #16
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2241      	movs	r2, #65	@ 0x41
 8003fea:	5c9b      	ldrb	r3, [r3, r2]
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	2b20      	cmp	r3, #32
 8003ff0:	d139      	bne.n	8004066 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2240      	movs	r2, #64	@ 0x40
 8003ff6:	5c9b      	ldrb	r3, [r3, r2]
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d101      	bne.n	8004000 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003ffc:	2302      	movs	r3, #2
 8003ffe:	e033      	b.n	8004068 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2240      	movs	r2, #64	@ 0x40
 8004004:	2101      	movs	r1, #1
 8004006:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2241      	movs	r2, #65	@ 0x41
 800400c:	2124      	movs	r1, #36	@ 0x24
 800400e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	2101      	movs	r1, #1
 800401c:	438a      	bics	r2, r1
 800401e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	4a11      	ldr	r2, [pc, #68]	@ (8004070 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800402c:	4013      	ands	r3, r2
 800402e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	021b      	lsls	r3, r3, #8
 8004034:	68fa      	ldr	r2, [r7, #12]
 8004036:	4313      	orrs	r3, r2
 8004038:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	68fa      	ldr	r2, [r7, #12]
 8004040:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	2101      	movs	r1, #1
 800404e:	430a      	orrs	r2, r1
 8004050:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2241      	movs	r2, #65	@ 0x41
 8004056:	2120      	movs	r1, #32
 8004058:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2240      	movs	r2, #64	@ 0x40
 800405e:	2100      	movs	r1, #0
 8004060:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004062:	2300      	movs	r3, #0
 8004064:	e000      	b.n	8004068 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004066:	2302      	movs	r3, #2
  }
}
 8004068:	0018      	movs	r0, r3
 800406a:	46bd      	mov	sp, r7
 800406c:	b004      	add	sp, #16
 800406e:	bd80      	pop	{r7, pc}
 8004070:	fffff0ff 	.word	0xfffff0ff

08004074 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b084      	sub	sp, #16
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800407c:	4b19      	ldr	r3, [pc, #100]	@ (80040e4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a19      	ldr	r2, [pc, #100]	@ (80040e8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8004082:	4013      	ands	r3, r2
 8004084:	0019      	movs	r1, r3
 8004086:	4b17      	ldr	r3, [pc, #92]	@ (80040e4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004088:	687a      	ldr	r2, [r7, #4]
 800408a:	430a      	orrs	r2, r1
 800408c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	2380      	movs	r3, #128	@ 0x80
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	429a      	cmp	r2, r3
 8004096:	d11f      	bne.n	80040d8 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8004098:	4b14      	ldr	r3, [pc, #80]	@ (80040ec <HAL_PWREx_ControlVoltageScaling+0x78>)
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	0013      	movs	r3, r2
 800409e:	005b      	lsls	r3, r3, #1
 80040a0:	189b      	adds	r3, r3, r2
 80040a2:	005b      	lsls	r3, r3, #1
 80040a4:	4912      	ldr	r1, [pc, #72]	@ (80040f0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80040a6:	0018      	movs	r0, r3
 80040a8:	f7fc f840 	bl	800012c <__udivsi3>
 80040ac:	0003      	movs	r3, r0
 80040ae:	3301      	adds	r3, #1
 80040b0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80040b2:	e008      	b.n	80040c6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d003      	beq.n	80040c2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	3b01      	subs	r3, #1
 80040be:	60fb      	str	r3, [r7, #12]
 80040c0:	e001      	b.n	80040c6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80040c2:	2303      	movs	r3, #3
 80040c4:	e009      	b.n	80040da <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80040c6:	4b07      	ldr	r3, [pc, #28]	@ (80040e4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80040c8:	695a      	ldr	r2, [r3, #20]
 80040ca:	2380      	movs	r3, #128	@ 0x80
 80040cc:	00db      	lsls	r3, r3, #3
 80040ce:	401a      	ands	r2, r3
 80040d0:	2380      	movs	r3, #128	@ 0x80
 80040d2:	00db      	lsls	r3, r3, #3
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d0ed      	beq.n	80040b4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80040d8:	2300      	movs	r3, #0
}
 80040da:	0018      	movs	r0, r3
 80040dc:	46bd      	mov	sp, r7
 80040de:	b004      	add	sp, #16
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	46c0      	nop			@ (mov r8, r8)
 80040e4:	40007000 	.word	0x40007000
 80040e8:	fffff9ff 	.word	0xfffff9ff
 80040ec:	20000000 	.word	0x20000000
 80040f0:	000f4240 	.word	0x000f4240

080040f4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80040f8:	4b03      	ldr	r3, [pc, #12]	@ (8004108 <LL_RCC_GetAPB1Prescaler+0x14>)
 80040fa:	689a      	ldr	r2, [r3, #8]
 80040fc:	23e0      	movs	r3, #224	@ 0xe0
 80040fe:	01db      	lsls	r3, r3, #7
 8004100:	4013      	ands	r3, r2
}
 8004102:	0018      	movs	r0, r3
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}
 8004108:	40021000 	.word	0x40021000

0800410c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b088      	sub	sp, #32
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d102      	bne.n	8004120 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	f000 fb50 	bl	80047c0 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	2201      	movs	r2, #1
 8004126:	4013      	ands	r3, r2
 8004128:	d100      	bne.n	800412c <HAL_RCC_OscConfig+0x20>
 800412a:	e07c      	b.n	8004226 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800412c:	4bc3      	ldr	r3, [pc, #780]	@ (800443c <HAL_RCC_OscConfig+0x330>)
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	2238      	movs	r2, #56	@ 0x38
 8004132:	4013      	ands	r3, r2
 8004134:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004136:	4bc1      	ldr	r3, [pc, #772]	@ (800443c <HAL_RCC_OscConfig+0x330>)
 8004138:	68db      	ldr	r3, [r3, #12]
 800413a:	2203      	movs	r2, #3
 800413c:	4013      	ands	r3, r2
 800413e:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8004140:	69bb      	ldr	r3, [r7, #24]
 8004142:	2b10      	cmp	r3, #16
 8004144:	d102      	bne.n	800414c <HAL_RCC_OscConfig+0x40>
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	2b03      	cmp	r3, #3
 800414a:	d002      	beq.n	8004152 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800414c:	69bb      	ldr	r3, [r7, #24]
 800414e:	2b08      	cmp	r3, #8
 8004150:	d10b      	bne.n	800416a <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004152:	4bba      	ldr	r3, [pc, #744]	@ (800443c <HAL_RCC_OscConfig+0x330>)
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	2380      	movs	r3, #128	@ 0x80
 8004158:	029b      	lsls	r3, r3, #10
 800415a:	4013      	ands	r3, r2
 800415c:	d062      	beq.n	8004224 <HAL_RCC_OscConfig+0x118>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d15e      	bne.n	8004224 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e32a      	b.n	80047c0 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	685a      	ldr	r2, [r3, #4]
 800416e:	2380      	movs	r3, #128	@ 0x80
 8004170:	025b      	lsls	r3, r3, #9
 8004172:	429a      	cmp	r2, r3
 8004174:	d107      	bne.n	8004186 <HAL_RCC_OscConfig+0x7a>
 8004176:	4bb1      	ldr	r3, [pc, #708]	@ (800443c <HAL_RCC_OscConfig+0x330>)
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	4bb0      	ldr	r3, [pc, #704]	@ (800443c <HAL_RCC_OscConfig+0x330>)
 800417c:	2180      	movs	r1, #128	@ 0x80
 800417e:	0249      	lsls	r1, r1, #9
 8004180:	430a      	orrs	r2, r1
 8004182:	601a      	str	r2, [r3, #0]
 8004184:	e020      	b.n	80041c8 <HAL_RCC_OscConfig+0xbc>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	685a      	ldr	r2, [r3, #4]
 800418a:	23a0      	movs	r3, #160	@ 0xa0
 800418c:	02db      	lsls	r3, r3, #11
 800418e:	429a      	cmp	r2, r3
 8004190:	d10e      	bne.n	80041b0 <HAL_RCC_OscConfig+0xa4>
 8004192:	4baa      	ldr	r3, [pc, #680]	@ (800443c <HAL_RCC_OscConfig+0x330>)
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	4ba9      	ldr	r3, [pc, #676]	@ (800443c <HAL_RCC_OscConfig+0x330>)
 8004198:	2180      	movs	r1, #128	@ 0x80
 800419a:	02c9      	lsls	r1, r1, #11
 800419c:	430a      	orrs	r2, r1
 800419e:	601a      	str	r2, [r3, #0]
 80041a0:	4ba6      	ldr	r3, [pc, #664]	@ (800443c <HAL_RCC_OscConfig+0x330>)
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	4ba5      	ldr	r3, [pc, #660]	@ (800443c <HAL_RCC_OscConfig+0x330>)
 80041a6:	2180      	movs	r1, #128	@ 0x80
 80041a8:	0249      	lsls	r1, r1, #9
 80041aa:	430a      	orrs	r2, r1
 80041ac:	601a      	str	r2, [r3, #0]
 80041ae:	e00b      	b.n	80041c8 <HAL_RCC_OscConfig+0xbc>
 80041b0:	4ba2      	ldr	r3, [pc, #648]	@ (800443c <HAL_RCC_OscConfig+0x330>)
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	4ba1      	ldr	r3, [pc, #644]	@ (800443c <HAL_RCC_OscConfig+0x330>)
 80041b6:	49a2      	ldr	r1, [pc, #648]	@ (8004440 <HAL_RCC_OscConfig+0x334>)
 80041b8:	400a      	ands	r2, r1
 80041ba:	601a      	str	r2, [r3, #0]
 80041bc:	4b9f      	ldr	r3, [pc, #636]	@ (800443c <HAL_RCC_OscConfig+0x330>)
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	4b9e      	ldr	r3, [pc, #632]	@ (800443c <HAL_RCC_OscConfig+0x330>)
 80041c2:	49a0      	ldr	r1, [pc, #640]	@ (8004444 <HAL_RCC_OscConfig+0x338>)
 80041c4:	400a      	ands	r2, r1
 80041c6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d014      	beq.n	80041fa <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041d0:	f7fe fe8a 	bl	8002ee8 <HAL_GetTick>
 80041d4:	0003      	movs	r3, r0
 80041d6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041d8:	e008      	b.n	80041ec <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041da:	f7fe fe85 	bl	8002ee8 <HAL_GetTick>
 80041de:	0002      	movs	r2, r0
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	1ad3      	subs	r3, r2, r3
 80041e4:	2b64      	cmp	r3, #100	@ 0x64
 80041e6:	d901      	bls.n	80041ec <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 80041e8:	2303      	movs	r3, #3
 80041ea:	e2e9      	b.n	80047c0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041ec:	4b93      	ldr	r3, [pc, #588]	@ (800443c <HAL_RCC_OscConfig+0x330>)
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	2380      	movs	r3, #128	@ 0x80
 80041f2:	029b      	lsls	r3, r3, #10
 80041f4:	4013      	ands	r3, r2
 80041f6:	d0f0      	beq.n	80041da <HAL_RCC_OscConfig+0xce>
 80041f8:	e015      	b.n	8004226 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041fa:	f7fe fe75 	bl	8002ee8 <HAL_GetTick>
 80041fe:	0003      	movs	r3, r0
 8004200:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004202:	e008      	b.n	8004216 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004204:	f7fe fe70 	bl	8002ee8 <HAL_GetTick>
 8004208:	0002      	movs	r2, r0
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	2b64      	cmp	r3, #100	@ 0x64
 8004210:	d901      	bls.n	8004216 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8004212:	2303      	movs	r3, #3
 8004214:	e2d4      	b.n	80047c0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004216:	4b89      	ldr	r3, [pc, #548]	@ (800443c <HAL_RCC_OscConfig+0x330>)
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	2380      	movs	r3, #128	@ 0x80
 800421c:	029b      	lsls	r3, r3, #10
 800421e:	4013      	ands	r3, r2
 8004220:	d1f0      	bne.n	8004204 <HAL_RCC_OscConfig+0xf8>
 8004222:	e000      	b.n	8004226 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004224:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	2202      	movs	r2, #2
 800422c:	4013      	ands	r3, r2
 800422e:	d100      	bne.n	8004232 <HAL_RCC_OscConfig+0x126>
 8004230:	e099      	b.n	8004366 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004232:	4b82      	ldr	r3, [pc, #520]	@ (800443c <HAL_RCC_OscConfig+0x330>)
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	2238      	movs	r2, #56	@ 0x38
 8004238:	4013      	ands	r3, r2
 800423a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800423c:	4b7f      	ldr	r3, [pc, #508]	@ (800443c <HAL_RCC_OscConfig+0x330>)
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	2203      	movs	r2, #3
 8004242:	4013      	ands	r3, r2
 8004244:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8004246:	69bb      	ldr	r3, [r7, #24]
 8004248:	2b10      	cmp	r3, #16
 800424a:	d102      	bne.n	8004252 <HAL_RCC_OscConfig+0x146>
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	2b02      	cmp	r3, #2
 8004250:	d002      	beq.n	8004258 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8004252:	69bb      	ldr	r3, [r7, #24]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d135      	bne.n	80042c4 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004258:	4b78      	ldr	r3, [pc, #480]	@ (800443c <HAL_RCC_OscConfig+0x330>)
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	2380      	movs	r3, #128	@ 0x80
 800425e:	00db      	lsls	r3, r3, #3
 8004260:	4013      	ands	r3, r2
 8004262:	d005      	beq.n	8004270 <HAL_RCC_OscConfig+0x164>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d101      	bne.n	8004270 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	e2a7      	b.n	80047c0 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004270:	4b72      	ldr	r3, [pc, #456]	@ (800443c <HAL_RCC_OscConfig+0x330>)
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	4a74      	ldr	r2, [pc, #464]	@ (8004448 <HAL_RCC_OscConfig+0x33c>)
 8004276:	4013      	ands	r3, r2
 8004278:	0019      	movs	r1, r3
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	695b      	ldr	r3, [r3, #20]
 800427e:	021a      	lsls	r2, r3, #8
 8004280:	4b6e      	ldr	r3, [pc, #440]	@ (800443c <HAL_RCC_OscConfig+0x330>)
 8004282:	430a      	orrs	r2, r1
 8004284:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004286:	69bb      	ldr	r3, [r7, #24]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d112      	bne.n	80042b2 <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800428c:	4b6b      	ldr	r3, [pc, #428]	@ (800443c <HAL_RCC_OscConfig+0x330>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a6e      	ldr	r2, [pc, #440]	@ (800444c <HAL_RCC_OscConfig+0x340>)
 8004292:	4013      	ands	r3, r2
 8004294:	0019      	movs	r1, r3
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	691a      	ldr	r2, [r3, #16]
 800429a:	4b68      	ldr	r3, [pc, #416]	@ (800443c <HAL_RCC_OscConfig+0x330>)
 800429c:	430a      	orrs	r2, r1
 800429e:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80042a0:	4b66      	ldr	r3, [pc, #408]	@ (800443c <HAL_RCC_OscConfig+0x330>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	0adb      	lsrs	r3, r3, #11
 80042a6:	2207      	movs	r2, #7
 80042a8:	4013      	ands	r3, r2
 80042aa:	4a69      	ldr	r2, [pc, #420]	@ (8004450 <HAL_RCC_OscConfig+0x344>)
 80042ac:	40da      	lsrs	r2, r3
 80042ae:	4b69      	ldr	r3, [pc, #420]	@ (8004454 <HAL_RCC_OscConfig+0x348>)
 80042b0:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80042b2:	4b69      	ldr	r3, [pc, #420]	@ (8004458 <HAL_RCC_OscConfig+0x34c>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	0018      	movs	r0, r3
 80042b8:	f7fe fdba 	bl	8002e30 <HAL_InitTick>
 80042bc:	1e03      	subs	r3, r0, #0
 80042be:	d051      	beq.n	8004364 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	e27d      	b.n	80047c0 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d030      	beq.n	800432e <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80042cc:	4b5b      	ldr	r3, [pc, #364]	@ (800443c <HAL_RCC_OscConfig+0x330>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a5e      	ldr	r2, [pc, #376]	@ (800444c <HAL_RCC_OscConfig+0x340>)
 80042d2:	4013      	ands	r3, r2
 80042d4:	0019      	movs	r1, r3
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	691a      	ldr	r2, [r3, #16]
 80042da:	4b58      	ldr	r3, [pc, #352]	@ (800443c <HAL_RCC_OscConfig+0x330>)
 80042dc:	430a      	orrs	r2, r1
 80042de:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80042e0:	4b56      	ldr	r3, [pc, #344]	@ (800443c <HAL_RCC_OscConfig+0x330>)
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	4b55      	ldr	r3, [pc, #340]	@ (800443c <HAL_RCC_OscConfig+0x330>)
 80042e6:	2180      	movs	r1, #128	@ 0x80
 80042e8:	0049      	lsls	r1, r1, #1
 80042ea:	430a      	orrs	r2, r1
 80042ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042ee:	f7fe fdfb 	bl	8002ee8 <HAL_GetTick>
 80042f2:	0003      	movs	r3, r0
 80042f4:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042f6:	e008      	b.n	800430a <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042f8:	f7fe fdf6 	bl	8002ee8 <HAL_GetTick>
 80042fc:	0002      	movs	r2, r0
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	1ad3      	subs	r3, r2, r3
 8004302:	2b02      	cmp	r3, #2
 8004304:	d901      	bls.n	800430a <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8004306:	2303      	movs	r3, #3
 8004308:	e25a      	b.n	80047c0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800430a:	4b4c      	ldr	r3, [pc, #304]	@ (800443c <HAL_RCC_OscConfig+0x330>)
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	2380      	movs	r3, #128	@ 0x80
 8004310:	00db      	lsls	r3, r3, #3
 8004312:	4013      	ands	r3, r2
 8004314:	d0f0      	beq.n	80042f8 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004316:	4b49      	ldr	r3, [pc, #292]	@ (800443c <HAL_RCC_OscConfig+0x330>)
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	4a4b      	ldr	r2, [pc, #300]	@ (8004448 <HAL_RCC_OscConfig+0x33c>)
 800431c:	4013      	ands	r3, r2
 800431e:	0019      	movs	r1, r3
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	695b      	ldr	r3, [r3, #20]
 8004324:	021a      	lsls	r2, r3, #8
 8004326:	4b45      	ldr	r3, [pc, #276]	@ (800443c <HAL_RCC_OscConfig+0x330>)
 8004328:	430a      	orrs	r2, r1
 800432a:	605a      	str	r2, [r3, #4]
 800432c:	e01b      	b.n	8004366 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800432e:	4b43      	ldr	r3, [pc, #268]	@ (800443c <HAL_RCC_OscConfig+0x330>)
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	4b42      	ldr	r3, [pc, #264]	@ (800443c <HAL_RCC_OscConfig+0x330>)
 8004334:	4949      	ldr	r1, [pc, #292]	@ (800445c <HAL_RCC_OscConfig+0x350>)
 8004336:	400a      	ands	r2, r1
 8004338:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800433a:	f7fe fdd5 	bl	8002ee8 <HAL_GetTick>
 800433e:	0003      	movs	r3, r0
 8004340:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004342:	e008      	b.n	8004356 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004344:	f7fe fdd0 	bl	8002ee8 <HAL_GetTick>
 8004348:	0002      	movs	r2, r0
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	2b02      	cmp	r3, #2
 8004350:	d901      	bls.n	8004356 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8004352:	2303      	movs	r3, #3
 8004354:	e234      	b.n	80047c0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004356:	4b39      	ldr	r3, [pc, #228]	@ (800443c <HAL_RCC_OscConfig+0x330>)
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	2380      	movs	r3, #128	@ 0x80
 800435c:	00db      	lsls	r3, r3, #3
 800435e:	4013      	ands	r3, r2
 8004360:	d1f0      	bne.n	8004344 <HAL_RCC_OscConfig+0x238>
 8004362:	e000      	b.n	8004366 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004364:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	2208      	movs	r2, #8
 800436c:	4013      	ands	r3, r2
 800436e:	d047      	beq.n	8004400 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004370:	4b32      	ldr	r3, [pc, #200]	@ (800443c <HAL_RCC_OscConfig+0x330>)
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	2238      	movs	r2, #56	@ 0x38
 8004376:	4013      	ands	r3, r2
 8004378:	2b18      	cmp	r3, #24
 800437a:	d10a      	bne.n	8004392 <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800437c:	4b2f      	ldr	r3, [pc, #188]	@ (800443c <HAL_RCC_OscConfig+0x330>)
 800437e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004380:	2202      	movs	r2, #2
 8004382:	4013      	ands	r3, r2
 8004384:	d03c      	beq.n	8004400 <HAL_RCC_OscConfig+0x2f4>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	699b      	ldr	r3, [r3, #24]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d138      	bne.n	8004400 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e216      	b.n	80047c0 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	699b      	ldr	r3, [r3, #24]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d019      	beq.n	80043ce <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800439a:	4b28      	ldr	r3, [pc, #160]	@ (800443c <HAL_RCC_OscConfig+0x330>)
 800439c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800439e:	4b27      	ldr	r3, [pc, #156]	@ (800443c <HAL_RCC_OscConfig+0x330>)
 80043a0:	2101      	movs	r1, #1
 80043a2:	430a      	orrs	r2, r1
 80043a4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043a6:	f7fe fd9f 	bl	8002ee8 <HAL_GetTick>
 80043aa:	0003      	movs	r3, r0
 80043ac:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80043ae:	e008      	b.n	80043c2 <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043b0:	f7fe fd9a 	bl	8002ee8 <HAL_GetTick>
 80043b4:	0002      	movs	r2, r0
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	2b02      	cmp	r3, #2
 80043bc:	d901      	bls.n	80043c2 <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 80043be:	2303      	movs	r3, #3
 80043c0:	e1fe      	b.n	80047c0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80043c2:	4b1e      	ldr	r3, [pc, #120]	@ (800443c <HAL_RCC_OscConfig+0x330>)
 80043c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043c6:	2202      	movs	r2, #2
 80043c8:	4013      	ands	r3, r2
 80043ca:	d0f1      	beq.n	80043b0 <HAL_RCC_OscConfig+0x2a4>
 80043cc:	e018      	b.n	8004400 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80043ce:	4b1b      	ldr	r3, [pc, #108]	@ (800443c <HAL_RCC_OscConfig+0x330>)
 80043d0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80043d2:	4b1a      	ldr	r3, [pc, #104]	@ (800443c <HAL_RCC_OscConfig+0x330>)
 80043d4:	2101      	movs	r1, #1
 80043d6:	438a      	bics	r2, r1
 80043d8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043da:	f7fe fd85 	bl	8002ee8 <HAL_GetTick>
 80043de:	0003      	movs	r3, r0
 80043e0:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80043e2:	e008      	b.n	80043f6 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043e4:	f7fe fd80 	bl	8002ee8 <HAL_GetTick>
 80043e8:	0002      	movs	r2, r0
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	2b02      	cmp	r3, #2
 80043f0:	d901      	bls.n	80043f6 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 80043f2:	2303      	movs	r3, #3
 80043f4:	e1e4      	b.n	80047c0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80043f6:	4b11      	ldr	r3, [pc, #68]	@ (800443c <HAL_RCC_OscConfig+0x330>)
 80043f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043fa:	2202      	movs	r2, #2
 80043fc:	4013      	ands	r3, r2
 80043fe:	d1f1      	bne.n	80043e4 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	2204      	movs	r2, #4
 8004406:	4013      	ands	r3, r2
 8004408:	d100      	bne.n	800440c <HAL_RCC_OscConfig+0x300>
 800440a:	e0c7      	b.n	800459c <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 800440c:	231f      	movs	r3, #31
 800440e:	18fb      	adds	r3, r7, r3
 8004410:	2200      	movs	r2, #0
 8004412:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004414:	4b09      	ldr	r3, [pc, #36]	@ (800443c <HAL_RCC_OscConfig+0x330>)
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	2238      	movs	r2, #56	@ 0x38
 800441a:	4013      	ands	r3, r2
 800441c:	2b20      	cmp	r3, #32
 800441e:	d11f      	bne.n	8004460 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8004420:	4b06      	ldr	r3, [pc, #24]	@ (800443c <HAL_RCC_OscConfig+0x330>)
 8004422:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004424:	2202      	movs	r2, #2
 8004426:	4013      	ands	r3, r2
 8004428:	d100      	bne.n	800442c <HAL_RCC_OscConfig+0x320>
 800442a:	e0b7      	b.n	800459c <HAL_RCC_OscConfig+0x490>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d000      	beq.n	8004436 <HAL_RCC_OscConfig+0x32a>
 8004434:	e0b2      	b.n	800459c <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e1c2      	b.n	80047c0 <HAL_RCC_OscConfig+0x6b4>
 800443a:	46c0      	nop			@ (mov r8, r8)
 800443c:	40021000 	.word	0x40021000
 8004440:	fffeffff 	.word	0xfffeffff
 8004444:	fffbffff 	.word	0xfffbffff
 8004448:	ffff80ff 	.word	0xffff80ff
 800444c:	ffffc7ff 	.word	0xffffc7ff
 8004450:	00f42400 	.word	0x00f42400
 8004454:	20000000 	.word	0x20000000
 8004458:	20000004 	.word	0x20000004
 800445c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004460:	4bb5      	ldr	r3, [pc, #724]	@ (8004738 <HAL_RCC_OscConfig+0x62c>)
 8004462:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004464:	2380      	movs	r3, #128	@ 0x80
 8004466:	055b      	lsls	r3, r3, #21
 8004468:	4013      	ands	r3, r2
 800446a:	d101      	bne.n	8004470 <HAL_RCC_OscConfig+0x364>
 800446c:	2301      	movs	r3, #1
 800446e:	e000      	b.n	8004472 <HAL_RCC_OscConfig+0x366>
 8004470:	2300      	movs	r3, #0
 8004472:	2b00      	cmp	r3, #0
 8004474:	d011      	beq.n	800449a <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004476:	4bb0      	ldr	r3, [pc, #704]	@ (8004738 <HAL_RCC_OscConfig+0x62c>)
 8004478:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800447a:	4baf      	ldr	r3, [pc, #700]	@ (8004738 <HAL_RCC_OscConfig+0x62c>)
 800447c:	2180      	movs	r1, #128	@ 0x80
 800447e:	0549      	lsls	r1, r1, #21
 8004480:	430a      	orrs	r2, r1
 8004482:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004484:	4bac      	ldr	r3, [pc, #688]	@ (8004738 <HAL_RCC_OscConfig+0x62c>)
 8004486:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004488:	2380      	movs	r3, #128	@ 0x80
 800448a:	055b      	lsls	r3, r3, #21
 800448c:	4013      	ands	r3, r2
 800448e:	60fb      	str	r3, [r7, #12]
 8004490:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8004492:	231f      	movs	r3, #31
 8004494:	18fb      	adds	r3, r7, r3
 8004496:	2201      	movs	r2, #1
 8004498:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800449a:	4ba8      	ldr	r3, [pc, #672]	@ (800473c <HAL_RCC_OscConfig+0x630>)
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	2380      	movs	r3, #128	@ 0x80
 80044a0:	005b      	lsls	r3, r3, #1
 80044a2:	4013      	ands	r3, r2
 80044a4:	d11a      	bne.n	80044dc <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80044a6:	4ba5      	ldr	r3, [pc, #660]	@ (800473c <HAL_RCC_OscConfig+0x630>)
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	4ba4      	ldr	r3, [pc, #656]	@ (800473c <HAL_RCC_OscConfig+0x630>)
 80044ac:	2180      	movs	r1, #128	@ 0x80
 80044ae:	0049      	lsls	r1, r1, #1
 80044b0:	430a      	orrs	r2, r1
 80044b2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80044b4:	f7fe fd18 	bl	8002ee8 <HAL_GetTick>
 80044b8:	0003      	movs	r3, r0
 80044ba:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044bc:	e008      	b.n	80044d0 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044be:	f7fe fd13 	bl	8002ee8 <HAL_GetTick>
 80044c2:	0002      	movs	r2, r0
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	1ad3      	subs	r3, r2, r3
 80044c8:	2b02      	cmp	r3, #2
 80044ca:	d901      	bls.n	80044d0 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 80044cc:	2303      	movs	r3, #3
 80044ce:	e177      	b.n	80047c0 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044d0:	4b9a      	ldr	r3, [pc, #616]	@ (800473c <HAL_RCC_OscConfig+0x630>)
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	2380      	movs	r3, #128	@ 0x80
 80044d6:	005b      	lsls	r3, r3, #1
 80044d8:	4013      	ands	r3, r2
 80044da:	d0f0      	beq.n	80044be <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d106      	bne.n	80044f2 <HAL_RCC_OscConfig+0x3e6>
 80044e4:	4b94      	ldr	r3, [pc, #592]	@ (8004738 <HAL_RCC_OscConfig+0x62c>)
 80044e6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80044e8:	4b93      	ldr	r3, [pc, #588]	@ (8004738 <HAL_RCC_OscConfig+0x62c>)
 80044ea:	2101      	movs	r1, #1
 80044ec:	430a      	orrs	r2, r1
 80044ee:	65da      	str	r2, [r3, #92]	@ 0x5c
 80044f0:	e01c      	b.n	800452c <HAL_RCC_OscConfig+0x420>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	2b05      	cmp	r3, #5
 80044f8:	d10c      	bne.n	8004514 <HAL_RCC_OscConfig+0x408>
 80044fa:	4b8f      	ldr	r3, [pc, #572]	@ (8004738 <HAL_RCC_OscConfig+0x62c>)
 80044fc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80044fe:	4b8e      	ldr	r3, [pc, #568]	@ (8004738 <HAL_RCC_OscConfig+0x62c>)
 8004500:	2104      	movs	r1, #4
 8004502:	430a      	orrs	r2, r1
 8004504:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004506:	4b8c      	ldr	r3, [pc, #560]	@ (8004738 <HAL_RCC_OscConfig+0x62c>)
 8004508:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800450a:	4b8b      	ldr	r3, [pc, #556]	@ (8004738 <HAL_RCC_OscConfig+0x62c>)
 800450c:	2101      	movs	r1, #1
 800450e:	430a      	orrs	r2, r1
 8004510:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004512:	e00b      	b.n	800452c <HAL_RCC_OscConfig+0x420>
 8004514:	4b88      	ldr	r3, [pc, #544]	@ (8004738 <HAL_RCC_OscConfig+0x62c>)
 8004516:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004518:	4b87      	ldr	r3, [pc, #540]	@ (8004738 <HAL_RCC_OscConfig+0x62c>)
 800451a:	2101      	movs	r1, #1
 800451c:	438a      	bics	r2, r1
 800451e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004520:	4b85      	ldr	r3, [pc, #532]	@ (8004738 <HAL_RCC_OscConfig+0x62c>)
 8004522:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004524:	4b84      	ldr	r3, [pc, #528]	@ (8004738 <HAL_RCC_OscConfig+0x62c>)
 8004526:	2104      	movs	r1, #4
 8004528:	438a      	bics	r2, r1
 800452a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d014      	beq.n	800455e <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004534:	f7fe fcd8 	bl	8002ee8 <HAL_GetTick>
 8004538:	0003      	movs	r3, r0
 800453a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800453c:	e009      	b.n	8004552 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800453e:	f7fe fcd3 	bl	8002ee8 <HAL_GetTick>
 8004542:	0002      	movs	r2, r0
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	1ad3      	subs	r3, r2, r3
 8004548:	4a7d      	ldr	r2, [pc, #500]	@ (8004740 <HAL_RCC_OscConfig+0x634>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d901      	bls.n	8004552 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 800454e:	2303      	movs	r3, #3
 8004550:	e136      	b.n	80047c0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004552:	4b79      	ldr	r3, [pc, #484]	@ (8004738 <HAL_RCC_OscConfig+0x62c>)
 8004554:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004556:	2202      	movs	r2, #2
 8004558:	4013      	ands	r3, r2
 800455a:	d0f0      	beq.n	800453e <HAL_RCC_OscConfig+0x432>
 800455c:	e013      	b.n	8004586 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800455e:	f7fe fcc3 	bl	8002ee8 <HAL_GetTick>
 8004562:	0003      	movs	r3, r0
 8004564:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004566:	e009      	b.n	800457c <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004568:	f7fe fcbe 	bl	8002ee8 <HAL_GetTick>
 800456c:	0002      	movs	r2, r0
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	1ad3      	subs	r3, r2, r3
 8004572:	4a73      	ldr	r2, [pc, #460]	@ (8004740 <HAL_RCC_OscConfig+0x634>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d901      	bls.n	800457c <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8004578:	2303      	movs	r3, #3
 800457a:	e121      	b.n	80047c0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800457c:	4b6e      	ldr	r3, [pc, #440]	@ (8004738 <HAL_RCC_OscConfig+0x62c>)
 800457e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004580:	2202      	movs	r2, #2
 8004582:	4013      	ands	r3, r2
 8004584:	d1f0      	bne.n	8004568 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004586:	231f      	movs	r3, #31
 8004588:	18fb      	adds	r3, r7, r3
 800458a:	781b      	ldrb	r3, [r3, #0]
 800458c:	2b01      	cmp	r3, #1
 800458e:	d105      	bne.n	800459c <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004590:	4b69      	ldr	r3, [pc, #420]	@ (8004738 <HAL_RCC_OscConfig+0x62c>)
 8004592:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004594:	4b68      	ldr	r3, [pc, #416]	@ (8004738 <HAL_RCC_OscConfig+0x62c>)
 8004596:	496b      	ldr	r1, [pc, #428]	@ (8004744 <HAL_RCC_OscConfig+0x638>)
 8004598:	400a      	ands	r2, r1
 800459a:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	2220      	movs	r2, #32
 80045a2:	4013      	ands	r3, r2
 80045a4:	d039      	beq.n	800461a <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	69db      	ldr	r3, [r3, #28]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d01b      	beq.n	80045e6 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80045ae:	4b62      	ldr	r3, [pc, #392]	@ (8004738 <HAL_RCC_OscConfig+0x62c>)
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	4b61      	ldr	r3, [pc, #388]	@ (8004738 <HAL_RCC_OscConfig+0x62c>)
 80045b4:	2180      	movs	r1, #128	@ 0x80
 80045b6:	03c9      	lsls	r1, r1, #15
 80045b8:	430a      	orrs	r2, r1
 80045ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045bc:	f7fe fc94 	bl	8002ee8 <HAL_GetTick>
 80045c0:	0003      	movs	r3, r0
 80045c2:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80045c4:	e008      	b.n	80045d8 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80045c6:	f7fe fc8f 	bl	8002ee8 <HAL_GetTick>
 80045ca:	0002      	movs	r2, r0
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	1ad3      	subs	r3, r2, r3
 80045d0:	2b02      	cmp	r3, #2
 80045d2:	d901      	bls.n	80045d8 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 80045d4:	2303      	movs	r3, #3
 80045d6:	e0f3      	b.n	80047c0 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80045d8:	4b57      	ldr	r3, [pc, #348]	@ (8004738 <HAL_RCC_OscConfig+0x62c>)
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	2380      	movs	r3, #128	@ 0x80
 80045de:	041b      	lsls	r3, r3, #16
 80045e0:	4013      	ands	r3, r2
 80045e2:	d0f0      	beq.n	80045c6 <HAL_RCC_OscConfig+0x4ba>
 80045e4:	e019      	b.n	800461a <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80045e6:	4b54      	ldr	r3, [pc, #336]	@ (8004738 <HAL_RCC_OscConfig+0x62c>)
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	4b53      	ldr	r3, [pc, #332]	@ (8004738 <HAL_RCC_OscConfig+0x62c>)
 80045ec:	4956      	ldr	r1, [pc, #344]	@ (8004748 <HAL_RCC_OscConfig+0x63c>)
 80045ee:	400a      	ands	r2, r1
 80045f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045f2:	f7fe fc79 	bl	8002ee8 <HAL_GetTick>
 80045f6:	0003      	movs	r3, r0
 80045f8:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80045fa:	e008      	b.n	800460e <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80045fc:	f7fe fc74 	bl	8002ee8 <HAL_GetTick>
 8004600:	0002      	movs	r2, r0
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	1ad3      	subs	r3, r2, r3
 8004606:	2b02      	cmp	r3, #2
 8004608:	d901      	bls.n	800460e <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 800460a:	2303      	movs	r3, #3
 800460c:	e0d8      	b.n	80047c0 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800460e:	4b4a      	ldr	r3, [pc, #296]	@ (8004738 <HAL_RCC_OscConfig+0x62c>)
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	2380      	movs	r3, #128	@ 0x80
 8004614:	041b      	lsls	r3, r3, #16
 8004616:	4013      	ands	r3, r2
 8004618:	d1f0      	bne.n	80045fc <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6a1b      	ldr	r3, [r3, #32]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d100      	bne.n	8004624 <HAL_RCC_OscConfig+0x518>
 8004622:	e0cc      	b.n	80047be <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004624:	4b44      	ldr	r3, [pc, #272]	@ (8004738 <HAL_RCC_OscConfig+0x62c>)
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	2238      	movs	r2, #56	@ 0x38
 800462a:	4013      	ands	r3, r2
 800462c:	2b10      	cmp	r3, #16
 800462e:	d100      	bne.n	8004632 <HAL_RCC_OscConfig+0x526>
 8004630:	e07b      	b.n	800472a <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6a1b      	ldr	r3, [r3, #32]
 8004636:	2b02      	cmp	r3, #2
 8004638:	d156      	bne.n	80046e8 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800463a:	4b3f      	ldr	r3, [pc, #252]	@ (8004738 <HAL_RCC_OscConfig+0x62c>)
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	4b3e      	ldr	r3, [pc, #248]	@ (8004738 <HAL_RCC_OscConfig+0x62c>)
 8004640:	4942      	ldr	r1, [pc, #264]	@ (800474c <HAL_RCC_OscConfig+0x640>)
 8004642:	400a      	ands	r2, r1
 8004644:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004646:	f7fe fc4f 	bl	8002ee8 <HAL_GetTick>
 800464a:	0003      	movs	r3, r0
 800464c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800464e:	e008      	b.n	8004662 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004650:	f7fe fc4a 	bl	8002ee8 <HAL_GetTick>
 8004654:	0002      	movs	r2, r0
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	1ad3      	subs	r3, r2, r3
 800465a:	2b02      	cmp	r3, #2
 800465c:	d901      	bls.n	8004662 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 800465e:	2303      	movs	r3, #3
 8004660:	e0ae      	b.n	80047c0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004662:	4b35      	ldr	r3, [pc, #212]	@ (8004738 <HAL_RCC_OscConfig+0x62c>)
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	2380      	movs	r3, #128	@ 0x80
 8004668:	049b      	lsls	r3, r3, #18
 800466a:	4013      	ands	r3, r2
 800466c:	d1f0      	bne.n	8004650 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800466e:	4b32      	ldr	r3, [pc, #200]	@ (8004738 <HAL_RCC_OscConfig+0x62c>)
 8004670:	68db      	ldr	r3, [r3, #12]
 8004672:	4a37      	ldr	r2, [pc, #220]	@ (8004750 <HAL_RCC_OscConfig+0x644>)
 8004674:	4013      	ands	r3, r2
 8004676:	0019      	movs	r1, r3
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004680:	431a      	orrs	r2, r3
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004686:	021b      	lsls	r3, r3, #8
 8004688:	431a      	orrs	r2, r3
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800468e:	431a      	orrs	r2, r3
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004694:	431a      	orrs	r2, r3
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800469a:	431a      	orrs	r2, r3
 800469c:	4b26      	ldr	r3, [pc, #152]	@ (8004738 <HAL_RCC_OscConfig+0x62c>)
 800469e:	430a      	orrs	r2, r1
 80046a0:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046a2:	4b25      	ldr	r3, [pc, #148]	@ (8004738 <HAL_RCC_OscConfig+0x62c>)
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	4b24      	ldr	r3, [pc, #144]	@ (8004738 <HAL_RCC_OscConfig+0x62c>)
 80046a8:	2180      	movs	r1, #128	@ 0x80
 80046aa:	0449      	lsls	r1, r1, #17
 80046ac:	430a      	orrs	r2, r1
 80046ae:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80046b0:	4b21      	ldr	r3, [pc, #132]	@ (8004738 <HAL_RCC_OscConfig+0x62c>)
 80046b2:	68da      	ldr	r2, [r3, #12]
 80046b4:	4b20      	ldr	r3, [pc, #128]	@ (8004738 <HAL_RCC_OscConfig+0x62c>)
 80046b6:	2180      	movs	r1, #128	@ 0x80
 80046b8:	0549      	lsls	r1, r1, #21
 80046ba:	430a      	orrs	r2, r1
 80046bc:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046be:	f7fe fc13 	bl	8002ee8 <HAL_GetTick>
 80046c2:	0003      	movs	r3, r0
 80046c4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046c6:	e008      	b.n	80046da <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046c8:	f7fe fc0e 	bl	8002ee8 <HAL_GetTick>
 80046cc:	0002      	movs	r2, r0
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	1ad3      	subs	r3, r2, r3
 80046d2:	2b02      	cmp	r3, #2
 80046d4:	d901      	bls.n	80046da <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 80046d6:	2303      	movs	r3, #3
 80046d8:	e072      	b.n	80047c0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046da:	4b17      	ldr	r3, [pc, #92]	@ (8004738 <HAL_RCC_OscConfig+0x62c>)
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	2380      	movs	r3, #128	@ 0x80
 80046e0:	049b      	lsls	r3, r3, #18
 80046e2:	4013      	ands	r3, r2
 80046e4:	d0f0      	beq.n	80046c8 <HAL_RCC_OscConfig+0x5bc>
 80046e6:	e06a      	b.n	80047be <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046e8:	4b13      	ldr	r3, [pc, #76]	@ (8004738 <HAL_RCC_OscConfig+0x62c>)
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	4b12      	ldr	r3, [pc, #72]	@ (8004738 <HAL_RCC_OscConfig+0x62c>)
 80046ee:	4917      	ldr	r1, [pc, #92]	@ (800474c <HAL_RCC_OscConfig+0x640>)
 80046f0:	400a      	ands	r2, r1
 80046f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046f4:	f7fe fbf8 	bl	8002ee8 <HAL_GetTick>
 80046f8:	0003      	movs	r3, r0
 80046fa:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046fc:	e008      	b.n	8004710 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046fe:	f7fe fbf3 	bl	8002ee8 <HAL_GetTick>
 8004702:	0002      	movs	r2, r0
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	1ad3      	subs	r3, r2, r3
 8004708:	2b02      	cmp	r3, #2
 800470a:	d901      	bls.n	8004710 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 800470c:	2303      	movs	r3, #3
 800470e:	e057      	b.n	80047c0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004710:	4b09      	ldr	r3, [pc, #36]	@ (8004738 <HAL_RCC_OscConfig+0x62c>)
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	2380      	movs	r3, #128	@ 0x80
 8004716:	049b      	lsls	r3, r3, #18
 8004718:	4013      	ands	r3, r2
 800471a:	d1f0      	bne.n	80046fe <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800471c:	4b06      	ldr	r3, [pc, #24]	@ (8004738 <HAL_RCC_OscConfig+0x62c>)
 800471e:	68da      	ldr	r2, [r3, #12]
 8004720:	4b05      	ldr	r3, [pc, #20]	@ (8004738 <HAL_RCC_OscConfig+0x62c>)
 8004722:	490c      	ldr	r1, [pc, #48]	@ (8004754 <HAL_RCC_OscConfig+0x648>)
 8004724:	400a      	ands	r2, r1
 8004726:	60da      	str	r2, [r3, #12]
 8004728:	e049      	b.n	80047be <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6a1b      	ldr	r3, [r3, #32]
 800472e:	2b01      	cmp	r3, #1
 8004730:	d112      	bne.n	8004758 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	e044      	b.n	80047c0 <HAL_RCC_OscConfig+0x6b4>
 8004736:	46c0      	nop			@ (mov r8, r8)
 8004738:	40021000 	.word	0x40021000
 800473c:	40007000 	.word	0x40007000
 8004740:	00001388 	.word	0x00001388
 8004744:	efffffff 	.word	0xefffffff
 8004748:	ffbfffff 	.word	0xffbfffff
 800474c:	feffffff 	.word	0xfeffffff
 8004750:	11c1808c 	.word	0x11c1808c
 8004754:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8004758:	4b1b      	ldr	r3, [pc, #108]	@ (80047c8 <HAL_RCC_OscConfig+0x6bc>)
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	2203      	movs	r2, #3
 8004762:	401a      	ands	r2, r3
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004768:	429a      	cmp	r2, r3
 800476a:	d126      	bne.n	80047ba <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	2270      	movs	r2, #112	@ 0x70
 8004770:	401a      	ands	r2, r3
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004776:	429a      	cmp	r2, r3
 8004778:	d11f      	bne.n	80047ba <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800477a:	697a      	ldr	r2, [r7, #20]
 800477c:	23fe      	movs	r3, #254	@ 0xfe
 800477e:	01db      	lsls	r3, r3, #7
 8004780:	401a      	ands	r2, r3
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004786:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004788:	429a      	cmp	r2, r3
 800478a:	d116      	bne.n	80047ba <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800478c:	697a      	ldr	r2, [r7, #20]
 800478e:	23f8      	movs	r3, #248	@ 0xf8
 8004790:	039b      	lsls	r3, r3, #14
 8004792:	401a      	ands	r2, r3
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004798:	429a      	cmp	r2, r3
 800479a:	d10e      	bne.n	80047ba <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800479c:	697a      	ldr	r2, [r7, #20]
 800479e:	23e0      	movs	r3, #224	@ 0xe0
 80047a0:	051b      	lsls	r3, r3, #20
 80047a2:	401a      	ands	r2, r3
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d106      	bne.n	80047ba <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	0f5b      	lsrs	r3, r3, #29
 80047b0:	075a      	lsls	r2, r3, #29
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d001      	beq.n	80047be <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	e000      	b.n	80047c0 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 80047be:	2300      	movs	r3, #0
}
 80047c0:	0018      	movs	r0, r3
 80047c2:	46bd      	mov	sp, r7
 80047c4:	b008      	add	sp, #32
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	40021000 	.word	0x40021000

080047cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b084      	sub	sp, #16
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
 80047d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d101      	bne.n	80047e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	e0e9      	b.n	80049b4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80047e0:	4b76      	ldr	r3, [pc, #472]	@ (80049bc <HAL_RCC_ClockConfig+0x1f0>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	2207      	movs	r2, #7
 80047e6:	4013      	ands	r3, r2
 80047e8:	683a      	ldr	r2, [r7, #0]
 80047ea:	429a      	cmp	r2, r3
 80047ec:	d91e      	bls.n	800482c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047ee:	4b73      	ldr	r3, [pc, #460]	@ (80049bc <HAL_RCC_ClockConfig+0x1f0>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	2207      	movs	r2, #7
 80047f4:	4393      	bics	r3, r2
 80047f6:	0019      	movs	r1, r3
 80047f8:	4b70      	ldr	r3, [pc, #448]	@ (80049bc <HAL_RCC_ClockConfig+0x1f0>)
 80047fa:	683a      	ldr	r2, [r7, #0]
 80047fc:	430a      	orrs	r2, r1
 80047fe:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004800:	f7fe fb72 	bl	8002ee8 <HAL_GetTick>
 8004804:	0003      	movs	r3, r0
 8004806:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004808:	e009      	b.n	800481e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800480a:	f7fe fb6d 	bl	8002ee8 <HAL_GetTick>
 800480e:	0002      	movs	r2, r0
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	1ad3      	subs	r3, r2, r3
 8004814:	4a6a      	ldr	r2, [pc, #424]	@ (80049c0 <HAL_RCC_ClockConfig+0x1f4>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d901      	bls.n	800481e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800481a:	2303      	movs	r3, #3
 800481c:	e0ca      	b.n	80049b4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800481e:	4b67      	ldr	r3, [pc, #412]	@ (80049bc <HAL_RCC_ClockConfig+0x1f0>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2207      	movs	r2, #7
 8004824:	4013      	ands	r3, r2
 8004826:	683a      	ldr	r2, [r7, #0]
 8004828:	429a      	cmp	r2, r3
 800482a:	d1ee      	bne.n	800480a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	2202      	movs	r2, #2
 8004832:	4013      	ands	r3, r2
 8004834:	d015      	beq.n	8004862 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	2204      	movs	r2, #4
 800483c:	4013      	ands	r3, r2
 800483e:	d006      	beq.n	800484e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004840:	4b60      	ldr	r3, [pc, #384]	@ (80049c4 <HAL_RCC_ClockConfig+0x1f8>)
 8004842:	689a      	ldr	r2, [r3, #8]
 8004844:	4b5f      	ldr	r3, [pc, #380]	@ (80049c4 <HAL_RCC_ClockConfig+0x1f8>)
 8004846:	21e0      	movs	r1, #224	@ 0xe0
 8004848:	01c9      	lsls	r1, r1, #7
 800484a:	430a      	orrs	r2, r1
 800484c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800484e:	4b5d      	ldr	r3, [pc, #372]	@ (80049c4 <HAL_RCC_ClockConfig+0x1f8>)
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	4a5d      	ldr	r2, [pc, #372]	@ (80049c8 <HAL_RCC_ClockConfig+0x1fc>)
 8004854:	4013      	ands	r3, r2
 8004856:	0019      	movs	r1, r3
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	689a      	ldr	r2, [r3, #8]
 800485c:	4b59      	ldr	r3, [pc, #356]	@ (80049c4 <HAL_RCC_ClockConfig+0x1f8>)
 800485e:	430a      	orrs	r2, r1
 8004860:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	2201      	movs	r2, #1
 8004868:	4013      	ands	r3, r2
 800486a:	d057      	beq.n	800491c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	2b01      	cmp	r3, #1
 8004872:	d107      	bne.n	8004884 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004874:	4b53      	ldr	r3, [pc, #332]	@ (80049c4 <HAL_RCC_ClockConfig+0x1f8>)
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	2380      	movs	r3, #128	@ 0x80
 800487a:	029b      	lsls	r3, r3, #10
 800487c:	4013      	ands	r3, r2
 800487e:	d12b      	bne.n	80048d8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	e097      	b.n	80049b4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	2b02      	cmp	r3, #2
 800488a:	d107      	bne.n	800489c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800488c:	4b4d      	ldr	r3, [pc, #308]	@ (80049c4 <HAL_RCC_ClockConfig+0x1f8>)
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	2380      	movs	r3, #128	@ 0x80
 8004892:	049b      	lsls	r3, r3, #18
 8004894:	4013      	ands	r3, r2
 8004896:	d11f      	bne.n	80048d8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	e08b      	b.n	80049b4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d107      	bne.n	80048b4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80048a4:	4b47      	ldr	r3, [pc, #284]	@ (80049c4 <HAL_RCC_ClockConfig+0x1f8>)
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	2380      	movs	r3, #128	@ 0x80
 80048aa:	00db      	lsls	r3, r3, #3
 80048ac:	4013      	ands	r3, r2
 80048ae:	d113      	bne.n	80048d8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	e07f      	b.n	80049b4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	2b03      	cmp	r3, #3
 80048ba:	d106      	bne.n	80048ca <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80048bc:	4b41      	ldr	r3, [pc, #260]	@ (80049c4 <HAL_RCC_ClockConfig+0x1f8>)
 80048be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048c0:	2202      	movs	r2, #2
 80048c2:	4013      	ands	r3, r2
 80048c4:	d108      	bne.n	80048d8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	e074      	b.n	80049b4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048ca:	4b3e      	ldr	r3, [pc, #248]	@ (80049c4 <HAL_RCC_ClockConfig+0x1f8>)
 80048cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048ce:	2202      	movs	r2, #2
 80048d0:	4013      	ands	r3, r2
 80048d2:	d101      	bne.n	80048d8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	e06d      	b.n	80049b4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80048d8:	4b3a      	ldr	r3, [pc, #232]	@ (80049c4 <HAL_RCC_ClockConfig+0x1f8>)
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	2207      	movs	r2, #7
 80048de:	4393      	bics	r3, r2
 80048e0:	0019      	movs	r1, r3
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	685a      	ldr	r2, [r3, #4]
 80048e6:	4b37      	ldr	r3, [pc, #220]	@ (80049c4 <HAL_RCC_ClockConfig+0x1f8>)
 80048e8:	430a      	orrs	r2, r1
 80048ea:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048ec:	f7fe fafc 	bl	8002ee8 <HAL_GetTick>
 80048f0:	0003      	movs	r3, r0
 80048f2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048f4:	e009      	b.n	800490a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048f6:	f7fe faf7 	bl	8002ee8 <HAL_GetTick>
 80048fa:	0002      	movs	r2, r0
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	1ad3      	subs	r3, r2, r3
 8004900:	4a2f      	ldr	r2, [pc, #188]	@ (80049c0 <HAL_RCC_ClockConfig+0x1f4>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d901      	bls.n	800490a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8004906:	2303      	movs	r3, #3
 8004908:	e054      	b.n	80049b4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800490a:	4b2e      	ldr	r3, [pc, #184]	@ (80049c4 <HAL_RCC_ClockConfig+0x1f8>)
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	2238      	movs	r2, #56	@ 0x38
 8004910:	401a      	ands	r2, r3
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	00db      	lsls	r3, r3, #3
 8004918:	429a      	cmp	r2, r3
 800491a:	d1ec      	bne.n	80048f6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800491c:	4b27      	ldr	r3, [pc, #156]	@ (80049bc <HAL_RCC_ClockConfig+0x1f0>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	2207      	movs	r2, #7
 8004922:	4013      	ands	r3, r2
 8004924:	683a      	ldr	r2, [r7, #0]
 8004926:	429a      	cmp	r2, r3
 8004928:	d21e      	bcs.n	8004968 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800492a:	4b24      	ldr	r3, [pc, #144]	@ (80049bc <HAL_RCC_ClockConfig+0x1f0>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	2207      	movs	r2, #7
 8004930:	4393      	bics	r3, r2
 8004932:	0019      	movs	r1, r3
 8004934:	4b21      	ldr	r3, [pc, #132]	@ (80049bc <HAL_RCC_ClockConfig+0x1f0>)
 8004936:	683a      	ldr	r2, [r7, #0]
 8004938:	430a      	orrs	r2, r1
 800493a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800493c:	f7fe fad4 	bl	8002ee8 <HAL_GetTick>
 8004940:	0003      	movs	r3, r0
 8004942:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004944:	e009      	b.n	800495a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004946:	f7fe facf 	bl	8002ee8 <HAL_GetTick>
 800494a:	0002      	movs	r2, r0
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	1ad3      	subs	r3, r2, r3
 8004950:	4a1b      	ldr	r2, [pc, #108]	@ (80049c0 <HAL_RCC_ClockConfig+0x1f4>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d901      	bls.n	800495a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8004956:	2303      	movs	r3, #3
 8004958:	e02c      	b.n	80049b4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800495a:	4b18      	ldr	r3, [pc, #96]	@ (80049bc <HAL_RCC_ClockConfig+0x1f0>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	2207      	movs	r2, #7
 8004960:	4013      	ands	r3, r2
 8004962:	683a      	ldr	r2, [r7, #0]
 8004964:	429a      	cmp	r2, r3
 8004966:	d1ee      	bne.n	8004946 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	2204      	movs	r2, #4
 800496e:	4013      	ands	r3, r2
 8004970:	d009      	beq.n	8004986 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004972:	4b14      	ldr	r3, [pc, #80]	@ (80049c4 <HAL_RCC_ClockConfig+0x1f8>)
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	4a15      	ldr	r2, [pc, #84]	@ (80049cc <HAL_RCC_ClockConfig+0x200>)
 8004978:	4013      	ands	r3, r2
 800497a:	0019      	movs	r1, r3
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	68da      	ldr	r2, [r3, #12]
 8004980:	4b10      	ldr	r3, [pc, #64]	@ (80049c4 <HAL_RCC_ClockConfig+0x1f8>)
 8004982:	430a      	orrs	r2, r1
 8004984:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004986:	f000 f829 	bl	80049dc <HAL_RCC_GetSysClockFreq>
 800498a:	0001      	movs	r1, r0
 800498c:	4b0d      	ldr	r3, [pc, #52]	@ (80049c4 <HAL_RCC_ClockConfig+0x1f8>)
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	0a1b      	lsrs	r3, r3, #8
 8004992:	220f      	movs	r2, #15
 8004994:	401a      	ands	r2, r3
 8004996:	4b0e      	ldr	r3, [pc, #56]	@ (80049d0 <HAL_RCC_ClockConfig+0x204>)
 8004998:	0092      	lsls	r2, r2, #2
 800499a:	58d3      	ldr	r3, [r2, r3]
 800499c:	221f      	movs	r2, #31
 800499e:	4013      	ands	r3, r2
 80049a0:	000a      	movs	r2, r1
 80049a2:	40da      	lsrs	r2, r3
 80049a4:	4b0b      	ldr	r3, [pc, #44]	@ (80049d4 <HAL_RCC_ClockConfig+0x208>)
 80049a6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80049a8:	4b0b      	ldr	r3, [pc, #44]	@ (80049d8 <HAL_RCC_ClockConfig+0x20c>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	0018      	movs	r0, r3
 80049ae:	f7fe fa3f 	bl	8002e30 <HAL_InitTick>
 80049b2:	0003      	movs	r3, r0
}
 80049b4:	0018      	movs	r0, r3
 80049b6:	46bd      	mov	sp, r7
 80049b8:	b004      	add	sp, #16
 80049ba:	bd80      	pop	{r7, pc}
 80049bc:	40022000 	.word	0x40022000
 80049c0:	00001388 	.word	0x00001388
 80049c4:	40021000 	.word	0x40021000
 80049c8:	fffff0ff 	.word	0xfffff0ff
 80049cc:	ffff8fff 	.word	0xffff8fff
 80049d0:	08008cd4 	.word	0x08008cd4
 80049d4:	20000000 	.word	0x20000000
 80049d8:	20000004 	.word	0x20000004

080049dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b086      	sub	sp, #24
 80049e0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80049e2:	4b3c      	ldr	r3, [pc, #240]	@ (8004ad4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	2238      	movs	r2, #56	@ 0x38
 80049e8:	4013      	ands	r3, r2
 80049ea:	d10f      	bne.n	8004a0c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80049ec:	4b39      	ldr	r3, [pc, #228]	@ (8004ad4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	0adb      	lsrs	r3, r3, #11
 80049f2:	2207      	movs	r2, #7
 80049f4:	4013      	ands	r3, r2
 80049f6:	2201      	movs	r2, #1
 80049f8:	409a      	lsls	r2, r3
 80049fa:	0013      	movs	r3, r2
 80049fc:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80049fe:	6839      	ldr	r1, [r7, #0]
 8004a00:	4835      	ldr	r0, [pc, #212]	@ (8004ad8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004a02:	f7fb fb93 	bl	800012c <__udivsi3>
 8004a06:	0003      	movs	r3, r0
 8004a08:	613b      	str	r3, [r7, #16]
 8004a0a:	e05d      	b.n	8004ac8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a0c:	4b31      	ldr	r3, [pc, #196]	@ (8004ad4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	2238      	movs	r2, #56	@ 0x38
 8004a12:	4013      	ands	r3, r2
 8004a14:	2b08      	cmp	r3, #8
 8004a16:	d102      	bne.n	8004a1e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004a18:	4b30      	ldr	r3, [pc, #192]	@ (8004adc <HAL_RCC_GetSysClockFreq+0x100>)
 8004a1a:	613b      	str	r3, [r7, #16]
 8004a1c:	e054      	b.n	8004ac8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a1e:	4b2d      	ldr	r3, [pc, #180]	@ (8004ad4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	2238      	movs	r2, #56	@ 0x38
 8004a24:	4013      	ands	r3, r2
 8004a26:	2b10      	cmp	r3, #16
 8004a28:	d138      	bne.n	8004a9c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004a2a:	4b2a      	ldr	r3, [pc, #168]	@ (8004ad4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a2c:	68db      	ldr	r3, [r3, #12]
 8004a2e:	2203      	movs	r2, #3
 8004a30:	4013      	ands	r3, r2
 8004a32:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004a34:	4b27      	ldr	r3, [pc, #156]	@ (8004ad4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	091b      	lsrs	r3, r3, #4
 8004a3a:	2207      	movs	r2, #7
 8004a3c:	4013      	ands	r3, r2
 8004a3e:	3301      	adds	r3, #1
 8004a40:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2b03      	cmp	r3, #3
 8004a46:	d10d      	bne.n	8004a64 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004a48:	68b9      	ldr	r1, [r7, #8]
 8004a4a:	4824      	ldr	r0, [pc, #144]	@ (8004adc <HAL_RCC_GetSysClockFreq+0x100>)
 8004a4c:	f7fb fb6e 	bl	800012c <__udivsi3>
 8004a50:	0003      	movs	r3, r0
 8004a52:	0019      	movs	r1, r3
 8004a54:	4b1f      	ldr	r3, [pc, #124]	@ (8004ad4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	0a1b      	lsrs	r3, r3, #8
 8004a5a:	227f      	movs	r2, #127	@ 0x7f
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	434b      	muls	r3, r1
 8004a60:	617b      	str	r3, [r7, #20]
        break;
 8004a62:	e00d      	b.n	8004a80 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004a64:	68b9      	ldr	r1, [r7, #8]
 8004a66:	481c      	ldr	r0, [pc, #112]	@ (8004ad8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004a68:	f7fb fb60 	bl	800012c <__udivsi3>
 8004a6c:	0003      	movs	r3, r0
 8004a6e:	0019      	movs	r1, r3
 8004a70:	4b18      	ldr	r3, [pc, #96]	@ (8004ad4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	0a1b      	lsrs	r3, r3, #8
 8004a76:	227f      	movs	r2, #127	@ 0x7f
 8004a78:	4013      	ands	r3, r2
 8004a7a:	434b      	muls	r3, r1
 8004a7c:	617b      	str	r3, [r7, #20]
        break;
 8004a7e:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004a80:	4b14      	ldr	r3, [pc, #80]	@ (8004ad4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	0f5b      	lsrs	r3, r3, #29
 8004a86:	2207      	movs	r2, #7
 8004a88:	4013      	ands	r3, r2
 8004a8a:	3301      	adds	r3, #1
 8004a8c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8004a8e:	6879      	ldr	r1, [r7, #4]
 8004a90:	6978      	ldr	r0, [r7, #20]
 8004a92:	f7fb fb4b 	bl	800012c <__udivsi3>
 8004a96:	0003      	movs	r3, r0
 8004a98:	613b      	str	r3, [r7, #16]
 8004a9a:	e015      	b.n	8004ac8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004a9c:	4b0d      	ldr	r3, [pc, #52]	@ (8004ad4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	2238      	movs	r2, #56	@ 0x38
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	2b20      	cmp	r3, #32
 8004aa6:	d103      	bne.n	8004ab0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004aa8:	2380      	movs	r3, #128	@ 0x80
 8004aaa:	021b      	lsls	r3, r3, #8
 8004aac:	613b      	str	r3, [r7, #16]
 8004aae:	e00b      	b.n	8004ac8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004ab0:	4b08      	ldr	r3, [pc, #32]	@ (8004ad4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	2238      	movs	r2, #56	@ 0x38
 8004ab6:	4013      	ands	r3, r2
 8004ab8:	2b18      	cmp	r3, #24
 8004aba:	d103      	bne.n	8004ac4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004abc:	23fa      	movs	r3, #250	@ 0xfa
 8004abe:	01db      	lsls	r3, r3, #7
 8004ac0:	613b      	str	r3, [r7, #16]
 8004ac2:	e001      	b.n	8004ac8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004ac8:	693b      	ldr	r3, [r7, #16]
}
 8004aca:	0018      	movs	r0, r3
 8004acc:	46bd      	mov	sp, r7
 8004ace:	b006      	add	sp, #24
 8004ad0:	bd80      	pop	{r7, pc}
 8004ad2:	46c0      	nop			@ (mov r8, r8)
 8004ad4:	40021000 	.word	0x40021000
 8004ad8:	00f42400 	.word	0x00f42400
 8004adc:	007a1200 	.word	0x007a1200

08004ae0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ae4:	4b02      	ldr	r3, [pc, #8]	@ (8004af0 <HAL_RCC_GetHCLKFreq+0x10>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
}
 8004ae8:	0018      	movs	r0, r3
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}
 8004aee:	46c0      	nop			@ (mov r8, r8)
 8004af0:	20000000 	.word	0x20000000

08004af4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004af4:	b5b0      	push	{r4, r5, r7, lr}
 8004af6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004af8:	f7ff fff2 	bl	8004ae0 <HAL_RCC_GetHCLKFreq>
 8004afc:	0004      	movs	r4, r0
 8004afe:	f7ff faf9 	bl	80040f4 <LL_RCC_GetAPB1Prescaler>
 8004b02:	0003      	movs	r3, r0
 8004b04:	0b1a      	lsrs	r2, r3, #12
 8004b06:	4b05      	ldr	r3, [pc, #20]	@ (8004b1c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004b08:	0092      	lsls	r2, r2, #2
 8004b0a:	58d3      	ldr	r3, [r2, r3]
 8004b0c:	221f      	movs	r2, #31
 8004b0e:	4013      	ands	r3, r2
 8004b10:	40dc      	lsrs	r4, r3
 8004b12:	0023      	movs	r3, r4
}
 8004b14:	0018      	movs	r0, r3
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bdb0      	pop	{r4, r5, r7, pc}
 8004b1a:	46c0      	nop			@ (mov r8, r8)
 8004b1c:	08008d14 	.word	0x08008d14

08004b20 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b086      	sub	sp, #24
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004b28:	2313      	movs	r3, #19
 8004b2a:	18fb      	adds	r3, r7, r3
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004b30:	2312      	movs	r3, #18
 8004b32:	18fb      	adds	r3, r7, r3
 8004b34:	2200      	movs	r2, #0
 8004b36:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	2380      	movs	r3, #128	@ 0x80
 8004b3e:	029b      	lsls	r3, r3, #10
 8004b40:	4013      	ands	r3, r2
 8004b42:	d100      	bne.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004b44:	e0ad      	b.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b46:	2011      	movs	r0, #17
 8004b48:	183b      	adds	r3, r7, r0
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b4e:	4b47      	ldr	r3, [pc, #284]	@ (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004b50:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004b52:	2380      	movs	r3, #128	@ 0x80
 8004b54:	055b      	lsls	r3, r3, #21
 8004b56:	4013      	ands	r3, r2
 8004b58:	d110      	bne.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b5a:	4b44      	ldr	r3, [pc, #272]	@ (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004b5c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004b5e:	4b43      	ldr	r3, [pc, #268]	@ (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004b60:	2180      	movs	r1, #128	@ 0x80
 8004b62:	0549      	lsls	r1, r1, #21
 8004b64:	430a      	orrs	r2, r1
 8004b66:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004b68:	4b40      	ldr	r3, [pc, #256]	@ (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004b6a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004b6c:	2380      	movs	r3, #128	@ 0x80
 8004b6e:	055b      	lsls	r3, r3, #21
 8004b70:	4013      	ands	r3, r2
 8004b72:	60bb      	str	r3, [r7, #8]
 8004b74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b76:	183b      	adds	r3, r7, r0
 8004b78:	2201      	movs	r2, #1
 8004b7a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b7c:	4b3c      	ldr	r3, [pc, #240]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	4b3b      	ldr	r3, [pc, #236]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8004b82:	2180      	movs	r1, #128	@ 0x80
 8004b84:	0049      	lsls	r1, r1, #1
 8004b86:	430a      	orrs	r2, r1
 8004b88:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004b8a:	f7fe f9ad 	bl	8002ee8 <HAL_GetTick>
 8004b8e:	0003      	movs	r3, r0
 8004b90:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b92:	e00b      	b.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b94:	f7fe f9a8 	bl	8002ee8 <HAL_GetTick>
 8004b98:	0002      	movs	r2, r0
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	1ad3      	subs	r3, r2, r3
 8004b9e:	2b02      	cmp	r3, #2
 8004ba0:	d904      	bls.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8004ba2:	2313      	movs	r3, #19
 8004ba4:	18fb      	adds	r3, r7, r3
 8004ba6:	2203      	movs	r2, #3
 8004ba8:	701a      	strb	r2, [r3, #0]
        break;
 8004baa:	e005      	b.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004bac:	4b30      	ldr	r3, [pc, #192]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	2380      	movs	r3, #128	@ 0x80
 8004bb2:	005b      	lsls	r3, r3, #1
 8004bb4:	4013      	ands	r3, r2
 8004bb6:	d0ed      	beq.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8004bb8:	2313      	movs	r3, #19
 8004bba:	18fb      	adds	r3, r7, r3
 8004bbc:	781b      	ldrb	r3, [r3, #0]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d15e      	bne.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004bc2:	4b2a      	ldr	r3, [pc, #168]	@ (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004bc4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004bc6:	23c0      	movs	r3, #192	@ 0xc0
 8004bc8:	009b      	lsls	r3, r3, #2
 8004bca:	4013      	ands	r3, r2
 8004bcc:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d019      	beq.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bd8:	697a      	ldr	r2, [r7, #20]
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	d014      	beq.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004bde:	4b23      	ldr	r3, [pc, #140]	@ (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004be0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004be2:	4a24      	ldr	r2, [pc, #144]	@ (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8004be4:	4013      	ands	r3, r2
 8004be6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004be8:	4b20      	ldr	r3, [pc, #128]	@ (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004bea:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004bec:	4b1f      	ldr	r3, [pc, #124]	@ (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004bee:	2180      	movs	r1, #128	@ 0x80
 8004bf0:	0249      	lsls	r1, r1, #9
 8004bf2:	430a      	orrs	r2, r1
 8004bf4:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004bf6:	4b1d      	ldr	r3, [pc, #116]	@ (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004bf8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004bfa:	4b1c      	ldr	r3, [pc, #112]	@ (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004bfc:	491e      	ldr	r1, [pc, #120]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8004bfe:	400a      	ands	r2, r1
 8004c00:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004c02:	4b1a      	ldr	r3, [pc, #104]	@ (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004c04:	697a      	ldr	r2, [r7, #20]
 8004c06:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	4013      	ands	r3, r2
 8004c0e:	d016      	beq.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c10:	f7fe f96a 	bl	8002ee8 <HAL_GetTick>
 8004c14:	0003      	movs	r3, r0
 8004c16:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c18:	e00c      	b.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c1a:	f7fe f965 	bl	8002ee8 <HAL_GetTick>
 8004c1e:	0002      	movs	r2, r0
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	1ad3      	subs	r3, r2, r3
 8004c24:	4a15      	ldr	r2, [pc, #84]	@ (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d904      	bls.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8004c2a:	2313      	movs	r3, #19
 8004c2c:	18fb      	adds	r3, r7, r3
 8004c2e:	2203      	movs	r2, #3
 8004c30:	701a      	strb	r2, [r3, #0]
            break;
 8004c32:	e004      	b.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c34:	4b0d      	ldr	r3, [pc, #52]	@ (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004c36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c38:	2202      	movs	r2, #2
 8004c3a:	4013      	ands	r3, r2
 8004c3c:	d0ed      	beq.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8004c3e:	2313      	movs	r3, #19
 8004c40:	18fb      	adds	r3, r7, r3
 8004c42:	781b      	ldrb	r3, [r3, #0]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d10a      	bne.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c48:	4b08      	ldr	r3, [pc, #32]	@ (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004c4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c4c:	4a09      	ldr	r2, [pc, #36]	@ (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8004c4e:	4013      	ands	r3, r2
 8004c50:	0019      	movs	r1, r3
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004c56:	4b05      	ldr	r3, [pc, #20]	@ (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004c58:	430a      	orrs	r2, r1
 8004c5a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004c5c:	e016      	b.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004c5e:	2312      	movs	r3, #18
 8004c60:	18fb      	adds	r3, r7, r3
 8004c62:	2213      	movs	r2, #19
 8004c64:	18ba      	adds	r2, r7, r2
 8004c66:	7812      	ldrb	r2, [r2, #0]
 8004c68:	701a      	strb	r2, [r3, #0]
 8004c6a:	e00f      	b.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004c6c:	40021000 	.word	0x40021000
 8004c70:	40007000 	.word	0x40007000
 8004c74:	fffffcff 	.word	0xfffffcff
 8004c78:	fffeffff 	.word	0xfffeffff
 8004c7c:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c80:	2312      	movs	r3, #18
 8004c82:	18fb      	adds	r3, r7, r3
 8004c84:	2213      	movs	r2, #19
 8004c86:	18ba      	adds	r2, r7, r2
 8004c88:	7812      	ldrb	r2, [r2, #0]
 8004c8a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004c8c:	2311      	movs	r3, #17
 8004c8e:	18fb      	adds	r3, r7, r3
 8004c90:	781b      	ldrb	r3, [r3, #0]
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d105      	bne.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c96:	4bb6      	ldr	r3, [pc, #728]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004c98:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004c9a:	4bb5      	ldr	r3, [pc, #724]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004c9c:	49b5      	ldr	r1, [pc, #724]	@ (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8004c9e:	400a      	ands	r2, r1
 8004ca0:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	4013      	ands	r3, r2
 8004caa:	d009      	beq.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004cac:	4bb0      	ldr	r3, [pc, #704]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004cae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cb0:	2203      	movs	r2, #3
 8004cb2:	4393      	bics	r3, r2
 8004cb4:	0019      	movs	r1, r3
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	685a      	ldr	r2, [r3, #4]
 8004cba:	4bad      	ldr	r3, [pc, #692]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004cbc:	430a      	orrs	r2, r1
 8004cbe:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	2202      	movs	r2, #2
 8004cc6:	4013      	ands	r3, r2
 8004cc8:	d009      	beq.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004cca:	4ba9      	ldr	r3, [pc, #676]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004ccc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cce:	220c      	movs	r2, #12
 8004cd0:	4393      	bics	r3, r2
 8004cd2:	0019      	movs	r1, r3
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	689a      	ldr	r2, [r3, #8]
 8004cd8:	4ba5      	ldr	r3, [pc, #660]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004cda:	430a      	orrs	r2, r1
 8004cdc:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	2204      	movs	r2, #4
 8004ce4:	4013      	ands	r3, r2
 8004ce6:	d009      	beq.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004ce8:	4ba1      	ldr	r3, [pc, #644]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004cea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cec:	2230      	movs	r2, #48	@ 0x30
 8004cee:	4393      	bics	r3, r2
 8004cf0:	0019      	movs	r1, r3
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	68da      	ldr	r2, [r3, #12]
 8004cf6:	4b9e      	ldr	r3, [pc, #632]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004cf8:	430a      	orrs	r2, r1
 8004cfa:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	2210      	movs	r2, #16
 8004d02:	4013      	ands	r3, r2
 8004d04:	d009      	beq.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004d06:	4b9a      	ldr	r3, [pc, #616]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004d08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d0a:	4a9b      	ldr	r2, [pc, #620]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8004d0c:	4013      	ands	r3, r2
 8004d0e:	0019      	movs	r1, r3
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	691a      	ldr	r2, [r3, #16]
 8004d14:	4b96      	ldr	r3, [pc, #600]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004d16:	430a      	orrs	r2, r1
 8004d18:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	2380      	movs	r3, #128	@ 0x80
 8004d20:	015b      	lsls	r3, r3, #5
 8004d22:	4013      	ands	r3, r2
 8004d24:	d009      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8004d26:	4b92      	ldr	r3, [pc, #584]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004d28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d2a:	4a94      	ldr	r2, [pc, #592]	@ (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004d2c:	4013      	ands	r3, r2
 8004d2e:	0019      	movs	r1, r3
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	695a      	ldr	r2, [r3, #20]
 8004d34:	4b8e      	ldr	r3, [pc, #568]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004d36:	430a      	orrs	r2, r1
 8004d38:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	2380      	movs	r3, #128	@ 0x80
 8004d40:	009b      	lsls	r3, r3, #2
 8004d42:	4013      	ands	r3, r2
 8004d44:	d009      	beq.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d46:	4b8a      	ldr	r3, [pc, #552]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004d48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d4a:	4a8d      	ldr	r2, [pc, #564]	@ (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8004d4c:	4013      	ands	r3, r2
 8004d4e:	0019      	movs	r1, r3
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004d54:	4b86      	ldr	r3, [pc, #536]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004d56:	430a      	orrs	r2, r1
 8004d58:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	2380      	movs	r3, #128	@ 0x80
 8004d60:	00db      	lsls	r3, r3, #3
 8004d62:	4013      	ands	r3, r2
 8004d64:	d009      	beq.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004d66:	4b82      	ldr	r3, [pc, #520]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004d68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d6a:	4a86      	ldr	r2, [pc, #536]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8004d6c:	4013      	ands	r3, r2
 8004d6e:	0019      	movs	r1, r3
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d74:	4b7e      	ldr	r3, [pc, #504]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004d76:	430a      	orrs	r2, r1
 8004d78:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	2220      	movs	r2, #32
 8004d80:	4013      	ands	r3, r2
 8004d82:	d009      	beq.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d84:	4b7a      	ldr	r3, [pc, #488]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004d86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d88:	4a7f      	ldr	r2, [pc, #508]	@ (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8004d8a:	4013      	ands	r3, r2
 8004d8c:	0019      	movs	r1, r3
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	699a      	ldr	r2, [r3, #24]
 8004d92:	4b77      	ldr	r3, [pc, #476]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004d94:	430a      	orrs	r2, r1
 8004d96:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	2240      	movs	r2, #64	@ 0x40
 8004d9e:	4013      	ands	r3, r2
 8004da0:	d009      	beq.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004da2:	4b73      	ldr	r3, [pc, #460]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004da4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004da6:	4a79      	ldr	r2, [pc, #484]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8004da8:	4013      	ands	r3, r2
 8004daa:	0019      	movs	r1, r3
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	69da      	ldr	r2, [r3, #28]
 8004db0:	4b6f      	ldr	r3, [pc, #444]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004db2:	430a      	orrs	r2, r1
 8004db4:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	2380      	movs	r3, #128	@ 0x80
 8004dbc:	01db      	lsls	r3, r3, #7
 8004dbe:	4013      	ands	r3, r2
 8004dc0:	d015      	beq.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004dc2:	4b6b      	ldr	r3, [pc, #428]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004dc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dc6:	009b      	lsls	r3, r3, #2
 8004dc8:	0899      	lsrs	r1, r3, #2
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004dce:	4b68      	ldr	r3, [pc, #416]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004dd0:	430a      	orrs	r2, r1
 8004dd2:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004dd8:	2380      	movs	r3, #128	@ 0x80
 8004dda:	05db      	lsls	r3, r3, #23
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d106      	bne.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004de0:	4b63      	ldr	r3, [pc, #396]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004de2:	68da      	ldr	r2, [r3, #12]
 8004de4:	4b62      	ldr	r3, [pc, #392]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004de6:	2180      	movs	r1, #128	@ 0x80
 8004de8:	0249      	lsls	r1, r1, #9
 8004dea:	430a      	orrs	r2, r1
 8004dec:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681a      	ldr	r2, [r3, #0]
 8004df2:	2380      	movs	r3, #128	@ 0x80
 8004df4:	031b      	lsls	r3, r3, #12
 8004df6:	4013      	ands	r3, r2
 8004df8:	d009      	beq.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004dfa:	4b5d      	ldr	r3, [pc, #372]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004dfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dfe:	2240      	movs	r2, #64	@ 0x40
 8004e00:	4393      	bics	r3, r2
 8004e02:	0019      	movs	r1, r3
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e08:	4b59      	ldr	r3, [pc, #356]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004e0a:	430a      	orrs	r2, r1
 8004e0c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681a      	ldr	r2, [r3, #0]
 8004e12:	2380      	movs	r3, #128	@ 0x80
 8004e14:	039b      	lsls	r3, r3, #14
 8004e16:	4013      	ands	r3, r2
 8004e18:	d016      	beq.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004e1a:	4b55      	ldr	r3, [pc, #340]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004e1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e1e:	4a5c      	ldr	r2, [pc, #368]	@ (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8004e20:	4013      	ands	r3, r2
 8004e22:	0019      	movs	r1, r3
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004e28:	4b51      	ldr	r3, [pc, #324]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004e2a:	430a      	orrs	r2, r1
 8004e2c:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004e32:	2380      	movs	r3, #128	@ 0x80
 8004e34:	03db      	lsls	r3, r3, #15
 8004e36:	429a      	cmp	r2, r3
 8004e38:	d106      	bne.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004e3a:	4b4d      	ldr	r3, [pc, #308]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004e3c:	68da      	ldr	r2, [r3, #12]
 8004e3e:	4b4c      	ldr	r3, [pc, #304]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004e40:	2180      	movs	r1, #128	@ 0x80
 8004e42:	0449      	lsls	r1, r1, #17
 8004e44:	430a      	orrs	r2, r1
 8004e46:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	2380      	movs	r3, #128	@ 0x80
 8004e4e:	03db      	lsls	r3, r3, #15
 8004e50:	4013      	ands	r3, r2
 8004e52:	d016      	beq.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004e54:	4b46      	ldr	r3, [pc, #280]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004e56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e58:	4a4e      	ldr	r2, [pc, #312]	@ (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004e5a:	4013      	ands	r3, r2
 8004e5c:	0019      	movs	r1, r3
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004e62:	4b43      	ldr	r3, [pc, #268]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004e64:	430a      	orrs	r2, r1
 8004e66:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004e6c:	2380      	movs	r3, #128	@ 0x80
 8004e6e:	045b      	lsls	r3, r3, #17
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d106      	bne.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004e74:	4b3e      	ldr	r3, [pc, #248]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004e76:	68da      	ldr	r2, [r3, #12]
 8004e78:	4b3d      	ldr	r3, [pc, #244]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004e7a:	2180      	movs	r1, #128	@ 0x80
 8004e7c:	0449      	lsls	r1, r1, #17
 8004e7e:	430a      	orrs	r2, r1
 8004e80:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	2380      	movs	r3, #128	@ 0x80
 8004e88:	011b      	lsls	r3, r3, #4
 8004e8a:	4013      	ands	r3, r2
 8004e8c:	d014      	beq.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004e8e:	4b38      	ldr	r3, [pc, #224]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004e90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e92:	2203      	movs	r2, #3
 8004e94:	4393      	bics	r3, r2
 8004e96:	0019      	movs	r1, r3
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6a1a      	ldr	r2, [r3, #32]
 8004e9c:	4b34      	ldr	r3, [pc, #208]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004e9e:	430a      	orrs	r2, r1
 8004ea0:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6a1b      	ldr	r3, [r3, #32]
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d106      	bne.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004eaa:	4b31      	ldr	r3, [pc, #196]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004eac:	68da      	ldr	r2, [r3, #12]
 8004eae:	4b30      	ldr	r3, [pc, #192]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004eb0:	2180      	movs	r1, #128	@ 0x80
 8004eb2:	0249      	lsls	r1, r1, #9
 8004eb4:	430a      	orrs	r2, r1
 8004eb6:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	2380      	movs	r3, #128	@ 0x80
 8004ebe:	019b      	lsls	r3, r3, #6
 8004ec0:	4013      	ands	r3, r2
 8004ec2:	d014      	beq.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8004ec4:	4b2a      	ldr	r3, [pc, #168]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004ec6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ec8:	220c      	movs	r2, #12
 8004eca:	4393      	bics	r3, r2
 8004ecc:	0019      	movs	r1, r3
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004ed2:	4b27      	ldr	r3, [pc, #156]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004ed4:	430a      	orrs	r2, r1
 8004ed6:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004edc:	2b04      	cmp	r3, #4
 8004ede:	d106      	bne.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004ee0:	4b23      	ldr	r3, [pc, #140]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004ee2:	68da      	ldr	r2, [r3, #12]
 8004ee4:	4b22      	ldr	r3, [pc, #136]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004ee6:	2180      	movs	r1, #128	@ 0x80
 8004ee8:	0249      	lsls	r1, r1, #9
 8004eea:	430a      	orrs	r2, r1
 8004eec:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681a      	ldr	r2, [r3, #0]
 8004ef2:	2380      	movs	r3, #128	@ 0x80
 8004ef4:	045b      	lsls	r3, r3, #17
 8004ef6:	4013      	ands	r3, r2
 8004ef8:	d016      	beq.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004efa:	4b1d      	ldr	r3, [pc, #116]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004efc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004efe:	4a22      	ldr	r2, [pc, #136]	@ (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8004f00:	4013      	ands	r3, r2
 8004f02:	0019      	movs	r1, r3
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004f08:	4b19      	ldr	r3, [pc, #100]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004f0a:	430a      	orrs	r2, r1
 8004f0c:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004f12:	2380      	movs	r3, #128	@ 0x80
 8004f14:	019b      	lsls	r3, r3, #6
 8004f16:	429a      	cmp	r2, r3
 8004f18:	d106      	bne.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004f1a:	4b15      	ldr	r3, [pc, #84]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004f1c:	68da      	ldr	r2, [r3, #12]
 8004f1e:	4b14      	ldr	r3, [pc, #80]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004f20:	2180      	movs	r1, #128	@ 0x80
 8004f22:	0449      	lsls	r1, r1, #17
 8004f24:	430a      	orrs	r2, r1
 8004f26:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	2380      	movs	r3, #128	@ 0x80
 8004f2e:	049b      	lsls	r3, r3, #18
 8004f30:	4013      	ands	r3, r2
 8004f32:	d016      	beq.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004f34:	4b0e      	ldr	r3, [pc, #56]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004f36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f38:	4a10      	ldr	r2, [pc, #64]	@ (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004f3a:	4013      	ands	r3, r2
 8004f3c:	0019      	movs	r1, r3
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004f42:	4b0b      	ldr	r3, [pc, #44]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004f44:	430a      	orrs	r2, r1
 8004f46:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004f4c:	2380      	movs	r3, #128	@ 0x80
 8004f4e:	005b      	lsls	r3, r3, #1
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d106      	bne.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004f54:	4b06      	ldr	r3, [pc, #24]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004f56:	68da      	ldr	r2, [r3, #12]
 8004f58:	4b05      	ldr	r3, [pc, #20]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004f5a:	2180      	movs	r1, #128	@ 0x80
 8004f5c:	0449      	lsls	r1, r1, #17
 8004f5e:	430a      	orrs	r2, r1
 8004f60:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8004f62:	2312      	movs	r3, #18
 8004f64:	18fb      	adds	r3, r7, r3
 8004f66:	781b      	ldrb	r3, [r3, #0]
}
 8004f68:	0018      	movs	r0, r3
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	b006      	add	sp, #24
 8004f6e:	bd80      	pop	{r7, pc}
 8004f70:	40021000 	.word	0x40021000
 8004f74:	efffffff 	.word	0xefffffff
 8004f78:	fffff3ff 	.word	0xfffff3ff
 8004f7c:	fffffcff 	.word	0xfffffcff
 8004f80:	fff3ffff 	.word	0xfff3ffff
 8004f84:	ffcfffff 	.word	0xffcfffff
 8004f88:	ffffcfff 	.word	0xffffcfff
 8004f8c:	ffff3fff 	.word	0xffff3fff
 8004f90:	ffbfffff 	.word	0xffbfffff
 8004f94:	feffffff 	.word	0xfeffffff

08004f98 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b084      	sub	sp, #16
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d101      	bne.n	8004faa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e0a8      	b.n	80050fc <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d109      	bne.n	8004fc6 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	685a      	ldr	r2, [r3, #4]
 8004fb6:	2382      	movs	r3, #130	@ 0x82
 8004fb8:	005b      	lsls	r3, r3, #1
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d009      	beq.n	8004fd2 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	61da      	str	r2, [r3, #28]
 8004fc4:	e005      	b.n	8004fd2 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	225d      	movs	r2, #93	@ 0x5d
 8004fdc:	5c9b      	ldrb	r3, [r3, r2]
 8004fde:	b2db      	uxtb	r3, r3
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d107      	bne.n	8004ff4 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	225c      	movs	r2, #92	@ 0x5c
 8004fe8:	2100      	movs	r1, #0
 8004fea:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	0018      	movs	r0, r3
 8004ff0:	f7fd fcca 	bl	8002988 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	225d      	movs	r2, #93	@ 0x5d
 8004ff8:	2102      	movs	r1, #2
 8004ffa:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	681a      	ldr	r2, [r3, #0]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	2140      	movs	r1, #64	@ 0x40
 8005008:	438a      	bics	r2, r1
 800500a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	68da      	ldr	r2, [r3, #12]
 8005010:	23e0      	movs	r3, #224	@ 0xe0
 8005012:	00db      	lsls	r3, r3, #3
 8005014:	429a      	cmp	r2, r3
 8005016:	d902      	bls.n	800501e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005018:	2300      	movs	r3, #0
 800501a:	60fb      	str	r3, [r7, #12]
 800501c:	e002      	b.n	8005024 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800501e:	2380      	movs	r3, #128	@ 0x80
 8005020:	015b      	lsls	r3, r3, #5
 8005022:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	68da      	ldr	r2, [r3, #12]
 8005028:	23f0      	movs	r3, #240	@ 0xf0
 800502a:	011b      	lsls	r3, r3, #4
 800502c:	429a      	cmp	r2, r3
 800502e:	d008      	beq.n	8005042 <HAL_SPI_Init+0xaa>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	68da      	ldr	r2, [r3, #12]
 8005034:	23e0      	movs	r3, #224	@ 0xe0
 8005036:	00db      	lsls	r3, r3, #3
 8005038:	429a      	cmp	r2, r3
 800503a:	d002      	beq.n	8005042 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2200      	movs	r2, #0
 8005040:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	685a      	ldr	r2, [r3, #4]
 8005046:	2382      	movs	r3, #130	@ 0x82
 8005048:	005b      	lsls	r3, r3, #1
 800504a:	401a      	ands	r2, r3
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6899      	ldr	r1, [r3, #8]
 8005050:	2384      	movs	r3, #132	@ 0x84
 8005052:	021b      	lsls	r3, r3, #8
 8005054:	400b      	ands	r3, r1
 8005056:	431a      	orrs	r2, r3
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	691b      	ldr	r3, [r3, #16]
 800505c:	2102      	movs	r1, #2
 800505e:	400b      	ands	r3, r1
 8005060:	431a      	orrs	r2, r3
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	695b      	ldr	r3, [r3, #20]
 8005066:	2101      	movs	r1, #1
 8005068:	400b      	ands	r3, r1
 800506a:	431a      	orrs	r2, r3
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6999      	ldr	r1, [r3, #24]
 8005070:	2380      	movs	r3, #128	@ 0x80
 8005072:	009b      	lsls	r3, r3, #2
 8005074:	400b      	ands	r3, r1
 8005076:	431a      	orrs	r2, r3
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	69db      	ldr	r3, [r3, #28]
 800507c:	2138      	movs	r1, #56	@ 0x38
 800507e:	400b      	ands	r3, r1
 8005080:	431a      	orrs	r2, r3
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6a1b      	ldr	r3, [r3, #32]
 8005086:	2180      	movs	r1, #128	@ 0x80
 8005088:	400b      	ands	r3, r1
 800508a:	431a      	orrs	r2, r3
 800508c:	0011      	movs	r1, r2
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005092:	2380      	movs	r3, #128	@ 0x80
 8005094:	019b      	lsls	r3, r3, #6
 8005096:	401a      	ands	r2, r3
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	430a      	orrs	r2, r1
 800509e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	699b      	ldr	r3, [r3, #24]
 80050a4:	0c1b      	lsrs	r3, r3, #16
 80050a6:	2204      	movs	r2, #4
 80050a8:	401a      	ands	r2, r3
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050ae:	2110      	movs	r1, #16
 80050b0:	400b      	ands	r3, r1
 80050b2:	431a      	orrs	r2, r3
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050b8:	2108      	movs	r1, #8
 80050ba:	400b      	ands	r3, r1
 80050bc:	431a      	orrs	r2, r3
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	68d9      	ldr	r1, [r3, #12]
 80050c2:	23f0      	movs	r3, #240	@ 0xf0
 80050c4:	011b      	lsls	r3, r3, #4
 80050c6:	400b      	ands	r3, r1
 80050c8:	431a      	orrs	r2, r3
 80050ca:	0011      	movs	r1, r2
 80050cc:	68fa      	ldr	r2, [r7, #12]
 80050ce:	2380      	movs	r3, #128	@ 0x80
 80050d0:	015b      	lsls	r3, r3, #5
 80050d2:	401a      	ands	r2, r3
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	430a      	orrs	r2, r1
 80050da:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	69da      	ldr	r2, [r3, #28]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4907      	ldr	r1, [pc, #28]	@ (8005104 <HAL_SPI_Init+0x16c>)
 80050e8:	400a      	ands	r2, r1
 80050ea:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2200      	movs	r2, #0
 80050f0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	225d      	movs	r2, #93	@ 0x5d
 80050f6:	2101      	movs	r1, #1
 80050f8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80050fa:	2300      	movs	r3, #0
}
 80050fc:	0018      	movs	r0, r3
 80050fe:	46bd      	mov	sp, r7
 8005100:	b004      	add	sp, #16
 8005102:	bd80      	pop	{r7, pc}
 8005104:	fffff7ff 	.word	0xfffff7ff

08005108 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b088      	sub	sp, #32
 800510c:	af00      	add	r7, sp, #0
 800510e:	60f8      	str	r0, [r7, #12]
 8005110:	60b9      	str	r1, [r7, #8]
 8005112:	603b      	str	r3, [r7, #0]
 8005114:	1dbb      	adds	r3, r7, #6
 8005116:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005118:	231f      	movs	r3, #31
 800511a:	18fb      	adds	r3, r7, r3
 800511c:	2200      	movs	r2, #0
 800511e:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	225c      	movs	r2, #92	@ 0x5c
 8005124:	5c9b      	ldrb	r3, [r3, r2]
 8005126:	2b01      	cmp	r3, #1
 8005128:	d101      	bne.n	800512e <HAL_SPI_Transmit+0x26>
 800512a:	2302      	movs	r3, #2
 800512c:	e147      	b.n	80053be <HAL_SPI_Transmit+0x2b6>
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	225c      	movs	r2, #92	@ 0x5c
 8005132:	2101      	movs	r1, #1
 8005134:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005136:	f7fd fed7 	bl	8002ee8 <HAL_GetTick>
 800513a:	0003      	movs	r3, r0
 800513c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800513e:	2316      	movs	r3, #22
 8005140:	18fb      	adds	r3, r7, r3
 8005142:	1dba      	adds	r2, r7, #6
 8005144:	8812      	ldrh	r2, [r2, #0]
 8005146:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	225d      	movs	r2, #93	@ 0x5d
 800514c:	5c9b      	ldrb	r3, [r3, r2]
 800514e:	b2db      	uxtb	r3, r3
 8005150:	2b01      	cmp	r3, #1
 8005152:	d004      	beq.n	800515e <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8005154:	231f      	movs	r3, #31
 8005156:	18fb      	adds	r3, r7, r3
 8005158:	2202      	movs	r2, #2
 800515a:	701a      	strb	r2, [r3, #0]
    goto error;
 800515c:	e128      	b.n	80053b0 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d003      	beq.n	800516c <HAL_SPI_Transmit+0x64>
 8005164:	1dbb      	adds	r3, r7, #6
 8005166:	881b      	ldrh	r3, [r3, #0]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d104      	bne.n	8005176 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 800516c:	231f      	movs	r3, #31
 800516e:	18fb      	adds	r3, r7, r3
 8005170:	2201      	movs	r2, #1
 8005172:	701a      	strb	r2, [r3, #0]
    goto error;
 8005174:	e11c      	b.n	80053b0 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	225d      	movs	r2, #93	@ 0x5d
 800517a:	2103      	movs	r1, #3
 800517c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2200      	movs	r2, #0
 8005182:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	68ba      	ldr	r2, [r7, #8]
 8005188:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	1dba      	adds	r2, r7, #6
 800518e:	8812      	ldrh	r2, [r2, #0]
 8005190:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	1dba      	adds	r2, r7, #6
 8005196:	8812      	ldrh	r2, [r2, #0]
 8005198:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2200      	movs	r2, #0
 800519e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2244      	movs	r2, #68	@ 0x44
 80051a4:	2100      	movs	r1, #0
 80051a6:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2246      	movs	r2, #70	@ 0x46
 80051ac:	2100      	movs	r1, #0
 80051ae:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2200      	movs	r2, #0
 80051b4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2200      	movs	r2, #0
 80051ba:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	689a      	ldr	r2, [r3, #8]
 80051c0:	2380      	movs	r3, #128	@ 0x80
 80051c2:	021b      	lsls	r3, r3, #8
 80051c4:	429a      	cmp	r2, r3
 80051c6:	d110      	bne.n	80051ea <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	2140      	movs	r1, #64	@ 0x40
 80051d4:	438a      	bics	r2, r1
 80051d6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	2180      	movs	r1, #128	@ 0x80
 80051e4:	01c9      	lsls	r1, r1, #7
 80051e6:	430a      	orrs	r2, r1
 80051e8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	2240      	movs	r2, #64	@ 0x40
 80051f2:	4013      	ands	r3, r2
 80051f4:	2b40      	cmp	r3, #64	@ 0x40
 80051f6:	d007      	beq.n	8005208 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	2140      	movs	r1, #64	@ 0x40
 8005204:	430a      	orrs	r2, r1
 8005206:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	68da      	ldr	r2, [r3, #12]
 800520c:	23e0      	movs	r3, #224	@ 0xe0
 800520e:	00db      	lsls	r3, r3, #3
 8005210:	429a      	cmp	r2, r3
 8005212:	d952      	bls.n	80052ba <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d004      	beq.n	8005226 <HAL_SPI_Transmit+0x11e>
 800521c:	2316      	movs	r3, #22
 800521e:	18fb      	adds	r3, r7, r3
 8005220:	881b      	ldrh	r3, [r3, #0]
 8005222:	2b01      	cmp	r3, #1
 8005224:	d143      	bne.n	80052ae <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800522a:	881a      	ldrh	r2, [r3, #0]
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005236:	1c9a      	adds	r2, r3, #2
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005240:	b29b      	uxth	r3, r3
 8005242:	3b01      	subs	r3, #1
 8005244:	b29a      	uxth	r2, r3
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800524a:	e030      	b.n	80052ae <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	2202      	movs	r2, #2
 8005254:	4013      	ands	r3, r2
 8005256:	2b02      	cmp	r3, #2
 8005258:	d112      	bne.n	8005280 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800525e:	881a      	ldrh	r2, [r3, #0]
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800526a:	1c9a      	adds	r2, r3, #2
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005274:	b29b      	uxth	r3, r3
 8005276:	3b01      	subs	r3, #1
 8005278:	b29a      	uxth	r2, r3
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800527e:	e016      	b.n	80052ae <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005280:	f7fd fe32 	bl	8002ee8 <HAL_GetTick>
 8005284:	0002      	movs	r2, r0
 8005286:	69bb      	ldr	r3, [r7, #24]
 8005288:	1ad3      	subs	r3, r2, r3
 800528a:	683a      	ldr	r2, [r7, #0]
 800528c:	429a      	cmp	r2, r3
 800528e:	d802      	bhi.n	8005296 <HAL_SPI_Transmit+0x18e>
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	3301      	adds	r3, #1
 8005294:	d102      	bne.n	800529c <HAL_SPI_Transmit+0x194>
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d108      	bne.n	80052ae <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 800529c:	231f      	movs	r3, #31
 800529e:	18fb      	adds	r3, r7, r3
 80052a0:	2203      	movs	r2, #3
 80052a2:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	225d      	movs	r2, #93	@ 0x5d
 80052a8:	2101      	movs	r1, #1
 80052aa:	5499      	strb	r1, [r3, r2]
          goto error;
 80052ac:	e080      	b.n	80053b0 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d1c9      	bne.n	800524c <HAL_SPI_Transmit+0x144>
 80052b8:	e053      	b.n	8005362 <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d004      	beq.n	80052cc <HAL_SPI_Transmit+0x1c4>
 80052c2:	2316      	movs	r3, #22
 80052c4:	18fb      	adds	r3, r7, r3
 80052c6:	881b      	ldrh	r3, [r3, #0]
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	d145      	bne.n	8005358 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	330c      	adds	r3, #12
 80052d6:	7812      	ldrb	r2, [r2, #0]
 80052d8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052de:	1c5a      	adds	r2, r3, #1
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80052e8:	b29b      	uxth	r3, r3
 80052ea:	3b01      	subs	r3, #1
 80052ec:	b29a      	uxth	r2, r3
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 80052f2:	e031      	b.n	8005358 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	2202      	movs	r2, #2
 80052fc:	4013      	ands	r3, r2
 80052fe:	2b02      	cmp	r3, #2
 8005300:	d113      	bne.n	800532a <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	330c      	adds	r3, #12
 800530c:	7812      	ldrb	r2, [r2, #0]
 800530e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005314:	1c5a      	adds	r2, r3, #1
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800531e:	b29b      	uxth	r3, r3
 8005320:	3b01      	subs	r3, #1
 8005322:	b29a      	uxth	r2, r3
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005328:	e016      	b.n	8005358 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800532a:	f7fd fddd 	bl	8002ee8 <HAL_GetTick>
 800532e:	0002      	movs	r2, r0
 8005330:	69bb      	ldr	r3, [r7, #24]
 8005332:	1ad3      	subs	r3, r2, r3
 8005334:	683a      	ldr	r2, [r7, #0]
 8005336:	429a      	cmp	r2, r3
 8005338:	d802      	bhi.n	8005340 <HAL_SPI_Transmit+0x238>
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	3301      	adds	r3, #1
 800533e:	d102      	bne.n	8005346 <HAL_SPI_Transmit+0x23e>
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d108      	bne.n	8005358 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 8005346:	231f      	movs	r3, #31
 8005348:	18fb      	adds	r3, r7, r3
 800534a:	2203      	movs	r2, #3
 800534c:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	225d      	movs	r2, #93	@ 0x5d
 8005352:	2101      	movs	r1, #1
 8005354:	5499      	strb	r1, [r3, r2]
          goto error;
 8005356:	e02b      	b.n	80053b0 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800535c:	b29b      	uxth	r3, r3
 800535e:	2b00      	cmp	r3, #0
 8005360:	d1c8      	bne.n	80052f4 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005362:	69ba      	ldr	r2, [r7, #24]
 8005364:	6839      	ldr	r1, [r7, #0]
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	0018      	movs	r0, r3
 800536a:	f000 f95d 	bl	8005628 <SPI_EndRxTxTransaction>
 800536e:	1e03      	subs	r3, r0, #0
 8005370:	d002      	beq.n	8005378 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2220      	movs	r2, #32
 8005376:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d10a      	bne.n	8005396 <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005380:	2300      	movs	r3, #0
 8005382:	613b      	str	r3, [r7, #16]
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	68db      	ldr	r3, [r3, #12]
 800538a:	613b      	str	r3, [r7, #16]
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	613b      	str	r3, [r7, #16]
 8005394:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800539a:	2b00      	cmp	r3, #0
 800539c:	d004      	beq.n	80053a8 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 800539e:	231f      	movs	r3, #31
 80053a0:	18fb      	adds	r3, r7, r3
 80053a2:	2201      	movs	r2, #1
 80053a4:	701a      	strb	r2, [r3, #0]
 80053a6:	e003      	b.n	80053b0 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	225d      	movs	r2, #93	@ 0x5d
 80053ac:	2101      	movs	r1, #1
 80053ae:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	225c      	movs	r2, #92	@ 0x5c
 80053b4:	2100      	movs	r1, #0
 80053b6:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80053b8:	231f      	movs	r3, #31
 80053ba:	18fb      	adds	r3, r7, r3
 80053bc:	781b      	ldrb	r3, [r3, #0]
}
 80053be:	0018      	movs	r0, r3
 80053c0:	46bd      	mov	sp, r7
 80053c2:	b008      	add	sp, #32
 80053c4:	bd80      	pop	{r7, pc}
	...

080053c8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b088      	sub	sp, #32
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	60f8      	str	r0, [r7, #12]
 80053d0:	60b9      	str	r1, [r7, #8]
 80053d2:	603b      	str	r3, [r7, #0]
 80053d4:	1dfb      	adds	r3, r7, #7
 80053d6:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80053d8:	f7fd fd86 	bl	8002ee8 <HAL_GetTick>
 80053dc:	0002      	movs	r2, r0
 80053de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053e0:	1a9b      	subs	r3, r3, r2
 80053e2:	683a      	ldr	r2, [r7, #0]
 80053e4:	18d3      	adds	r3, r2, r3
 80053e6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80053e8:	f7fd fd7e 	bl	8002ee8 <HAL_GetTick>
 80053ec:	0003      	movs	r3, r0
 80053ee:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80053f0:	4b3a      	ldr	r3, [pc, #232]	@ (80054dc <SPI_WaitFlagStateUntilTimeout+0x114>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	015b      	lsls	r3, r3, #5
 80053f6:	0d1b      	lsrs	r3, r3, #20
 80053f8:	69fa      	ldr	r2, [r7, #28]
 80053fa:	4353      	muls	r3, r2
 80053fc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80053fe:	e058      	b.n	80054b2 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	3301      	adds	r3, #1
 8005404:	d055      	beq.n	80054b2 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005406:	f7fd fd6f 	bl	8002ee8 <HAL_GetTick>
 800540a:	0002      	movs	r2, r0
 800540c:	69bb      	ldr	r3, [r7, #24]
 800540e:	1ad3      	subs	r3, r2, r3
 8005410:	69fa      	ldr	r2, [r7, #28]
 8005412:	429a      	cmp	r2, r3
 8005414:	d902      	bls.n	800541c <SPI_WaitFlagStateUntilTimeout+0x54>
 8005416:	69fb      	ldr	r3, [r7, #28]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d142      	bne.n	80054a2 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	685a      	ldr	r2, [r3, #4]
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	21e0      	movs	r1, #224	@ 0xe0
 8005428:	438a      	bics	r2, r1
 800542a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	685a      	ldr	r2, [r3, #4]
 8005430:	2382      	movs	r3, #130	@ 0x82
 8005432:	005b      	lsls	r3, r3, #1
 8005434:	429a      	cmp	r2, r3
 8005436:	d113      	bne.n	8005460 <SPI_WaitFlagStateUntilTimeout+0x98>
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	689a      	ldr	r2, [r3, #8]
 800543c:	2380      	movs	r3, #128	@ 0x80
 800543e:	021b      	lsls	r3, r3, #8
 8005440:	429a      	cmp	r2, r3
 8005442:	d005      	beq.n	8005450 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	689a      	ldr	r2, [r3, #8]
 8005448:	2380      	movs	r3, #128	@ 0x80
 800544a:	00db      	lsls	r3, r3, #3
 800544c:	429a      	cmp	r2, r3
 800544e:	d107      	bne.n	8005460 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	681a      	ldr	r2, [r3, #0]
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	2140      	movs	r1, #64	@ 0x40
 800545c:	438a      	bics	r2, r1
 800545e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005464:	2380      	movs	r3, #128	@ 0x80
 8005466:	019b      	lsls	r3, r3, #6
 8005468:	429a      	cmp	r2, r3
 800546a:	d110      	bne.n	800548e <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	491a      	ldr	r1, [pc, #104]	@ (80054e0 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8005478:	400a      	ands	r2, r1
 800547a:	601a      	str	r2, [r3, #0]
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	2180      	movs	r1, #128	@ 0x80
 8005488:	0189      	lsls	r1, r1, #6
 800548a:	430a      	orrs	r2, r1
 800548c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	225d      	movs	r2, #93	@ 0x5d
 8005492:	2101      	movs	r1, #1
 8005494:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	225c      	movs	r2, #92	@ 0x5c
 800549a:	2100      	movs	r1, #0
 800549c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800549e:	2303      	movs	r3, #3
 80054a0:	e017      	b.n	80054d2 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d101      	bne.n	80054ac <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80054a8:	2300      	movs	r3, #0
 80054aa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	3b01      	subs	r3, #1
 80054b0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	689b      	ldr	r3, [r3, #8]
 80054b8:	68ba      	ldr	r2, [r7, #8]
 80054ba:	4013      	ands	r3, r2
 80054bc:	68ba      	ldr	r2, [r7, #8]
 80054be:	1ad3      	subs	r3, r2, r3
 80054c0:	425a      	negs	r2, r3
 80054c2:	4153      	adcs	r3, r2
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	001a      	movs	r2, r3
 80054c8:	1dfb      	adds	r3, r7, #7
 80054ca:	781b      	ldrb	r3, [r3, #0]
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d197      	bne.n	8005400 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80054d0:	2300      	movs	r3, #0
}
 80054d2:	0018      	movs	r0, r3
 80054d4:	46bd      	mov	sp, r7
 80054d6:	b008      	add	sp, #32
 80054d8:	bd80      	pop	{r7, pc}
 80054da:	46c0      	nop			@ (mov r8, r8)
 80054dc:	20000000 	.word	0x20000000
 80054e0:	ffffdfff 	.word	0xffffdfff

080054e4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b08a      	sub	sp, #40	@ 0x28
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	60f8      	str	r0, [r7, #12]
 80054ec:	60b9      	str	r1, [r7, #8]
 80054ee:	607a      	str	r2, [r7, #4]
 80054f0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80054f2:	2317      	movs	r3, #23
 80054f4:	18fb      	adds	r3, r7, r3
 80054f6:	2200      	movs	r2, #0
 80054f8:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80054fa:	f7fd fcf5 	bl	8002ee8 <HAL_GetTick>
 80054fe:	0002      	movs	r2, r0
 8005500:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005502:	1a9b      	subs	r3, r3, r2
 8005504:	683a      	ldr	r2, [r7, #0]
 8005506:	18d3      	adds	r3, r2, r3
 8005508:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800550a:	f7fd fced 	bl	8002ee8 <HAL_GetTick>
 800550e:	0003      	movs	r3, r0
 8005510:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	330c      	adds	r3, #12
 8005518:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800551a:	4b41      	ldr	r3, [pc, #260]	@ (8005620 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	0013      	movs	r3, r2
 8005520:	009b      	lsls	r3, r3, #2
 8005522:	189b      	adds	r3, r3, r2
 8005524:	00da      	lsls	r2, r3, #3
 8005526:	1ad3      	subs	r3, r2, r3
 8005528:	0d1b      	lsrs	r3, r3, #20
 800552a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800552c:	4353      	muls	r3, r2
 800552e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005530:	e068      	b.n	8005604 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005532:	68ba      	ldr	r2, [r7, #8]
 8005534:	23c0      	movs	r3, #192	@ 0xc0
 8005536:	00db      	lsls	r3, r3, #3
 8005538:	429a      	cmp	r2, r3
 800553a:	d10a      	bne.n	8005552 <SPI_WaitFifoStateUntilTimeout+0x6e>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d107      	bne.n	8005552 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005542:	69fb      	ldr	r3, [r7, #28]
 8005544:	781b      	ldrb	r3, [r3, #0]
 8005546:	b2da      	uxtb	r2, r3
 8005548:	2117      	movs	r1, #23
 800554a:	187b      	adds	r3, r7, r1
 800554c:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800554e:	187b      	adds	r3, r7, r1
 8005550:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	3301      	adds	r3, #1
 8005556:	d055      	beq.n	8005604 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005558:	f7fd fcc6 	bl	8002ee8 <HAL_GetTick>
 800555c:	0002      	movs	r2, r0
 800555e:	6a3b      	ldr	r3, [r7, #32]
 8005560:	1ad3      	subs	r3, r2, r3
 8005562:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005564:	429a      	cmp	r2, r3
 8005566:	d902      	bls.n	800556e <SPI_WaitFifoStateUntilTimeout+0x8a>
 8005568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800556a:	2b00      	cmp	r3, #0
 800556c:	d142      	bne.n	80055f4 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	685a      	ldr	r2, [r3, #4]
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	21e0      	movs	r1, #224	@ 0xe0
 800557a:	438a      	bics	r2, r1
 800557c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	685a      	ldr	r2, [r3, #4]
 8005582:	2382      	movs	r3, #130	@ 0x82
 8005584:	005b      	lsls	r3, r3, #1
 8005586:	429a      	cmp	r2, r3
 8005588:	d113      	bne.n	80055b2 <SPI_WaitFifoStateUntilTimeout+0xce>
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	689a      	ldr	r2, [r3, #8]
 800558e:	2380      	movs	r3, #128	@ 0x80
 8005590:	021b      	lsls	r3, r3, #8
 8005592:	429a      	cmp	r2, r3
 8005594:	d005      	beq.n	80055a2 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	689a      	ldr	r2, [r3, #8]
 800559a:	2380      	movs	r3, #128	@ 0x80
 800559c:	00db      	lsls	r3, r3, #3
 800559e:	429a      	cmp	r2, r3
 80055a0:	d107      	bne.n	80055b2 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	2140      	movs	r1, #64	@ 0x40
 80055ae:	438a      	bics	r2, r1
 80055b0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80055b6:	2380      	movs	r3, #128	@ 0x80
 80055b8:	019b      	lsls	r3, r3, #6
 80055ba:	429a      	cmp	r2, r3
 80055bc:	d110      	bne.n	80055e0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4916      	ldr	r1, [pc, #88]	@ (8005624 <SPI_WaitFifoStateUntilTimeout+0x140>)
 80055ca:	400a      	ands	r2, r1
 80055cc:	601a      	str	r2, [r3, #0]
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	681a      	ldr	r2, [r3, #0]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	2180      	movs	r1, #128	@ 0x80
 80055da:	0189      	lsls	r1, r1, #6
 80055dc:	430a      	orrs	r2, r1
 80055de:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	225d      	movs	r2, #93	@ 0x5d
 80055e4:	2101      	movs	r1, #1
 80055e6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	225c      	movs	r2, #92	@ 0x5c
 80055ec:	2100      	movs	r1, #0
 80055ee:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80055f0:	2303      	movs	r3, #3
 80055f2:	e010      	b.n	8005616 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80055f4:	69bb      	ldr	r3, [r7, #24]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d101      	bne.n	80055fe <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80055fa:	2300      	movs	r3, #0
 80055fc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80055fe:	69bb      	ldr	r3, [r7, #24]
 8005600:	3b01      	subs	r3, #1
 8005602:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	689b      	ldr	r3, [r3, #8]
 800560a:	68ba      	ldr	r2, [r7, #8]
 800560c:	4013      	ands	r3, r2
 800560e:	687a      	ldr	r2, [r7, #4]
 8005610:	429a      	cmp	r2, r3
 8005612:	d18e      	bne.n	8005532 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8005614:	2300      	movs	r3, #0
}
 8005616:	0018      	movs	r0, r3
 8005618:	46bd      	mov	sp, r7
 800561a:	b00a      	add	sp, #40	@ 0x28
 800561c:	bd80      	pop	{r7, pc}
 800561e:	46c0      	nop			@ (mov r8, r8)
 8005620:	20000000 	.word	0x20000000
 8005624:	ffffdfff 	.word	0xffffdfff

08005628 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b086      	sub	sp, #24
 800562c:	af02      	add	r7, sp, #8
 800562e:	60f8      	str	r0, [r7, #12]
 8005630:	60b9      	str	r1, [r7, #8]
 8005632:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005634:	68ba      	ldr	r2, [r7, #8]
 8005636:	23c0      	movs	r3, #192	@ 0xc0
 8005638:	0159      	lsls	r1, r3, #5
 800563a:	68f8      	ldr	r0, [r7, #12]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	9300      	str	r3, [sp, #0]
 8005640:	0013      	movs	r3, r2
 8005642:	2200      	movs	r2, #0
 8005644:	f7ff ff4e 	bl	80054e4 <SPI_WaitFifoStateUntilTimeout>
 8005648:	1e03      	subs	r3, r0, #0
 800564a:	d007      	beq.n	800565c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005650:	2220      	movs	r2, #32
 8005652:	431a      	orrs	r2, r3
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005658:	2303      	movs	r3, #3
 800565a:	e027      	b.n	80056ac <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800565c:	68ba      	ldr	r2, [r7, #8]
 800565e:	68f8      	ldr	r0, [r7, #12]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	9300      	str	r3, [sp, #0]
 8005664:	0013      	movs	r3, r2
 8005666:	2200      	movs	r2, #0
 8005668:	2180      	movs	r1, #128	@ 0x80
 800566a:	f7ff fead 	bl	80053c8 <SPI_WaitFlagStateUntilTimeout>
 800566e:	1e03      	subs	r3, r0, #0
 8005670:	d007      	beq.n	8005682 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005676:	2220      	movs	r2, #32
 8005678:	431a      	orrs	r2, r3
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800567e:	2303      	movs	r3, #3
 8005680:	e014      	b.n	80056ac <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005682:	68ba      	ldr	r2, [r7, #8]
 8005684:	23c0      	movs	r3, #192	@ 0xc0
 8005686:	00d9      	lsls	r1, r3, #3
 8005688:	68f8      	ldr	r0, [r7, #12]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	9300      	str	r3, [sp, #0]
 800568e:	0013      	movs	r3, r2
 8005690:	2200      	movs	r2, #0
 8005692:	f7ff ff27 	bl	80054e4 <SPI_WaitFifoStateUntilTimeout>
 8005696:	1e03      	subs	r3, r0, #0
 8005698:	d007      	beq.n	80056aa <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800569e:	2220      	movs	r2, #32
 80056a0:	431a      	orrs	r2, r3
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80056a6:	2303      	movs	r3, #3
 80056a8:	e000      	b.n	80056ac <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80056aa:	2300      	movs	r3, #0
}
 80056ac:	0018      	movs	r0, r3
 80056ae:	46bd      	mov	sp, r7
 80056b0:	b004      	add	sp, #16
 80056b2:	bd80      	pop	{r7, pc}

080056b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b082      	sub	sp, #8
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d101      	bne.n	80056c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80056c2:	2301      	movs	r3, #1
 80056c4:	e04a      	b.n	800575c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	223d      	movs	r2, #61	@ 0x3d
 80056ca:	5c9b      	ldrb	r3, [r3, r2]
 80056cc:	b2db      	uxtb	r3, r3
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d107      	bne.n	80056e2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	223c      	movs	r2, #60	@ 0x3c
 80056d6:	2100      	movs	r1, #0
 80056d8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	0018      	movs	r0, r3
 80056de:	f7fd f99d 	bl	8002a1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	223d      	movs	r2, #61	@ 0x3d
 80056e6:	2102      	movs	r1, #2
 80056e8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681a      	ldr	r2, [r3, #0]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	3304      	adds	r3, #4
 80056f2:	0019      	movs	r1, r3
 80056f4:	0010      	movs	r0, r2
 80056f6:	f000 f995 	bl	8005a24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2248      	movs	r2, #72	@ 0x48
 80056fe:	2101      	movs	r1, #1
 8005700:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	223e      	movs	r2, #62	@ 0x3e
 8005706:	2101      	movs	r1, #1
 8005708:	5499      	strb	r1, [r3, r2]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	223f      	movs	r2, #63	@ 0x3f
 800570e:	2101      	movs	r1, #1
 8005710:	5499      	strb	r1, [r3, r2]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2240      	movs	r2, #64	@ 0x40
 8005716:	2101      	movs	r1, #1
 8005718:	5499      	strb	r1, [r3, r2]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2241      	movs	r2, #65	@ 0x41
 800571e:	2101      	movs	r1, #1
 8005720:	5499      	strb	r1, [r3, r2]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2242      	movs	r2, #66	@ 0x42
 8005726:	2101      	movs	r1, #1
 8005728:	5499      	strb	r1, [r3, r2]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2243      	movs	r2, #67	@ 0x43
 800572e:	2101      	movs	r1, #1
 8005730:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2244      	movs	r2, #68	@ 0x44
 8005736:	2101      	movs	r1, #1
 8005738:	5499      	strb	r1, [r3, r2]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2245      	movs	r2, #69	@ 0x45
 800573e:	2101      	movs	r1, #1
 8005740:	5499      	strb	r1, [r3, r2]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2246      	movs	r2, #70	@ 0x46
 8005746:	2101      	movs	r1, #1
 8005748:	5499      	strb	r1, [r3, r2]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2247      	movs	r2, #71	@ 0x47
 800574e:	2101      	movs	r1, #1
 8005750:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	223d      	movs	r2, #61	@ 0x3d
 8005756:	2101      	movs	r1, #1
 8005758:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800575a:	2300      	movs	r3, #0
}
 800575c:	0018      	movs	r0, r3
 800575e:	46bd      	mov	sp, r7
 8005760:	b002      	add	sp, #8
 8005762:	bd80      	pop	{r7, pc}

08005764 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b082      	sub	sp, #8
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d101      	bne.n	8005776 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005772:	2301      	movs	r3, #1
 8005774:	e04a      	b.n	800580c <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	223d      	movs	r2, #61	@ 0x3d
 800577a:	5c9b      	ldrb	r3, [r3, r2]
 800577c:	b2db      	uxtb	r3, r3
 800577e:	2b00      	cmp	r3, #0
 8005780:	d107      	bne.n	8005792 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	223c      	movs	r2, #60	@ 0x3c
 8005786:	2100      	movs	r1, #0
 8005788:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	0018      	movs	r0, r3
 800578e:	f000 f841 	bl	8005814 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	223d      	movs	r2, #61	@ 0x3d
 8005796:	2102      	movs	r1, #2
 8005798:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681a      	ldr	r2, [r3, #0]
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	3304      	adds	r3, #4
 80057a2:	0019      	movs	r1, r3
 80057a4:	0010      	movs	r0, r2
 80057a6:	f000 f93d 	bl	8005a24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2248      	movs	r2, #72	@ 0x48
 80057ae:	2101      	movs	r1, #1
 80057b0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	223e      	movs	r2, #62	@ 0x3e
 80057b6:	2101      	movs	r1, #1
 80057b8:	5499      	strb	r1, [r3, r2]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	223f      	movs	r2, #63	@ 0x3f
 80057be:	2101      	movs	r1, #1
 80057c0:	5499      	strb	r1, [r3, r2]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2240      	movs	r2, #64	@ 0x40
 80057c6:	2101      	movs	r1, #1
 80057c8:	5499      	strb	r1, [r3, r2]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2241      	movs	r2, #65	@ 0x41
 80057ce:	2101      	movs	r1, #1
 80057d0:	5499      	strb	r1, [r3, r2]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2242      	movs	r2, #66	@ 0x42
 80057d6:	2101      	movs	r1, #1
 80057d8:	5499      	strb	r1, [r3, r2]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2243      	movs	r2, #67	@ 0x43
 80057de:	2101      	movs	r1, #1
 80057e0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2244      	movs	r2, #68	@ 0x44
 80057e6:	2101      	movs	r1, #1
 80057e8:	5499      	strb	r1, [r3, r2]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2245      	movs	r2, #69	@ 0x45
 80057ee:	2101      	movs	r1, #1
 80057f0:	5499      	strb	r1, [r3, r2]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2246      	movs	r2, #70	@ 0x46
 80057f6:	2101      	movs	r1, #1
 80057f8:	5499      	strb	r1, [r3, r2]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2247      	movs	r2, #71	@ 0x47
 80057fe:	2101      	movs	r1, #1
 8005800:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	223d      	movs	r2, #61	@ 0x3d
 8005806:	2101      	movs	r1, #1
 8005808:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800580a:	2300      	movs	r3, #0
}
 800580c:	0018      	movs	r0, r3
 800580e:	46bd      	mov	sp, r7
 8005810:	b002      	add	sp, #8
 8005812:	bd80      	pop	{r7, pc}

08005814 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b082      	sub	sp, #8
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800581c:	46c0      	nop			@ (mov r8, r8)
 800581e:	46bd      	mov	sp, r7
 8005820:	b002      	add	sp, #8
 8005822:	bd80      	pop	{r7, pc}

08005824 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b086      	sub	sp, #24
 8005828:	af00      	add	r7, sp, #0
 800582a:	60f8      	str	r0, [r7, #12]
 800582c:	60b9      	str	r1, [r7, #8]
 800582e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005830:	2317      	movs	r3, #23
 8005832:	18fb      	adds	r3, r7, r3
 8005834:	2200      	movs	r2, #0
 8005836:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	223c      	movs	r2, #60	@ 0x3c
 800583c:	5c9b      	ldrb	r3, [r3, r2]
 800583e:	2b01      	cmp	r3, #1
 8005840:	d101      	bne.n	8005846 <HAL_TIM_PWM_ConfigChannel+0x22>
 8005842:	2302      	movs	r3, #2
 8005844:	e0e5      	b.n	8005a12 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	223c      	movs	r2, #60	@ 0x3c
 800584a:	2101      	movs	r1, #1
 800584c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2b14      	cmp	r3, #20
 8005852:	d900      	bls.n	8005856 <HAL_TIM_PWM_ConfigChannel+0x32>
 8005854:	e0d1      	b.n	80059fa <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	009a      	lsls	r2, r3, #2
 800585a:	4b70      	ldr	r3, [pc, #448]	@ (8005a1c <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 800585c:	18d3      	adds	r3, r2, r3
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	68ba      	ldr	r2, [r7, #8]
 8005868:	0011      	movs	r1, r2
 800586a:	0018      	movs	r0, r3
 800586c:	f000 f972 	bl	8005b54 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	699a      	ldr	r2, [r3, #24]
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	2108      	movs	r1, #8
 800587c:	430a      	orrs	r2, r1
 800587e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	699a      	ldr	r2, [r3, #24]
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	2104      	movs	r1, #4
 800588c:	438a      	bics	r2, r1
 800588e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	6999      	ldr	r1, [r3, #24]
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	691a      	ldr	r2, [r3, #16]
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	430a      	orrs	r2, r1
 80058a0:	619a      	str	r2, [r3, #24]
      break;
 80058a2:	e0af      	b.n	8005a04 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	68ba      	ldr	r2, [r7, #8]
 80058aa:	0011      	movs	r1, r2
 80058ac:	0018      	movs	r0, r3
 80058ae:	f000 f9db 	bl	8005c68 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	699a      	ldr	r2, [r3, #24]
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	2180      	movs	r1, #128	@ 0x80
 80058be:	0109      	lsls	r1, r1, #4
 80058c0:	430a      	orrs	r2, r1
 80058c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	699a      	ldr	r2, [r3, #24]
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4954      	ldr	r1, [pc, #336]	@ (8005a20 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80058d0:	400a      	ands	r2, r1
 80058d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	6999      	ldr	r1, [r3, #24]
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	691b      	ldr	r3, [r3, #16]
 80058de:	021a      	lsls	r2, r3, #8
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	430a      	orrs	r2, r1
 80058e6:	619a      	str	r2, [r3, #24]
      break;
 80058e8:	e08c      	b.n	8005a04 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	68ba      	ldr	r2, [r7, #8]
 80058f0:	0011      	movs	r1, r2
 80058f2:	0018      	movs	r0, r3
 80058f4:	f000 fa3c 	bl	8005d70 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	69da      	ldr	r2, [r3, #28]
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	2108      	movs	r1, #8
 8005904:	430a      	orrs	r2, r1
 8005906:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	69da      	ldr	r2, [r3, #28]
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	2104      	movs	r1, #4
 8005914:	438a      	bics	r2, r1
 8005916:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	69d9      	ldr	r1, [r3, #28]
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	691a      	ldr	r2, [r3, #16]
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	430a      	orrs	r2, r1
 8005928:	61da      	str	r2, [r3, #28]
      break;
 800592a:	e06b      	b.n	8005a04 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	68ba      	ldr	r2, [r7, #8]
 8005932:	0011      	movs	r1, r2
 8005934:	0018      	movs	r0, r3
 8005936:	f000 faa3 	bl	8005e80 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	69da      	ldr	r2, [r3, #28]
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	2180      	movs	r1, #128	@ 0x80
 8005946:	0109      	lsls	r1, r1, #4
 8005948:	430a      	orrs	r2, r1
 800594a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	69da      	ldr	r2, [r3, #28]
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4932      	ldr	r1, [pc, #200]	@ (8005a20 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005958:	400a      	ands	r2, r1
 800595a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	69d9      	ldr	r1, [r3, #28]
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	691b      	ldr	r3, [r3, #16]
 8005966:	021a      	lsls	r2, r3, #8
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	430a      	orrs	r2, r1
 800596e:	61da      	str	r2, [r3, #28]
      break;
 8005970:	e048      	b.n	8005a04 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	68ba      	ldr	r2, [r7, #8]
 8005978:	0011      	movs	r1, r2
 800597a:	0018      	movs	r0, r3
 800597c:	f000 faea 	bl	8005f54 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	2108      	movs	r1, #8
 800598c:	430a      	orrs	r2, r1
 800598e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	2104      	movs	r1, #4
 800599c:	438a      	bics	r2, r1
 800599e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	691a      	ldr	r2, [r3, #16]
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	430a      	orrs	r2, r1
 80059b0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80059b2:	e027      	b.n	8005a04 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	68ba      	ldr	r2, [r7, #8]
 80059ba:	0011      	movs	r1, r2
 80059bc:	0018      	movs	r0, r3
 80059be:	f000 fb29 	bl	8006014 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	2180      	movs	r1, #128	@ 0x80
 80059ce:	0109      	lsls	r1, r1, #4
 80059d0:	430a      	orrs	r2, r1
 80059d2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4910      	ldr	r1, [pc, #64]	@ (8005a20 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80059e0:	400a      	ands	r2, r1
 80059e2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	691b      	ldr	r3, [r3, #16]
 80059ee:	021a      	lsls	r2, r3, #8
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	430a      	orrs	r2, r1
 80059f6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80059f8:	e004      	b.n	8005a04 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 80059fa:	2317      	movs	r3, #23
 80059fc:	18fb      	adds	r3, r7, r3
 80059fe:	2201      	movs	r2, #1
 8005a00:	701a      	strb	r2, [r3, #0]
      break;
 8005a02:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	223c      	movs	r2, #60	@ 0x3c
 8005a08:	2100      	movs	r1, #0
 8005a0a:	5499      	strb	r1, [r3, r2]

  return status;
 8005a0c:	2317      	movs	r3, #23
 8005a0e:	18fb      	adds	r3, r7, r3
 8005a10:	781b      	ldrb	r3, [r3, #0]
}
 8005a12:	0018      	movs	r0, r3
 8005a14:	46bd      	mov	sp, r7
 8005a16:	b006      	add	sp, #24
 8005a18:	bd80      	pop	{r7, pc}
 8005a1a:	46c0      	nop			@ (mov r8, r8)
 8005a1c:	08008d34 	.word	0x08008d34
 8005a20:	fffffbff 	.word	0xfffffbff

08005a24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b084      	sub	sp, #16
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	4a3f      	ldr	r2, [pc, #252]	@ (8005b34 <TIM_Base_SetConfig+0x110>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d00c      	beq.n	8005a56 <TIM_Base_SetConfig+0x32>
 8005a3c:	687a      	ldr	r2, [r7, #4]
 8005a3e:	2380      	movs	r3, #128	@ 0x80
 8005a40:	05db      	lsls	r3, r3, #23
 8005a42:	429a      	cmp	r2, r3
 8005a44:	d007      	beq.n	8005a56 <TIM_Base_SetConfig+0x32>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	4a3b      	ldr	r2, [pc, #236]	@ (8005b38 <TIM_Base_SetConfig+0x114>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d003      	beq.n	8005a56 <TIM_Base_SetConfig+0x32>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	4a3a      	ldr	r2, [pc, #232]	@ (8005b3c <TIM_Base_SetConfig+0x118>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d108      	bne.n	8005a68 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2270      	movs	r2, #112	@ 0x70
 8005a5a:	4393      	bics	r3, r2
 8005a5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	68fa      	ldr	r2, [r7, #12]
 8005a64:	4313      	orrs	r3, r2
 8005a66:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	4a32      	ldr	r2, [pc, #200]	@ (8005b34 <TIM_Base_SetConfig+0x110>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d01c      	beq.n	8005aaa <TIM_Base_SetConfig+0x86>
 8005a70:	687a      	ldr	r2, [r7, #4]
 8005a72:	2380      	movs	r3, #128	@ 0x80
 8005a74:	05db      	lsls	r3, r3, #23
 8005a76:	429a      	cmp	r2, r3
 8005a78:	d017      	beq.n	8005aaa <TIM_Base_SetConfig+0x86>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	4a2e      	ldr	r2, [pc, #184]	@ (8005b38 <TIM_Base_SetConfig+0x114>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d013      	beq.n	8005aaa <TIM_Base_SetConfig+0x86>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	4a2d      	ldr	r2, [pc, #180]	@ (8005b3c <TIM_Base_SetConfig+0x118>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d00f      	beq.n	8005aaa <TIM_Base_SetConfig+0x86>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	4a2c      	ldr	r2, [pc, #176]	@ (8005b40 <TIM_Base_SetConfig+0x11c>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d00b      	beq.n	8005aaa <TIM_Base_SetConfig+0x86>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	4a2b      	ldr	r2, [pc, #172]	@ (8005b44 <TIM_Base_SetConfig+0x120>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d007      	beq.n	8005aaa <TIM_Base_SetConfig+0x86>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	4a2a      	ldr	r2, [pc, #168]	@ (8005b48 <TIM_Base_SetConfig+0x124>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d003      	beq.n	8005aaa <TIM_Base_SetConfig+0x86>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	4a29      	ldr	r2, [pc, #164]	@ (8005b4c <TIM_Base_SetConfig+0x128>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d108      	bne.n	8005abc <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	4a28      	ldr	r2, [pc, #160]	@ (8005b50 <TIM_Base_SetConfig+0x12c>)
 8005aae:	4013      	ands	r3, r2
 8005ab0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	68db      	ldr	r3, [r3, #12]
 8005ab6:	68fa      	ldr	r2, [r7, #12]
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2280      	movs	r2, #128	@ 0x80
 8005ac0:	4393      	bics	r3, r2
 8005ac2:	001a      	movs	r2, r3
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	695b      	ldr	r3, [r3, #20]
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	68fa      	ldr	r2, [r7, #12]
 8005ad0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	689a      	ldr	r2, [r3, #8]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	681a      	ldr	r2, [r3, #0]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	4a13      	ldr	r2, [pc, #76]	@ (8005b34 <TIM_Base_SetConfig+0x110>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d00b      	beq.n	8005b02 <TIM_Base_SetConfig+0xde>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	4a15      	ldr	r2, [pc, #84]	@ (8005b44 <TIM_Base_SetConfig+0x120>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d007      	beq.n	8005b02 <TIM_Base_SetConfig+0xde>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	4a14      	ldr	r2, [pc, #80]	@ (8005b48 <TIM_Base_SetConfig+0x124>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d003      	beq.n	8005b02 <TIM_Base_SetConfig+0xde>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	4a13      	ldr	r2, [pc, #76]	@ (8005b4c <TIM_Base_SetConfig+0x128>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d103      	bne.n	8005b0a <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	691a      	ldr	r2, [r3, #16]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2201      	movs	r2, #1
 8005b0e:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	691b      	ldr	r3, [r3, #16]
 8005b14:	2201      	movs	r2, #1
 8005b16:	4013      	ands	r3, r2
 8005b18:	2b01      	cmp	r3, #1
 8005b1a:	d106      	bne.n	8005b2a <TIM_Base_SetConfig+0x106>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	691b      	ldr	r3, [r3, #16]
 8005b20:	2201      	movs	r2, #1
 8005b22:	4393      	bics	r3, r2
 8005b24:	001a      	movs	r2, r3
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	611a      	str	r2, [r3, #16]
  }
}
 8005b2a:	46c0      	nop			@ (mov r8, r8)
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	b004      	add	sp, #16
 8005b30:	bd80      	pop	{r7, pc}
 8005b32:	46c0      	nop			@ (mov r8, r8)
 8005b34:	40012c00 	.word	0x40012c00
 8005b38:	40000400 	.word	0x40000400
 8005b3c:	40000800 	.word	0x40000800
 8005b40:	40002000 	.word	0x40002000
 8005b44:	40014000 	.word	0x40014000
 8005b48:	40014400 	.word	0x40014400
 8005b4c:	40014800 	.word	0x40014800
 8005b50:	fffffcff 	.word	0xfffffcff

08005b54 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b086      	sub	sp, #24
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
 8005b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6a1b      	ldr	r3, [r3, #32]
 8005b62:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6a1b      	ldr	r3, [r3, #32]
 8005b68:	2201      	movs	r2, #1
 8005b6a:	4393      	bics	r3, r2
 8005b6c:	001a      	movs	r2, r3
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	699b      	ldr	r3, [r3, #24]
 8005b7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	4a32      	ldr	r2, [pc, #200]	@ (8005c4c <TIM_OC1_SetConfig+0xf8>)
 8005b82:	4013      	ands	r3, r2
 8005b84:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2203      	movs	r2, #3
 8005b8a:	4393      	bics	r3, r2
 8005b8c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	68fa      	ldr	r2, [r7, #12]
 8005b94:	4313      	orrs	r3, r2
 8005b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	2202      	movs	r2, #2
 8005b9c:	4393      	bics	r3, r2
 8005b9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	697a      	ldr	r2, [r7, #20]
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	4a28      	ldr	r2, [pc, #160]	@ (8005c50 <TIM_OC1_SetConfig+0xfc>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d00b      	beq.n	8005bca <TIM_OC1_SetConfig+0x76>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	4a27      	ldr	r2, [pc, #156]	@ (8005c54 <TIM_OC1_SetConfig+0x100>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d007      	beq.n	8005bca <TIM_OC1_SetConfig+0x76>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	4a26      	ldr	r2, [pc, #152]	@ (8005c58 <TIM_OC1_SetConfig+0x104>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d003      	beq.n	8005bca <TIM_OC1_SetConfig+0x76>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	4a25      	ldr	r2, [pc, #148]	@ (8005c5c <TIM_OC1_SetConfig+0x108>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d10c      	bne.n	8005be4 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	2208      	movs	r2, #8
 8005bce:	4393      	bics	r3, r2
 8005bd0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	68db      	ldr	r3, [r3, #12]
 8005bd6:	697a      	ldr	r2, [r7, #20]
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	2204      	movs	r2, #4
 8005be0:	4393      	bics	r3, r2
 8005be2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	4a1a      	ldr	r2, [pc, #104]	@ (8005c50 <TIM_OC1_SetConfig+0xfc>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d00b      	beq.n	8005c04 <TIM_OC1_SetConfig+0xb0>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	4a19      	ldr	r2, [pc, #100]	@ (8005c54 <TIM_OC1_SetConfig+0x100>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d007      	beq.n	8005c04 <TIM_OC1_SetConfig+0xb0>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	4a18      	ldr	r2, [pc, #96]	@ (8005c58 <TIM_OC1_SetConfig+0x104>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d003      	beq.n	8005c04 <TIM_OC1_SetConfig+0xb0>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	4a17      	ldr	r2, [pc, #92]	@ (8005c5c <TIM_OC1_SetConfig+0x108>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d111      	bne.n	8005c28 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	4a16      	ldr	r2, [pc, #88]	@ (8005c60 <TIM_OC1_SetConfig+0x10c>)
 8005c08:	4013      	ands	r3, r2
 8005c0a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	4a15      	ldr	r2, [pc, #84]	@ (8005c64 <TIM_OC1_SetConfig+0x110>)
 8005c10:	4013      	ands	r3, r2
 8005c12:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	695b      	ldr	r3, [r3, #20]
 8005c18:	693a      	ldr	r2, [r7, #16]
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	699b      	ldr	r3, [r3, #24]
 8005c22:	693a      	ldr	r2, [r7, #16]
 8005c24:	4313      	orrs	r3, r2
 8005c26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	693a      	ldr	r2, [r7, #16]
 8005c2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	68fa      	ldr	r2, [r7, #12]
 8005c32:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	685a      	ldr	r2, [r3, #4]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	697a      	ldr	r2, [r7, #20]
 8005c40:	621a      	str	r2, [r3, #32]
}
 8005c42:	46c0      	nop			@ (mov r8, r8)
 8005c44:	46bd      	mov	sp, r7
 8005c46:	b006      	add	sp, #24
 8005c48:	bd80      	pop	{r7, pc}
 8005c4a:	46c0      	nop			@ (mov r8, r8)
 8005c4c:	fffeff8f 	.word	0xfffeff8f
 8005c50:	40012c00 	.word	0x40012c00
 8005c54:	40014000 	.word	0x40014000
 8005c58:	40014400 	.word	0x40014400
 8005c5c:	40014800 	.word	0x40014800
 8005c60:	fffffeff 	.word	0xfffffeff
 8005c64:	fffffdff 	.word	0xfffffdff

08005c68 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b086      	sub	sp, #24
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
 8005c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6a1b      	ldr	r3, [r3, #32]
 8005c76:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6a1b      	ldr	r3, [r3, #32]
 8005c7c:	2210      	movs	r2, #16
 8005c7e:	4393      	bics	r3, r2
 8005c80:	001a      	movs	r2, r3
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	699b      	ldr	r3, [r3, #24]
 8005c90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	4a2e      	ldr	r2, [pc, #184]	@ (8005d50 <TIM_OC2_SetConfig+0xe8>)
 8005c96:	4013      	ands	r3, r2
 8005c98:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	4a2d      	ldr	r2, [pc, #180]	@ (8005d54 <TIM_OC2_SetConfig+0xec>)
 8005c9e:	4013      	ands	r3, r2
 8005ca0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	021b      	lsls	r3, r3, #8
 8005ca8:	68fa      	ldr	r2, [r7, #12]
 8005caa:	4313      	orrs	r3, r2
 8005cac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	2220      	movs	r2, #32
 8005cb2:	4393      	bics	r3, r2
 8005cb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	011b      	lsls	r3, r3, #4
 8005cbc:	697a      	ldr	r2, [r7, #20]
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	4a24      	ldr	r2, [pc, #144]	@ (8005d58 <TIM_OC2_SetConfig+0xf0>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d10d      	bne.n	8005ce6 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	2280      	movs	r2, #128	@ 0x80
 8005cce:	4393      	bics	r3, r2
 8005cd0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	68db      	ldr	r3, [r3, #12]
 8005cd6:	011b      	lsls	r3, r3, #4
 8005cd8:	697a      	ldr	r2, [r7, #20]
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	2240      	movs	r2, #64	@ 0x40
 8005ce2:	4393      	bics	r3, r2
 8005ce4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	4a1b      	ldr	r2, [pc, #108]	@ (8005d58 <TIM_OC2_SetConfig+0xf0>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d00b      	beq.n	8005d06 <TIM_OC2_SetConfig+0x9e>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	4a1a      	ldr	r2, [pc, #104]	@ (8005d5c <TIM_OC2_SetConfig+0xf4>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d007      	beq.n	8005d06 <TIM_OC2_SetConfig+0x9e>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	4a19      	ldr	r2, [pc, #100]	@ (8005d60 <TIM_OC2_SetConfig+0xf8>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d003      	beq.n	8005d06 <TIM_OC2_SetConfig+0x9e>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	4a18      	ldr	r2, [pc, #96]	@ (8005d64 <TIM_OC2_SetConfig+0xfc>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d113      	bne.n	8005d2e <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	4a17      	ldr	r2, [pc, #92]	@ (8005d68 <TIM_OC2_SetConfig+0x100>)
 8005d0a:	4013      	ands	r3, r2
 8005d0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	4a16      	ldr	r2, [pc, #88]	@ (8005d6c <TIM_OC2_SetConfig+0x104>)
 8005d12:	4013      	ands	r3, r2
 8005d14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	695b      	ldr	r3, [r3, #20]
 8005d1a:	009b      	lsls	r3, r3, #2
 8005d1c:	693a      	ldr	r2, [r7, #16]
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	699b      	ldr	r3, [r3, #24]
 8005d26:	009b      	lsls	r3, r3, #2
 8005d28:	693a      	ldr	r2, [r7, #16]
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	693a      	ldr	r2, [r7, #16]
 8005d32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	68fa      	ldr	r2, [r7, #12]
 8005d38:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	685a      	ldr	r2, [r3, #4]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	697a      	ldr	r2, [r7, #20]
 8005d46:	621a      	str	r2, [r3, #32]
}
 8005d48:	46c0      	nop			@ (mov r8, r8)
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	b006      	add	sp, #24
 8005d4e:	bd80      	pop	{r7, pc}
 8005d50:	feff8fff 	.word	0xfeff8fff
 8005d54:	fffffcff 	.word	0xfffffcff
 8005d58:	40012c00 	.word	0x40012c00
 8005d5c:	40014000 	.word	0x40014000
 8005d60:	40014400 	.word	0x40014400
 8005d64:	40014800 	.word	0x40014800
 8005d68:	fffffbff 	.word	0xfffffbff
 8005d6c:	fffff7ff 	.word	0xfffff7ff

08005d70 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b086      	sub	sp, #24
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
 8005d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6a1b      	ldr	r3, [r3, #32]
 8005d7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6a1b      	ldr	r3, [r3, #32]
 8005d84:	4a33      	ldr	r2, [pc, #204]	@ (8005e54 <TIM_OC3_SetConfig+0xe4>)
 8005d86:	401a      	ands	r2, r3
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	69db      	ldr	r3, [r3, #28]
 8005d96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	4a2f      	ldr	r2, [pc, #188]	@ (8005e58 <TIM_OC3_SetConfig+0xe8>)
 8005d9c:	4013      	ands	r3, r2
 8005d9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	2203      	movs	r2, #3
 8005da4:	4393      	bics	r3, r2
 8005da6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	68fa      	ldr	r2, [r7, #12]
 8005dae:	4313      	orrs	r3, r2
 8005db0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	4a29      	ldr	r2, [pc, #164]	@ (8005e5c <TIM_OC3_SetConfig+0xec>)
 8005db6:	4013      	ands	r3, r2
 8005db8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	021b      	lsls	r3, r3, #8
 8005dc0:	697a      	ldr	r2, [r7, #20]
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	4a25      	ldr	r2, [pc, #148]	@ (8005e60 <TIM_OC3_SetConfig+0xf0>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d10d      	bne.n	8005dea <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	4a24      	ldr	r2, [pc, #144]	@ (8005e64 <TIM_OC3_SetConfig+0xf4>)
 8005dd2:	4013      	ands	r3, r2
 8005dd4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	68db      	ldr	r3, [r3, #12]
 8005dda:	021b      	lsls	r3, r3, #8
 8005ddc:	697a      	ldr	r2, [r7, #20]
 8005dde:	4313      	orrs	r3, r2
 8005de0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	4a20      	ldr	r2, [pc, #128]	@ (8005e68 <TIM_OC3_SetConfig+0xf8>)
 8005de6:	4013      	ands	r3, r2
 8005de8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	4a1c      	ldr	r2, [pc, #112]	@ (8005e60 <TIM_OC3_SetConfig+0xf0>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d00b      	beq.n	8005e0a <TIM_OC3_SetConfig+0x9a>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	4a1d      	ldr	r2, [pc, #116]	@ (8005e6c <TIM_OC3_SetConfig+0xfc>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d007      	beq.n	8005e0a <TIM_OC3_SetConfig+0x9a>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	4a1c      	ldr	r2, [pc, #112]	@ (8005e70 <TIM_OC3_SetConfig+0x100>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d003      	beq.n	8005e0a <TIM_OC3_SetConfig+0x9a>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	4a1b      	ldr	r2, [pc, #108]	@ (8005e74 <TIM_OC3_SetConfig+0x104>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d113      	bne.n	8005e32 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	4a1a      	ldr	r2, [pc, #104]	@ (8005e78 <TIM_OC3_SetConfig+0x108>)
 8005e0e:	4013      	ands	r3, r2
 8005e10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	4a19      	ldr	r2, [pc, #100]	@ (8005e7c <TIM_OC3_SetConfig+0x10c>)
 8005e16:	4013      	ands	r3, r2
 8005e18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	695b      	ldr	r3, [r3, #20]
 8005e1e:	011b      	lsls	r3, r3, #4
 8005e20:	693a      	ldr	r2, [r7, #16]
 8005e22:	4313      	orrs	r3, r2
 8005e24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	699b      	ldr	r3, [r3, #24]
 8005e2a:	011b      	lsls	r3, r3, #4
 8005e2c:	693a      	ldr	r2, [r7, #16]
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	693a      	ldr	r2, [r7, #16]
 8005e36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	68fa      	ldr	r2, [r7, #12]
 8005e3c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	685a      	ldr	r2, [r3, #4]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	697a      	ldr	r2, [r7, #20]
 8005e4a:	621a      	str	r2, [r3, #32]
}
 8005e4c:	46c0      	nop			@ (mov r8, r8)
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	b006      	add	sp, #24
 8005e52:	bd80      	pop	{r7, pc}
 8005e54:	fffffeff 	.word	0xfffffeff
 8005e58:	fffeff8f 	.word	0xfffeff8f
 8005e5c:	fffffdff 	.word	0xfffffdff
 8005e60:	40012c00 	.word	0x40012c00
 8005e64:	fffff7ff 	.word	0xfffff7ff
 8005e68:	fffffbff 	.word	0xfffffbff
 8005e6c:	40014000 	.word	0x40014000
 8005e70:	40014400 	.word	0x40014400
 8005e74:	40014800 	.word	0x40014800
 8005e78:	ffffefff 	.word	0xffffefff
 8005e7c:	ffffdfff 	.word	0xffffdfff

08005e80 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b086      	sub	sp, #24
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6a1b      	ldr	r3, [r3, #32]
 8005e8e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6a1b      	ldr	r3, [r3, #32]
 8005e94:	4a26      	ldr	r2, [pc, #152]	@ (8005f30 <TIM_OC4_SetConfig+0xb0>)
 8005e96:	401a      	ands	r2, r3
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	69db      	ldr	r3, [r3, #28]
 8005ea6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	4a22      	ldr	r2, [pc, #136]	@ (8005f34 <TIM_OC4_SetConfig+0xb4>)
 8005eac:	4013      	ands	r3, r2
 8005eae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	4a21      	ldr	r2, [pc, #132]	@ (8005f38 <TIM_OC4_SetConfig+0xb8>)
 8005eb4:	4013      	ands	r3, r2
 8005eb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	021b      	lsls	r3, r3, #8
 8005ebe:	68fa      	ldr	r2, [r7, #12]
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	4a1d      	ldr	r2, [pc, #116]	@ (8005f3c <TIM_OC4_SetConfig+0xbc>)
 8005ec8:	4013      	ands	r3, r2
 8005eca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	689b      	ldr	r3, [r3, #8]
 8005ed0:	031b      	lsls	r3, r3, #12
 8005ed2:	693a      	ldr	r2, [r7, #16]
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	4a19      	ldr	r2, [pc, #100]	@ (8005f40 <TIM_OC4_SetConfig+0xc0>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d00b      	beq.n	8005ef8 <TIM_OC4_SetConfig+0x78>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	4a18      	ldr	r2, [pc, #96]	@ (8005f44 <TIM_OC4_SetConfig+0xc4>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d007      	beq.n	8005ef8 <TIM_OC4_SetConfig+0x78>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	4a17      	ldr	r2, [pc, #92]	@ (8005f48 <TIM_OC4_SetConfig+0xc8>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d003      	beq.n	8005ef8 <TIM_OC4_SetConfig+0x78>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	4a16      	ldr	r2, [pc, #88]	@ (8005f4c <TIM_OC4_SetConfig+0xcc>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d109      	bne.n	8005f0c <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	4a15      	ldr	r2, [pc, #84]	@ (8005f50 <TIM_OC4_SetConfig+0xd0>)
 8005efc:	4013      	ands	r3, r2
 8005efe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	695b      	ldr	r3, [r3, #20]
 8005f04:	019b      	lsls	r3, r3, #6
 8005f06:	697a      	ldr	r2, [r7, #20]
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	697a      	ldr	r2, [r7, #20]
 8005f10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	68fa      	ldr	r2, [r7, #12]
 8005f16:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	685a      	ldr	r2, [r3, #4]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	693a      	ldr	r2, [r7, #16]
 8005f24:	621a      	str	r2, [r3, #32]
}
 8005f26:	46c0      	nop			@ (mov r8, r8)
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	b006      	add	sp, #24
 8005f2c:	bd80      	pop	{r7, pc}
 8005f2e:	46c0      	nop			@ (mov r8, r8)
 8005f30:	ffffefff 	.word	0xffffefff
 8005f34:	feff8fff 	.word	0xfeff8fff
 8005f38:	fffffcff 	.word	0xfffffcff
 8005f3c:	ffffdfff 	.word	0xffffdfff
 8005f40:	40012c00 	.word	0x40012c00
 8005f44:	40014000 	.word	0x40014000
 8005f48:	40014400 	.word	0x40014400
 8005f4c:	40014800 	.word	0x40014800
 8005f50:	ffffbfff 	.word	0xffffbfff

08005f54 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b086      	sub	sp, #24
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6a1b      	ldr	r3, [r3, #32]
 8005f62:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6a1b      	ldr	r3, [r3, #32]
 8005f68:	4a23      	ldr	r2, [pc, #140]	@ (8005ff8 <TIM_OC5_SetConfig+0xa4>)
 8005f6a:	401a      	ands	r2, r3
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	4a1f      	ldr	r2, [pc, #124]	@ (8005ffc <TIM_OC5_SetConfig+0xa8>)
 8005f80:	4013      	ands	r3, r2
 8005f82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	68fa      	ldr	r2, [r7, #12]
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	4a1b      	ldr	r2, [pc, #108]	@ (8006000 <TIM_OC5_SetConfig+0xac>)
 8005f92:	4013      	ands	r3, r2
 8005f94:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	689b      	ldr	r3, [r3, #8]
 8005f9a:	041b      	lsls	r3, r3, #16
 8005f9c:	693a      	ldr	r2, [r7, #16]
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	4a17      	ldr	r2, [pc, #92]	@ (8006004 <TIM_OC5_SetConfig+0xb0>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d00b      	beq.n	8005fc2 <TIM_OC5_SetConfig+0x6e>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	4a16      	ldr	r2, [pc, #88]	@ (8006008 <TIM_OC5_SetConfig+0xb4>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d007      	beq.n	8005fc2 <TIM_OC5_SetConfig+0x6e>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	4a15      	ldr	r2, [pc, #84]	@ (800600c <TIM_OC5_SetConfig+0xb8>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d003      	beq.n	8005fc2 <TIM_OC5_SetConfig+0x6e>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	4a14      	ldr	r2, [pc, #80]	@ (8006010 <TIM_OC5_SetConfig+0xbc>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d109      	bne.n	8005fd6 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	4a0c      	ldr	r2, [pc, #48]	@ (8005ff8 <TIM_OC5_SetConfig+0xa4>)
 8005fc6:	4013      	ands	r3, r2
 8005fc8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	695b      	ldr	r3, [r3, #20]
 8005fce:	021b      	lsls	r3, r3, #8
 8005fd0:	697a      	ldr	r2, [r7, #20]
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	697a      	ldr	r2, [r7, #20]
 8005fda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	68fa      	ldr	r2, [r7, #12]
 8005fe0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	685a      	ldr	r2, [r3, #4]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	693a      	ldr	r2, [r7, #16]
 8005fee:	621a      	str	r2, [r3, #32]
}
 8005ff0:	46c0      	nop			@ (mov r8, r8)
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	b006      	add	sp, #24
 8005ff6:	bd80      	pop	{r7, pc}
 8005ff8:	fffeffff 	.word	0xfffeffff
 8005ffc:	fffeff8f 	.word	0xfffeff8f
 8006000:	fffdffff 	.word	0xfffdffff
 8006004:	40012c00 	.word	0x40012c00
 8006008:	40014000 	.word	0x40014000
 800600c:	40014400 	.word	0x40014400
 8006010:	40014800 	.word	0x40014800

08006014 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b086      	sub	sp, #24
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
 800601c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6a1b      	ldr	r3, [r3, #32]
 8006022:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6a1b      	ldr	r3, [r3, #32]
 8006028:	4a24      	ldr	r2, [pc, #144]	@ (80060bc <TIM_OC6_SetConfig+0xa8>)
 800602a:	401a      	ands	r2, r3
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800603a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	4a20      	ldr	r2, [pc, #128]	@ (80060c0 <TIM_OC6_SetConfig+0xac>)
 8006040:	4013      	ands	r3, r2
 8006042:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	021b      	lsls	r3, r3, #8
 800604a:	68fa      	ldr	r2, [r7, #12]
 800604c:	4313      	orrs	r3, r2
 800604e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	4a1c      	ldr	r2, [pc, #112]	@ (80060c4 <TIM_OC6_SetConfig+0xb0>)
 8006054:	4013      	ands	r3, r2
 8006056:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	689b      	ldr	r3, [r3, #8]
 800605c:	051b      	lsls	r3, r3, #20
 800605e:	693a      	ldr	r2, [r7, #16]
 8006060:	4313      	orrs	r3, r2
 8006062:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	4a18      	ldr	r2, [pc, #96]	@ (80060c8 <TIM_OC6_SetConfig+0xb4>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d00b      	beq.n	8006084 <TIM_OC6_SetConfig+0x70>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	4a17      	ldr	r2, [pc, #92]	@ (80060cc <TIM_OC6_SetConfig+0xb8>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d007      	beq.n	8006084 <TIM_OC6_SetConfig+0x70>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	4a16      	ldr	r2, [pc, #88]	@ (80060d0 <TIM_OC6_SetConfig+0xbc>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d003      	beq.n	8006084 <TIM_OC6_SetConfig+0x70>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	4a15      	ldr	r2, [pc, #84]	@ (80060d4 <TIM_OC6_SetConfig+0xc0>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d109      	bne.n	8006098 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	4a14      	ldr	r2, [pc, #80]	@ (80060d8 <TIM_OC6_SetConfig+0xc4>)
 8006088:	4013      	ands	r3, r2
 800608a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	695b      	ldr	r3, [r3, #20]
 8006090:	029b      	lsls	r3, r3, #10
 8006092:	697a      	ldr	r2, [r7, #20]
 8006094:	4313      	orrs	r3, r2
 8006096:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	697a      	ldr	r2, [r7, #20]
 800609c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	68fa      	ldr	r2, [r7, #12]
 80060a2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	685a      	ldr	r2, [r3, #4]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	693a      	ldr	r2, [r7, #16]
 80060b0:	621a      	str	r2, [r3, #32]
}
 80060b2:	46c0      	nop			@ (mov r8, r8)
 80060b4:	46bd      	mov	sp, r7
 80060b6:	b006      	add	sp, #24
 80060b8:	bd80      	pop	{r7, pc}
 80060ba:	46c0      	nop			@ (mov r8, r8)
 80060bc:	ffefffff 	.word	0xffefffff
 80060c0:	feff8fff 	.word	0xfeff8fff
 80060c4:	ffdfffff 	.word	0xffdfffff
 80060c8:	40012c00 	.word	0x40012c00
 80060cc:	40014000 	.word	0x40014000
 80060d0:	40014400 	.word	0x40014400
 80060d4:	40014800 	.word	0x40014800
 80060d8:	fffbffff 	.word	0xfffbffff

080060dc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b084      	sub	sp, #16
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
 80060e4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80060e6:	2300      	movs	r3, #0
 80060e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	223c      	movs	r2, #60	@ 0x3c
 80060ee:	5c9b      	ldrb	r3, [r3, r2]
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	d101      	bne.n	80060f8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80060f4:	2302      	movs	r3, #2
 80060f6:	e06f      	b.n	80061d8 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	223c      	movs	r2, #60	@ 0x3c
 80060fc:	2101      	movs	r1, #1
 80060fe:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	22ff      	movs	r2, #255	@ 0xff
 8006104:	4393      	bics	r3, r2
 8006106:	001a      	movs	r2, r3
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	68db      	ldr	r3, [r3, #12]
 800610c:	4313      	orrs	r3, r2
 800610e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	4a33      	ldr	r2, [pc, #204]	@ (80061e0 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8006114:	401a      	ands	r2, r3
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	689b      	ldr	r3, [r3, #8]
 800611a:	4313      	orrs	r3, r2
 800611c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	4a30      	ldr	r2, [pc, #192]	@ (80061e4 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8006122:	401a      	ands	r2, r3
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	685b      	ldr	r3, [r3, #4]
 8006128:	4313      	orrs	r3, r2
 800612a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	4a2e      	ldr	r2, [pc, #184]	@ (80061e8 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 8006130:	401a      	ands	r2, r3
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4313      	orrs	r3, r2
 8006138:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	4a2b      	ldr	r2, [pc, #172]	@ (80061ec <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800613e:	401a      	ands	r2, r3
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	691b      	ldr	r3, [r3, #16]
 8006144:	4313      	orrs	r3, r2
 8006146:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	4a29      	ldr	r2, [pc, #164]	@ (80061f0 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800614c:	401a      	ands	r2, r3
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	695b      	ldr	r3, [r3, #20]
 8006152:	4313      	orrs	r3, r2
 8006154:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	4a26      	ldr	r2, [pc, #152]	@ (80061f4 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 800615a:	401a      	ands	r2, r3
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006160:	4313      	orrs	r3, r2
 8006162:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	4a24      	ldr	r2, [pc, #144]	@ (80061f8 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8006168:	401a      	ands	r2, r3
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	699b      	ldr	r3, [r3, #24]
 800616e:	041b      	lsls	r3, r3, #16
 8006170:	4313      	orrs	r3, r2
 8006172:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	4a21      	ldr	r2, [pc, #132]	@ (80061fc <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8006178:	401a      	ands	r2, r3
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	69db      	ldr	r3, [r3, #28]
 800617e:	4313      	orrs	r3, r2
 8006180:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a1e      	ldr	r2, [pc, #120]	@ (8006200 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d11c      	bne.n	80061c6 <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	4a1d      	ldr	r2, [pc, #116]	@ (8006204 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8006190:	401a      	ands	r2, r3
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006196:	051b      	lsls	r3, r3, #20
 8006198:	4313      	orrs	r3, r2
 800619a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	4a1a      	ldr	r2, [pc, #104]	@ (8006208 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 80061a0:	401a      	ands	r2, r3
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	6a1b      	ldr	r3, [r3, #32]
 80061a6:	4313      	orrs	r3, r2
 80061a8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	4a17      	ldr	r2, [pc, #92]	@ (800620c <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 80061ae:	401a      	ands	r2, r3
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061b4:	4313      	orrs	r3, r2
 80061b6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	4a15      	ldr	r2, [pc, #84]	@ (8006210 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80061bc:	401a      	ands	r2, r3
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061c2:	4313      	orrs	r3, r2
 80061c4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	68fa      	ldr	r2, [r7, #12]
 80061cc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	223c      	movs	r2, #60	@ 0x3c
 80061d2:	2100      	movs	r1, #0
 80061d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80061d6:	2300      	movs	r3, #0
}
 80061d8:	0018      	movs	r0, r3
 80061da:	46bd      	mov	sp, r7
 80061dc:	b004      	add	sp, #16
 80061de:	bd80      	pop	{r7, pc}
 80061e0:	fffffcff 	.word	0xfffffcff
 80061e4:	fffffbff 	.word	0xfffffbff
 80061e8:	fffff7ff 	.word	0xfffff7ff
 80061ec:	ffffefff 	.word	0xffffefff
 80061f0:	ffffdfff 	.word	0xffffdfff
 80061f4:	ffffbfff 	.word	0xffffbfff
 80061f8:	fff0ffff 	.word	0xfff0ffff
 80061fc:	efffffff 	.word	0xefffffff
 8006200:	40012c00 	.word	0x40012c00
 8006204:	ff0fffff 	.word	0xff0fffff
 8006208:	feffffff 	.word	0xfeffffff
 800620c:	fdffffff 	.word	0xfdffffff
 8006210:	dfffffff 	.word	0xdfffffff

08006214 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b082      	sub	sp, #8
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d101      	bne.n	8006226 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006222:	2301      	movs	r3, #1
 8006224:	e046      	b.n	80062b4 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2288      	movs	r2, #136	@ 0x88
 800622a:	589b      	ldr	r3, [r3, r2]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d107      	bne.n	8006240 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2284      	movs	r2, #132	@ 0x84
 8006234:	2100      	movs	r1, #0
 8006236:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	0018      	movs	r0, r3
 800623c:	f7fc fc4a 	bl	8002ad4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2288      	movs	r2, #136	@ 0x88
 8006244:	2124      	movs	r1, #36	@ 0x24
 8006246:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	681a      	ldr	r2, [r3, #0]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	2101      	movs	r1, #1
 8006254:	438a      	bics	r2, r1
 8006256:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800625c:	2b00      	cmp	r3, #0
 800625e:	d003      	beq.n	8006268 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	0018      	movs	r0, r3
 8006264:	f000 fc68 	bl	8006b38 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	0018      	movs	r0, r3
 800626c:	f000 f90e 	bl	800648c <UART_SetConfig>
 8006270:	0003      	movs	r3, r0
 8006272:	2b01      	cmp	r3, #1
 8006274:	d101      	bne.n	800627a <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8006276:	2301      	movs	r3, #1
 8006278:	e01c      	b.n	80062b4 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	685a      	ldr	r2, [r3, #4]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	490d      	ldr	r1, [pc, #52]	@ (80062bc <HAL_UART_Init+0xa8>)
 8006286:	400a      	ands	r2, r1
 8006288:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	689a      	ldr	r2, [r3, #8]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	212a      	movs	r1, #42	@ 0x2a
 8006296:	438a      	bics	r2, r1
 8006298:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	681a      	ldr	r2, [r3, #0]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	2101      	movs	r1, #1
 80062a6:	430a      	orrs	r2, r1
 80062a8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	0018      	movs	r0, r3
 80062ae:	f000 fcf7 	bl	8006ca0 <UART_CheckIdleState>
 80062b2:	0003      	movs	r3, r0
}
 80062b4:	0018      	movs	r0, r3
 80062b6:	46bd      	mov	sp, r7
 80062b8:	b002      	add	sp, #8
 80062ba:	bd80      	pop	{r7, pc}
 80062bc:	ffffb7ff 	.word	0xffffb7ff

080062c0 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b08a      	sub	sp, #40	@ 0x28
 80062c4:	af02      	add	r7, sp, #8
 80062c6:	60f8      	str	r0, [r7, #12]
 80062c8:	60b9      	str	r1, [r7, #8]
 80062ca:	603b      	str	r3, [r7, #0]
 80062cc:	1dbb      	adds	r3, r7, #6
 80062ce:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	228c      	movs	r2, #140	@ 0x8c
 80062d4:	589b      	ldr	r3, [r3, r2]
 80062d6:	2b20      	cmp	r3, #32
 80062d8:	d000      	beq.n	80062dc <HAL_UART_Receive+0x1c>
 80062da:	e0d0      	b.n	800647e <HAL_UART_Receive+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d003      	beq.n	80062ea <HAL_UART_Receive+0x2a>
 80062e2:	1dbb      	adds	r3, r7, #6
 80062e4:	881b      	ldrh	r3, [r3, #0]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d101      	bne.n	80062ee <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 80062ea:	2301      	movs	r3, #1
 80062ec:	e0c8      	b.n	8006480 <HAL_UART_Receive+0x1c0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	689a      	ldr	r2, [r3, #8]
 80062f2:	2380      	movs	r3, #128	@ 0x80
 80062f4:	015b      	lsls	r3, r3, #5
 80062f6:	429a      	cmp	r2, r3
 80062f8:	d109      	bne.n	800630e <HAL_UART_Receive+0x4e>
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	691b      	ldr	r3, [r3, #16]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d105      	bne.n	800630e <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	2201      	movs	r2, #1
 8006306:	4013      	ands	r3, r2
 8006308:	d001      	beq.n	800630e <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 800630a:	2301      	movs	r3, #1
 800630c:	e0b8      	b.n	8006480 <HAL_UART_Receive+0x1c0>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2290      	movs	r2, #144	@ 0x90
 8006312:	2100      	movs	r1, #0
 8006314:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	228c      	movs	r2, #140	@ 0x8c
 800631a:	2122      	movs	r1, #34	@ 0x22
 800631c:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2200      	movs	r2, #0
 8006322:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006324:	f7fc fde0 	bl	8002ee8 <HAL_GetTick>
 8006328:	0003      	movs	r3, r0
 800632a:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	1dba      	adds	r2, r7, #6
 8006330:	215c      	movs	r1, #92	@ 0x5c
 8006332:	8812      	ldrh	r2, [r2, #0]
 8006334:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	1dba      	adds	r2, r7, #6
 800633a:	215e      	movs	r1, #94	@ 0x5e
 800633c:	8812      	ldrh	r2, [r2, #0]
 800633e:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	689a      	ldr	r2, [r3, #8]
 8006344:	2380      	movs	r3, #128	@ 0x80
 8006346:	015b      	lsls	r3, r3, #5
 8006348:	429a      	cmp	r2, r3
 800634a:	d10d      	bne.n	8006368 <HAL_UART_Receive+0xa8>
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	691b      	ldr	r3, [r3, #16]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d104      	bne.n	800635e <HAL_UART_Receive+0x9e>
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	2260      	movs	r2, #96	@ 0x60
 8006358:	494b      	ldr	r1, [pc, #300]	@ (8006488 <HAL_UART_Receive+0x1c8>)
 800635a:	5299      	strh	r1, [r3, r2]
 800635c:	e02e      	b.n	80063bc <HAL_UART_Receive+0xfc>
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	2260      	movs	r2, #96	@ 0x60
 8006362:	21ff      	movs	r1, #255	@ 0xff
 8006364:	5299      	strh	r1, [r3, r2]
 8006366:	e029      	b.n	80063bc <HAL_UART_Receive+0xfc>
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	689b      	ldr	r3, [r3, #8]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d10d      	bne.n	800638c <HAL_UART_Receive+0xcc>
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	691b      	ldr	r3, [r3, #16]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d104      	bne.n	8006382 <HAL_UART_Receive+0xc2>
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2260      	movs	r2, #96	@ 0x60
 800637c:	21ff      	movs	r1, #255	@ 0xff
 800637e:	5299      	strh	r1, [r3, r2]
 8006380:	e01c      	b.n	80063bc <HAL_UART_Receive+0xfc>
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2260      	movs	r2, #96	@ 0x60
 8006386:	217f      	movs	r1, #127	@ 0x7f
 8006388:	5299      	strh	r1, [r3, r2]
 800638a:	e017      	b.n	80063bc <HAL_UART_Receive+0xfc>
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	689a      	ldr	r2, [r3, #8]
 8006390:	2380      	movs	r3, #128	@ 0x80
 8006392:	055b      	lsls	r3, r3, #21
 8006394:	429a      	cmp	r2, r3
 8006396:	d10d      	bne.n	80063b4 <HAL_UART_Receive+0xf4>
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	691b      	ldr	r3, [r3, #16]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d104      	bne.n	80063aa <HAL_UART_Receive+0xea>
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	2260      	movs	r2, #96	@ 0x60
 80063a4:	217f      	movs	r1, #127	@ 0x7f
 80063a6:	5299      	strh	r1, [r3, r2]
 80063a8:	e008      	b.n	80063bc <HAL_UART_Receive+0xfc>
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2260      	movs	r2, #96	@ 0x60
 80063ae:	213f      	movs	r1, #63	@ 0x3f
 80063b0:	5299      	strh	r1, [r3, r2]
 80063b2:	e003      	b.n	80063bc <HAL_UART_Receive+0xfc>
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2260      	movs	r2, #96	@ 0x60
 80063b8:	2100      	movs	r1, #0
 80063ba:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 80063bc:	2312      	movs	r3, #18
 80063be:	18fb      	adds	r3, r7, r3
 80063c0:	68fa      	ldr	r2, [r7, #12]
 80063c2:	2160      	movs	r1, #96	@ 0x60
 80063c4:	5a52      	ldrh	r2, [r2, r1]
 80063c6:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	689a      	ldr	r2, [r3, #8]
 80063cc:	2380      	movs	r3, #128	@ 0x80
 80063ce:	015b      	lsls	r3, r3, #5
 80063d0:	429a      	cmp	r2, r3
 80063d2:	d108      	bne.n	80063e6 <HAL_UART_Receive+0x126>
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	691b      	ldr	r3, [r3, #16]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d104      	bne.n	80063e6 <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 80063dc:	2300      	movs	r3, #0
 80063de:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	61bb      	str	r3, [r7, #24]
 80063e4:	e003      	b.n	80063ee <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80063ea:	2300      	movs	r3, #0
 80063ec:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80063ee:	e03a      	b.n	8006466 <HAL_UART_Receive+0x1a6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80063f0:	697a      	ldr	r2, [r7, #20]
 80063f2:	68f8      	ldr	r0, [r7, #12]
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	9300      	str	r3, [sp, #0]
 80063f8:	0013      	movs	r3, r2
 80063fa:	2200      	movs	r2, #0
 80063fc:	2120      	movs	r1, #32
 80063fe:	f000 fcf9 	bl	8006df4 <UART_WaitOnFlagUntilTimeout>
 8006402:	1e03      	subs	r3, r0, #0
 8006404:	d005      	beq.n	8006412 <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	228c      	movs	r2, #140	@ 0x8c
 800640a:	2120      	movs	r1, #32
 800640c:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 800640e:	2303      	movs	r3, #3
 8006410:	e036      	b.n	8006480 <HAL_UART_Receive+0x1c0>
      }
      if (pdata8bits == NULL)
 8006412:	69fb      	ldr	r3, [r7, #28]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d10e      	bne.n	8006436 <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800641e:	b29b      	uxth	r3, r3
 8006420:	2212      	movs	r2, #18
 8006422:	18ba      	adds	r2, r7, r2
 8006424:	8812      	ldrh	r2, [r2, #0]
 8006426:	4013      	ands	r3, r2
 8006428:	b29a      	uxth	r2, r3
 800642a:	69bb      	ldr	r3, [r7, #24]
 800642c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800642e:	69bb      	ldr	r3, [r7, #24]
 8006430:	3302      	adds	r3, #2
 8006432:	61bb      	str	r3, [r7, #24]
 8006434:	e00e      	b.n	8006454 <HAL_UART_Receive+0x194>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800643c:	b2db      	uxtb	r3, r3
 800643e:	2212      	movs	r2, #18
 8006440:	18ba      	adds	r2, r7, r2
 8006442:	8812      	ldrh	r2, [r2, #0]
 8006444:	b2d2      	uxtb	r2, r2
 8006446:	4013      	ands	r3, r2
 8006448:	b2da      	uxtb	r2, r3
 800644a:	69fb      	ldr	r3, [r7, #28]
 800644c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800644e:	69fb      	ldr	r3, [r7, #28]
 8006450:	3301      	adds	r3, #1
 8006452:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	225e      	movs	r2, #94	@ 0x5e
 8006458:	5a9b      	ldrh	r3, [r3, r2]
 800645a:	b29b      	uxth	r3, r3
 800645c:	3b01      	subs	r3, #1
 800645e:	b299      	uxth	r1, r3
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	225e      	movs	r2, #94	@ 0x5e
 8006464:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	225e      	movs	r2, #94	@ 0x5e
 800646a:	5a9b      	ldrh	r3, [r3, r2]
 800646c:	b29b      	uxth	r3, r3
 800646e:	2b00      	cmp	r3, #0
 8006470:	d1be      	bne.n	80063f0 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	228c      	movs	r2, #140	@ 0x8c
 8006476:	2120      	movs	r1, #32
 8006478:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800647a:	2300      	movs	r3, #0
 800647c:	e000      	b.n	8006480 <HAL_UART_Receive+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 800647e:	2302      	movs	r3, #2
  }
}
 8006480:	0018      	movs	r0, r3
 8006482:	46bd      	mov	sp, r7
 8006484:	b008      	add	sp, #32
 8006486:	bd80      	pop	{r7, pc}
 8006488:	000001ff 	.word	0x000001ff

0800648c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800648c:	b5b0      	push	{r4, r5, r7, lr}
 800648e:	b090      	sub	sp, #64	@ 0x40
 8006490:	af00      	add	r7, sp, #0
 8006492:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006494:	231a      	movs	r3, #26
 8006496:	2220      	movs	r2, #32
 8006498:	189b      	adds	r3, r3, r2
 800649a:	19db      	adds	r3, r3, r7
 800649c:	2200      	movs	r2, #0
 800649e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80064a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064a2:	689a      	ldr	r2, [r3, #8]
 80064a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064a6:	691b      	ldr	r3, [r3, #16]
 80064a8:	431a      	orrs	r2, r3
 80064aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064ac:	695b      	ldr	r3, [r3, #20]
 80064ae:	431a      	orrs	r2, r3
 80064b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064b2:	69db      	ldr	r3, [r3, #28]
 80064b4:	4313      	orrs	r3, r2
 80064b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80064b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4ac1      	ldr	r2, [pc, #772]	@ (80067c4 <UART_SetConfig+0x338>)
 80064c0:	4013      	ands	r3, r2
 80064c2:	0019      	movs	r1, r3
 80064c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064c6:	681a      	ldr	r2, [r3, #0]
 80064c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80064ca:	430b      	orrs	r3, r1
 80064cc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80064ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	4abc      	ldr	r2, [pc, #752]	@ (80067c8 <UART_SetConfig+0x33c>)
 80064d6:	4013      	ands	r3, r2
 80064d8:	0018      	movs	r0, r3
 80064da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064dc:	68d9      	ldr	r1, [r3, #12]
 80064de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064e0:	681a      	ldr	r2, [r3, #0]
 80064e2:	0003      	movs	r3, r0
 80064e4:	430b      	orrs	r3, r1
 80064e6:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80064e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064ea:	699b      	ldr	r3, [r3, #24]
 80064ec:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80064ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4ab6      	ldr	r2, [pc, #728]	@ (80067cc <UART_SetConfig+0x340>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d009      	beq.n	800650c <UART_SetConfig+0x80>
 80064f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4ab4      	ldr	r2, [pc, #720]	@ (80067d0 <UART_SetConfig+0x344>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d004      	beq.n	800650c <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006504:	6a1b      	ldr	r3, [r3, #32]
 8006506:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006508:	4313      	orrs	r3, r2
 800650a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800650c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	689b      	ldr	r3, [r3, #8]
 8006512:	4ab0      	ldr	r2, [pc, #704]	@ (80067d4 <UART_SetConfig+0x348>)
 8006514:	4013      	ands	r3, r2
 8006516:	0019      	movs	r1, r3
 8006518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800651a:	681a      	ldr	r2, [r3, #0]
 800651c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800651e:	430b      	orrs	r3, r1
 8006520:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006528:	220f      	movs	r2, #15
 800652a:	4393      	bics	r3, r2
 800652c:	0018      	movs	r0, r3
 800652e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006530:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8006532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006534:	681a      	ldr	r2, [r3, #0]
 8006536:	0003      	movs	r3, r0
 8006538:	430b      	orrs	r3, r1
 800653a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800653c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4aa5      	ldr	r2, [pc, #660]	@ (80067d8 <UART_SetConfig+0x34c>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d131      	bne.n	80065aa <UART_SetConfig+0x11e>
 8006546:	4ba5      	ldr	r3, [pc, #660]	@ (80067dc <UART_SetConfig+0x350>)
 8006548:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800654a:	2203      	movs	r2, #3
 800654c:	4013      	ands	r3, r2
 800654e:	2b03      	cmp	r3, #3
 8006550:	d01d      	beq.n	800658e <UART_SetConfig+0x102>
 8006552:	d823      	bhi.n	800659c <UART_SetConfig+0x110>
 8006554:	2b02      	cmp	r3, #2
 8006556:	d00c      	beq.n	8006572 <UART_SetConfig+0xe6>
 8006558:	d820      	bhi.n	800659c <UART_SetConfig+0x110>
 800655a:	2b00      	cmp	r3, #0
 800655c:	d002      	beq.n	8006564 <UART_SetConfig+0xd8>
 800655e:	2b01      	cmp	r3, #1
 8006560:	d00e      	beq.n	8006580 <UART_SetConfig+0xf4>
 8006562:	e01b      	b.n	800659c <UART_SetConfig+0x110>
 8006564:	231b      	movs	r3, #27
 8006566:	2220      	movs	r2, #32
 8006568:	189b      	adds	r3, r3, r2
 800656a:	19db      	adds	r3, r3, r7
 800656c:	2200      	movs	r2, #0
 800656e:	701a      	strb	r2, [r3, #0]
 8006570:	e154      	b.n	800681c <UART_SetConfig+0x390>
 8006572:	231b      	movs	r3, #27
 8006574:	2220      	movs	r2, #32
 8006576:	189b      	adds	r3, r3, r2
 8006578:	19db      	adds	r3, r3, r7
 800657a:	2202      	movs	r2, #2
 800657c:	701a      	strb	r2, [r3, #0]
 800657e:	e14d      	b.n	800681c <UART_SetConfig+0x390>
 8006580:	231b      	movs	r3, #27
 8006582:	2220      	movs	r2, #32
 8006584:	189b      	adds	r3, r3, r2
 8006586:	19db      	adds	r3, r3, r7
 8006588:	2204      	movs	r2, #4
 800658a:	701a      	strb	r2, [r3, #0]
 800658c:	e146      	b.n	800681c <UART_SetConfig+0x390>
 800658e:	231b      	movs	r3, #27
 8006590:	2220      	movs	r2, #32
 8006592:	189b      	adds	r3, r3, r2
 8006594:	19db      	adds	r3, r3, r7
 8006596:	2208      	movs	r2, #8
 8006598:	701a      	strb	r2, [r3, #0]
 800659a:	e13f      	b.n	800681c <UART_SetConfig+0x390>
 800659c:	231b      	movs	r3, #27
 800659e:	2220      	movs	r2, #32
 80065a0:	189b      	adds	r3, r3, r2
 80065a2:	19db      	adds	r3, r3, r7
 80065a4:	2210      	movs	r2, #16
 80065a6:	701a      	strb	r2, [r3, #0]
 80065a8:	e138      	b.n	800681c <UART_SetConfig+0x390>
 80065aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a8c      	ldr	r2, [pc, #560]	@ (80067e0 <UART_SetConfig+0x354>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d131      	bne.n	8006618 <UART_SetConfig+0x18c>
 80065b4:	4b89      	ldr	r3, [pc, #548]	@ (80067dc <UART_SetConfig+0x350>)
 80065b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065b8:	220c      	movs	r2, #12
 80065ba:	4013      	ands	r3, r2
 80065bc:	2b0c      	cmp	r3, #12
 80065be:	d01d      	beq.n	80065fc <UART_SetConfig+0x170>
 80065c0:	d823      	bhi.n	800660a <UART_SetConfig+0x17e>
 80065c2:	2b08      	cmp	r3, #8
 80065c4:	d00c      	beq.n	80065e0 <UART_SetConfig+0x154>
 80065c6:	d820      	bhi.n	800660a <UART_SetConfig+0x17e>
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d002      	beq.n	80065d2 <UART_SetConfig+0x146>
 80065cc:	2b04      	cmp	r3, #4
 80065ce:	d00e      	beq.n	80065ee <UART_SetConfig+0x162>
 80065d0:	e01b      	b.n	800660a <UART_SetConfig+0x17e>
 80065d2:	231b      	movs	r3, #27
 80065d4:	2220      	movs	r2, #32
 80065d6:	189b      	adds	r3, r3, r2
 80065d8:	19db      	adds	r3, r3, r7
 80065da:	2200      	movs	r2, #0
 80065dc:	701a      	strb	r2, [r3, #0]
 80065de:	e11d      	b.n	800681c <UART_SetConfig+0x390>
 80065e0:	231b      	movs	r3, #27
 80065e2:	2220      	movs	r2, #32
 80065e4:	189b      	adds	r3, r3, r2
 80065e6:	19db      	adds	r3, r3, r7
 80065e8:	2202      	movs	r2, #2
 80065ea:	701a      	strb	r2, [r3, #0]
 80065ec:	e116      	b.n	800681c <UART_SetConfig+0x390>
 80065ee:	231b      	movs	r3, #27
 80065f0:	2220      	movs	r2, #32
 80065f2:	189b      	adds	r3, r3, r2
 80065f4:	19db      	adds	r3, r3, r7
 80065f6:	2204      	movs	r2, #4
 80065f8:	701a      	strb	r2, [r3, #0]
 80065fa:	e10f      	b.n	800681c <UART_SetConfig+0x390>
 80065fc:	231b      	movs	r3, #27
 80065fe:	2220      	movs	r2, #32
 8006600:	189b      	adds	r3, r3, r2
 8006602:	19db      	adds	r3, r3, r7
 8006604:	2208      	movs	r2, #8
 8006606:	701a      	strb	r2, [r3, #0]
 8006608:	e108      	b.n	800681c <UART_SetConfig+0x390>
 800660a:	231b      	movs	r3, #27
 800660c:	2220      	movs	r2, #32
 800660e:	189b      	adds	r3, r3, r2
 8006610:	19db      	adds	r3, r3, r7
 8006612:	2210      	movs	r2, #16
 8006614:	701a      	strb	r2, [r3, #0]
 8006616:	e101      	b.n	800681c <UART_SetConfig+0x390>
 8006618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a71      	ldr	r2, [pc, #452]	@ (80067e4 <UART_SetConfig+0x358>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d131      	bne.n	8006686 <UART_SetConfig+0x1fa>
 8006622:	4b6e      	ldr	r3, [pc, #440]	@ (80067dc <UART_SetConfig+0x350>)
 8006624:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006626:	2230      	movs	r2, #48	@ 0x30
 8006628:	4013      	ands	r3, r2
 800662a:	2b30      	cmp	r3, #48	@ 0x30
 800662c:	d01d      	beq.n	800666a <UART_SetConfig+0x1de>
 800662e:	d823      	bhi.n	8006678 <UART_SetConfig+0x1ec>
 8006630:	2b20      	cmp	r3, #32
 8006632:	d00c      	beq.n	800664e <UART_SetConfig+0x1c2>
 8006634:	d820      	bhi.n	8006678 <UART_SetConfig+0x1ec>
 8006636:	2b00      	cmp	r3, #0
 8006638:	d002      	beq.n	8006640 <UART_SetConfig+0x1b4>
 800663a:	2b10      	cmp	r3, #16
 800663c:	d00e      	beq.n	800665c <UART_SetConfig+0x1d0>
 800663e:	e01b      	b.n	8006678 <UART_SetConfig+0x1ec>
 8006640:	231b      	movs	r3, #27
 8006642:	2220      	movs	r2, #32
 8006644:	189b      	adds	r3, r3, r2
 8006646:	19db      	adds	r3, r3, r7
 8006648:	2200      	movs	r2, #0
 800664a:	701a      	strb	r2, [r3, #0]
 800664c:	e0e6      	b.n	800681c <UART_SetConfig+0x390>
 800664e:	231b      	movs	r3, #27
 8006650:	2220      	movs	r2, #32
 8006652:	189b      	adds	r3, r3, r2
 8006654:	19db      	adds	r3, r3, r7
 8006656:	2202      	movs	r2, #2
 8006658:	701a      	strb	r2, [r3, #0]
 800665a:	e0df      	b.n	800681c <UART_SetConfig+0x390>
 800665c:	231b      	movs	r3, #27
 800665e:	2220      	movs	r2, #32
 8006660:	189b      	adds	r3, r3, r2
 8006662:	19db      	adds	r3, r3, r7
 8006664:	2204      	movs	r2, #4
 8006666:	701a      	strb	r2, [r3, #0]
 8006668:	e0d8      	b.n	800681c <UART_SetConfig+0x390>
 800666a:	231b      	movs	r3, #27
 800666c:	2220      	movs	r2, #32
 800666e:	189b      	adds	r3, r3, r2
 8006670:	19db      	adds	r3, r3, r7
 8006672:	2208      	movs	r2, #8
 8006674:	701a      	strb	r2, [r3, #0]
 8006676:	e0d1      	b.n	800681c <UART_SetConfig+0x390>
 8006678:	231b      	movs	r3, #27
 800667a:	2220      	movs	r2, #32
 800667c:	189b      	adds	r3, r3, r2
 800667e:	19db      	adds	r3, r3, r7
 8006680:	2210      	movs	r2, #16
 8006682:	701a      	strb	r2, [r3, #0]
 8006684:	e0ca      	b.n	800681c <UART_SetConfig+0x390>
 8006686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4a57      	ldr	r2, [pc, #348]	@ (80067e8 <UART_SetConfig+0x35c>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d106      	bne.n	800669e <UART_SetConfig+0x212>
 8006690:	231b      	movs	r3, #27
 8006692:	2220      	movs	r2, #32
 8006694:	189b      	adds	r3, r3, r2
 8006696:	19db      	adds	r3, r3, r7
 8006698:	2200      	movs	r2, #0
 800669a:	701a      	strb	r2, [r3, #0]
 800669c:	e0be      	b.n	800681c <UART_SetConfig+0x390>
 800669e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a52      	ldr	r2, [pc, #328]	@ (80067ec <UART_SetConfig+0x360>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d106      	bne.n	80066b6 <UART_SetConfig+0x22a>
 80066a8:	231b      	movs	r3, #27
 80066aa:	2220      	movs	r2, #32
 80066ac:	189b      	adds	r3, r3, r2
 80066ae:	19db      	adds	r3, r3, r7
 80066b0:	2200      	movs	r2, #0
 80066b2:	701a      	strb	r2, [r3, #0]
 80066b4:	e0b2      	b.n	800681c <UART_SetConfig+0x390>
 80066b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a4d      	ldr	r2, [pc, #308]	@ (80067f0 <UART_SetConfig+0x364>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d106      	bne.n	80066ce <UART_SetConfig+0x242>
 80066c0:	231b      	movs	r3, #27
 80066c2:	2220      	movs	r2, #32
 80066c4:	189b      	adds	r3, r3, r2
 80066c6:	19db      	adds	r3, r3, r7
 80066c8:	2200      	movs	r2, #0
 80066ca:	701a      	strb	r2, [r3, #0]
 80066cc:	e0a6      	b.n	800681c <UART_SetConfig+0x390>
 80066ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a3e      	ldr	r2, [pc, #248]	@ (80067cc <UART_SetConfig+0x340>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d13e      	bne.n	8006756 <UART_SetConfig+0x2ca>
 80066d8:	4b40      	ldr	r3, [pc, #256]	@ (80067dc <UART_SetConfig+0x350>)
 80066da:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80066dc:	23c0      	movs	r3, #192	@ 0xc0
 80066de:	011b      	lsls	r3, r3, #4
 80066e0:	4013      	ands	r3, r2
 80066e2:	22c0      	movs	r2, #192	@ 0xc0
 80066e4:	0112      	lsls	r2, r2, #4
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d027      	beq.n	800673a <UART_SetConfig+0x2ae>
 80066ea:	22c0      	movs	r2, #192	@ 0xc0
 80066ec:	0112      	lsls	r2, r2, #4
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d82a      	bhi.n	8006748 <UART_SetConfig+0x2bc>
 80066f2:	2280      	movs	r2, #128	@ 0x80
 80066f4:	0112      	lsls	r2, r2, #4
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d011      	beq.n	800671e <UART_SetConfig+0x292>
 80066fa:	2280      	movs	r2, #128	@ 0x80
 80066fc:	0112      	lsls	r2, r2, #4
 80066fe:	4293      	cmp	r3, r2
 8006700:	d822      	bhi.n	8006748 <UART_SetConfig+0x2bc>
 8006702:	2b00      	cmp	r3, #0
 8006704:	d004      	beq.n	8006710 <UART_SetConfig+0x284>
 8006706:	2280      	movs	r2, #128	@ 0x80
 8006708:	00d2      	lsls	r2, r2, #3
 800670a:	4293      	cmp	r3, r2
 800670c:	d00e      	beq.n	800672c <UART_SetConfig+0x2a0>
 800670e:	e01b      	b.n	8006748 <UART_SetConfig+0x2bc>
 8006710:	231b      	movs	r3, #27
 8006712:	2220      	movs	r2, #32
 8006714:	189b      	adds	r3, r3, r2
 8006716:	19db      	adds	r3, r3, r7
 8006718:	2200      	movs	r2, #0
 800671a:	701a      	strb	r2, [r3, #0]
 800671c:	e07e      	b.n	800681c <UART_SetConfig+0x390>
 800671e:	231b      	movs	r3, #27
 8006720:	2220      	movs	r2, #32
 8006722:	189b      	adds	r3, r3, r2
 8006724:	19db      	adds	r3, r3, r7
 8006726:	2202      	movs	r2, #2
 8006728:	701a      	strb	r2, [r3, #0]
 800672a:	e077      	b.n	800681c <UART_SetConfig+0x390>
 800672c:	231b      	movs	r3, #27
 800672e:	2220      	movs	r2, #32
 8006730:	189b      	adds	r3, r3, r2
 8006732:	19db      	adds	r3, r3, r7
 8006734:	2204      	movs	r2, #4
 8006736:	701a      	strb	r2, [r3, #0]
 8006738:	e070      	b.n	800681c <UART_SetConfig+0x390>
 800673a:	231b      	movs	r3, #27
 800673c:	2220      	movs	r2, #32
 800673e:	189b      	adds	r3, r3, r2
 8006740:	19db      	adds	r3, r3, r7
 8006742:	2208      	movs	r2, #8
 8006744:	701a      	strb	r2, [r3, #0]
 8006746:	e069      	b.n	800681c <UART_SetConfig+0x390>
 8006748:	231b      	movs	r3, #27
 800674a:	2220      	movs	r2, #32
 800674c:	189b      	adds	r3, r3, r2
 800674e:	19db      	adds	r3, r3, r7
 8006750:	2210      	movs	r2, #16
 8006752:	701a      	strb	r2, [r3, #0]
 8006754:	e062      	b.n	800681c <UART_SetConfig+0x390>
 8006756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a1d      	ldr	r2, [pc, #116]	@ (80067d0 <UART_SetConfig+0x344>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d157      	bne.n	8006810 <UART_SetConfig+0x384>
 8006760:	4b1e      	ldr	r3, [pc, #120]	@ (80067dc <UART_SetConfig+0x350>)
 8006762:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006764:	23c0      	movs	r3, #192	@ 0xc0
 8006766:	009b      	lsls	r3, r3, #2
 8006768:	4013      	ands	r3, r2
 800676a:	22c0      	movs	r2, #192	@ 0xc0
 800676c:	0092      	lsls	r2, r2, #2
 800676e:	4293      	cmp	r3, r2
 8006770:	d040      	beq.n	80067f4 <UART_SetConfig+0x368>
 8006772:	22c0      	movs	r2, #192	@ 0xc0
 8006774:	0092      	lsls	r2, r2, #2
 8006776:	4293      	cmp	r3, r2
 8006778:	d843      	bhi.n	8006802 <UART_SetConfig+0x376>
 800677a:	2280      	movs	r2, #128	@ 0x80
 800677c:	0092      	lsls	r2, r2, #2
 800677e:	4293      	cmp	r3, r2
 8006780:	d011      	beq.n	80067a6 <UART_SetConfig+0x31a>
 8006782:	2280      	movs	r2, #128	@ 0x80
 8006784:	0092      	lsls	r2, r2, #2
 8006786:	4293      	cmp	r3, r2
 8006788:	d83b      	bhi.n	8006802 <UART_SetConfig+0x376>
 800678a:	2b00      	cmp	r3, #0
 800678c:	d004      	beq.n	8006798 <UART_SetConfig+0x30c>
 800678e:	2280      	movs	r2, #128	@ 0x80
 8006790:	0052      	lsls	r2, r2, #1
 8006792:	4293      	cmp	r3, r2
 8006794:	d00e      	beq.n	80067b4 <UART_SetConfig+0x328>
 8006796:	e034      	b.n	8006802 <UART_SetConfig+0x376>
 8006798:	231b      	movs	r3, #27
 800679a:	2220      	movs	r2, #32
 800679c:	189b      	adds	r3, r3, r2
 800679e:	19db      	adds	r3, r3, r7
 80067a0:	2200      	movs	r2, #0
 80067a2:	701a      	strb	r2, [r3, #0]
 80067a4:	e03a      	b.n	800681c <UART_SetConfig+0x390>
 80067a6:	231b      	movs	r3, #27
 80067a8:	2220      	movs	r2, #32
 80067aa:	189b      	adds	r3, r3, r2
 80067ac:	19db      	adds	r3, r3, r7
 80067ae:	2202      	movs	r2, #2
 80067b0:	701a      	strb	r2, [r3, #0]
 80067b2:	e033      	b.n	800681c <UART_SetConfig+0x390>
 80067b4:	231b      	movs	r3, #27
 80067b6:	2220      	movs	r2, #32
 80067b8:	189b      	adds	r3, r3, r2
 80067ba:	19db      	adds	r3, r3, r7
 80067bc:	2204      	movs	r2, #4
 80067be:	701a      	strb	r2, [r3, #0]
 80067c0:	e02c      	b.n	800681c <UART_SetConfig+0x390>
 80067c2:	46c0      	nop			@ (mov r8, r8)
 80067c4:	cfff69f3 	.word	0xcfff69f3
 80067c8:	ffffcfff 	.word	0xffffcfff
 80067cc:	40008000 	.word	0x40008000
 80067d0:	40008400 	.word	0x40008400
 80067d4:	11fff4ff 	.word	0x11fff4ff
 80067d8:	40013800 	.word	0x40013800
 80067dc:	40021000 	.word	0x40021000
 80067e0:	40004400 	.word	0x40004400
 80067e4:	40004800 	.word	0x40004800
 80067e8:	40004c00 	.word	0x40004c00
 80067ec:	40005000 	.word	0x40005000
 80067f0:	40013c00 	.word	0x40013c00
 80067f4:	231b      	movs	r3, #27
 80067f6:	2220      	movs	r2, #32
 80067f8:	189b      	adds	r3, r3, r2
 80067fa:	19db      	adds	r3, r3, r7
 80067fc:	2208      	movs	r2, #8
 80067fe:	701a      	strb	r2, [r3, #0]
 8006800:	e00c      	b.n	800681c <UART_SetConfig+0x390>
 8006802:	231b      	movs	r3, #27
 8006804:	2220      	movs	r2, #32
 8006806:	189b      	adds	r3, r3, r2
 8006808:	19db      	adds	r3, r3, r7
 800680a:	2210      	movs	r2, #16
 800680c:	701a      	strb	r2, [r3, #0]
 800680e:	e005      	b.n	800681c <UART_SetConfig+0x390>
 8006810:	231b      	movs	r3, #27
 8006812:	2220      	movs	r2, #32
 8006814:	189b      	adds	r3, r3, r2
 8006816:	19db      	adds	r3, r3, r7
 8006818:	2210      	movs	r2, #16
 800681a:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800681c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4ac1      	ldr	r2, [pc, #772]	@ (8006b28 <UART_SetConfig+0x69c>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d005      	beq.n	8006832 <UART_SetConfig+0x3a6>
 8006826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4ac0      	ldr	r2, [pc, #768]	@ (8006b2c <UART_SetConfig+0x6a0>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d000      	beq.n	8006832 <UART_SetConfig+0x3a6>
 8006830:	e093      	b.n	800695a <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006832:	231b      	movs	r3, #27
 8006834:	2220      	movs	r2, #32
 8006836:	189b      	adds	r3, r3, r2
 8006838:	19db      	adds	r3, r3, r7
 800683a:	781b      	ldrb	r3, [r3, #0]
 800683c:	2b08      	cmp	r3, #8
 800683e:	d015      	beq.n	800686c <UART_SetConfig+0x3e0>
 8006840:	dc18      	bgt.n	8006874 <UART_SetConfig+0x3e8>
 8006842:	2b04      	cmp	r3, #4
 8006844:	d00d      	beq.n	8006862 <UART_SetConfig+0x3d6>
 8006846:	dc15      	bgt.n	8006874 <UART_SetConfig+0x3e8>
 8006848:	2b00      	cmp	r3, #0
 800684a:	d002      	beq.n	8006852 <UART_SetConfig+0x3c6>
 800684c:	2b02      	cmp	r3, #2
 800684e:	d005      	beq.n	800685c <UART_SetConfig+0x3d0>
 8006850:	e010      	b.n	8006874 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006852:	f7fe f94f 	bl	8004af4 <HAL_RCC_GetPCLK1Freq>
 8006856:	0003      	movs	r3, r0
 8006858:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800685a:	e014      	b.n	8006886 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800685c:	4bb4      	ldr	r3, [pc, #720]	@ (8006b30 <UART_SetConfig+0x6a4>)
 800685e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006860:	e011      	b.n	8006886 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006862:	f7fe f8bb 	bl	80049dc <HAL_RCC_GetSysClockFreq>
 8006866:	0003      	movs	r3, r0
 8006868:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800686a:	e00c      	b.n	8006886 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800686c:	2380      	movs	r3, #128	@ 0x80
 800686e:	021b      	lsls	r3, r3, #8
 8006870:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006872:	e008      	b.n	8006886 <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 8006874:	2300      	movs	r3, #0
 8006876:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8006878:	231a      	movs	r3, #26
 800687a:	2220      	movs	r2, #32
 800687c:	189b      	adds	r3, r3, r2
 800687e:	19db      	adds	r3, r3, r7
 8006880:	2201      	movs	r2, #1
 8006882:	701a      	strb	r2, [r3, #0]
        break;
 8006884:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006886:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006888:	2b00      	cmp	r3, #0
 800688a:	d100      	bne.n	800688e <UART_SetConfig+0x402>
 800688c:	e135      	b.n	8006afa <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800688e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006890:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006892:	4ba8      	ldr	r3, [pc, #672]	@ (8006b34 <UART_SetConfig+0x6a8>)
 8006894:	0052      	lsls	r2, r2, #1
 8006896:	5ad3      	ldrh	r3, [r2, r3]
 8006898:	0019      	movs	r1, r3
 800689a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800689c:	f7f9 fc46 	bl	800012c <__udivsi3>
 80068a0:	0003      	movs	r3, r0
 80068a2:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80068a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068a6:	685a      	ldr	r2, [r3, #4]
 80068a8:	0013      	movs	r3, r2
 80068aa:	005b      	lsls	r3, r3, #1
 80068ac:	189b      	adds	r3, r3, r2
 80068ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80068b0:	429a      	cmp	r2, r3
 80068b2:	d305      	bcc.n	80068c0 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80068b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80068ba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80068bc:	429a      	cmp	r2, r3
 80068be:	d906      	bls.n	80068ce <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 80068c0:	231a      	movs	r3, #26
 80068c2:	2220      	movs	r2, #32
 80068c4:	189b      	adds	r3, r3, r2
 80068c6:	19db      	adds	r3, r3, r7
 80068c8:	2201      	movs	r2, #1
 80068ca:	701a      	strb	r2, [r3, #0]
 80068cc:	e044      	b.n	8006958 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80068ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068d0:	61bb      	str	r3, [r7, #24]
 80068d2:	2300      	movs	r3, #0
 80068d4:	61fb      	str	r3, [r7, #28]
 80068d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068d8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80068da:	4b96      	ldr	r3, [pc, #600]	@ (8006b34 <UART_SetConfig+0x6a8>)
 80068dc:	0052      	lsls	r2, r2, #1
 80068de:	5ad3      	ldrh	r3, [r2, r3]
 80068e0:	613b      	str	r3, [r7, #16]
 80068e2:	2300      	movs	r3, #0
 80068e4:	617b      	str	r3, [r7, #20]
 80068e6:	693a      	ldr	r2, [r7, #16]
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	69b8      	ldr	r0, [r7, #24]
 80068ec:	69f9      	ldr	r1, [r7, #28]
 80068ee:	f7f9 fd93 	bl	8000418 <__aeabi_uldivmod>
 80068f2:	0002      	movs	r2, r0
 80068f4:	000b      	movs	r3, r1
 80068f6:	0e11      	lsrs	r1, r2, #24
 80068f8:	021d      	lsls	r5, r3, #8
 80068fa:	430d      	orrs	r5, r1
 80068fc:	0214      	lsls	r4, r2, #8
 80068fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	085b      	lsrs	r3, r3, #1
 8006904:	60bb      	str	r3, [r7, #8]
 8006906:	2300      	movs	r3, #0
 8006908:	60fb      	str	r3, [r7, #12]
 800690a:	68b8      	ldr	r0, [r7, #8]
 800690c:	68f9      	ldr	r1, [r7, #12]
 800690e:	1900      	adds	r0, r0, r4
 8006910:	4169      	adcs	r1, r5
 8006912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	603b      	str	r3, [r7, #0]
 8006918:	2300      	movs	r3, #0
 800691a:	607b      	str	r3, [r7, #4]
 800691c:	683a      	ldr	r2, [r7, #0]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	f7f9 fd7a 	bl	8000418 <__aeabi_uldivmod>
 8006924:	0002      	movs	r2, r0
 8006926:	000b      	movs	r3, r1
 8006928:	0013      	movs	r3, r2
 800692a:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800692c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800692e:	23c0      	movs	r3, #192	@ 0xc0
 8006930:	009b      	lsls	r3, r3, #2
 8006932:	429a      	cmp	r2, r3
 8006934:	d309      	bcc.n	800694a <UART_SetConfig+0x4be>
 8006936:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006938:	2380      	movs	r3, #128	@ 0x80
 800693a:	035b      	lsls	r3, r3, #13
 800693c:	429a      	cmp	r2, r3
 800693e:	d204      	bcs.n	800694a <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 8006940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006946:	60da      	str	r2, [r3, #12]
 8006948:	e006      	b.n	8006958 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 800694a:	231a      	movs	r3, #26
 800694c:	2220      	movs	r2, #32
 800694e:	189b      	adds	r3, r3, r2
 8006950:	19db      	adds	r3, r3, r7
 8006952:	2201      	movs	r2, #1
 8006954:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 8006956:	e0d0      	b.n	8006afa <UART_SetConfig+0x66e>
 8006958:	e0cf      	b.n	8006afa <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800695a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800695c:	69da      	ldr	r2, [r3, #28]
 800695e:	2380      	movs	r3, #128	@ 0x80
 8006960:	021b      	lsls	r3, r3, #8
 8006962:	429a      	cmp	r2, r3
 8006964:	d000      	beq.n	8006968 <UART_SetConfig+0x4dc>
 8006966:	e070      	b.n	8006a4a <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 8006968:	231b      	movs	r3, #27
 800696a:	2220      	movs	r2, #32
 800696c:	189b      	adds	r3, r3, r2
 800696e:	19db      	adds	r3, r3, r7
 8006970:	781b      	ldrb	r3, [r3, #0]
 8006972:	2b08      	cmp	r3, #8
 8006974:	d015      	beq.n	80069a2 <UART_SetConfig+0x516>
 8006976:	dc18      	bgt.n	80069aa <UART_SetConfig+0x51e>
 8006978:	2b04      	cmp	r3, #4
 800697a:	d00d      	beq.n	8006998 <UART_SetConfig+0x50c>
 800697c:	dc15      	bgt.n	80069aa <UART_SetConfig+0x51e>
 800697e:	2b00      	cmp	r3, #0
 8006980:	d002      	beq.n	8006988 <UART_SetConfig+0x4fc>
 8006982:	2b02      	cmp	r3, #2
 8006984:	d005      	beq.n	8006992 <UART_SetConfig+0x506>
 8006986:	e010      	b.n	80069aa <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006988:	f7fe f8b4 	bl	8004af4 <HAL_RCC_GetPCLK1Freq>
 800698c:	0003      	movs	r3, r0
 800698e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006990:	e014      	b.n	80069bc <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006992:	4b67      	ldr	r3, [pc, #412]	@ (8006b30 <UART_SetConfig+0x6a4>)
 8006994:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006996:	e011      	b.n	80069bc <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006998:	f7fe f820 	bl	80049dc <HAL_RCC_GetSysClockFreq>
 800699c:	0003      	movs	r3, r0
 800699e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80069a0:	e00c      	b.n	80069bc <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80069a2:	2380      	movs	r3, #128	@ 0x80
 80069a4:	021b      	lsls	r3, r3, #8
 80069a6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80069a8:	e008      	b.n	80069bc <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 80069aa:	2300      	movs	r3, #0
 80069ac:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80069ae:	231a      	movs	r3, #26
 80069b0:	2220      	movs	r2, #32
 80069b2:	189b      	adds	r3, r3, r2
 80069b4:	19db      	adds	r3, r3, r7
 80069b6:	2201      	movs	r2, #1
 80069b8:	701a      	strb	r2, [r3, #0]
        break;
 80069ba:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80069bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d100      	bne.n	80069c4 <UART_SetConfig+0x538>
 80069c2:	e09a      	b.n	8006afa <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80069c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069c6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80069c8:	4b5a      	ldr	r3, [pc, #360]	@ (8006b34 <UART_SetConfig+0x6a8>)
 80069ca:	0052      	lsls	r2, r2, #1
 80069cc:	5ad3      	ldrh	r3, [r2, r3]
 80069ce:	0019      	movs	r1, r3
 80069d0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80069d2:	f7f9 fbab 	bl	800012c <__udivsi3>
 80069d6:	0003      	movs	r3, r0
 80069d8:	005a      	lsls	r2, r3, #1
 80069da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	085b      	lsrs	r3, r3, #1
 80069e0:	18d2      	adds	r2, r2, r3
 80069e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	0019      	movs	r1, r3
 80069e8:	0010      	movs	r0, r2
 80069ea:	f7f9 fb9f 	bl	800012c <__udivsi3>
 80069ee:	0003      	movs	r3, r0
 80069f0:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80069f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069f4:	2b0f      	cmp	r3, #15
 80069f6:	d921      	bls.n	8006a3c <UART_SetConfig+0x5b0>
 80069f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80069fa:	2380      	movs	r3, #128	@ 0x80
 80069fc:	025b      	lsls	r3, r3, #9
 80069fe:	429a      	cmp	r2, r3
 8006a00:	d21c      	bcs.n	8006a3c <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006a02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a04:	b29a      	uxth	r2, r3
 8006a06:	200e      	movs	r0, #14
 8006a08:	2420      	movs	r4, #32
 8006a0a:	1903      	adds	r3, r0, r4
 8006a0c:	19db      	adds	r3, r3, r7
 8006a0e:	210f      	movs	r1, #15
 8006a10:	438a      	bics	r2, r1
 8006a12:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006a14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a16:	085b      	lsrs	r3, r3, #1
 8006a18:	b29b      	uxth	r3, r3
 8006a1a:	2207      	movs	r2, #7
 8006a1c:	4013      	ands	r3, r2
 8006a1e:	b299      	uxth	r1, r3
 8006a20:	1903      	adds	r3, r0, r4
 8006a22:	19db      	adds	r3, r3, r7
 8006a24:	1902      	adds	r2, r0, r4
 8006a26:	19d2      	adds	r2, r2, r7
 8006a28:	8812      	ldrh	r2, [r2, #0]
 8006a2a:	430a      	orrs	r2, r1
 8006a2c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	1902      	adds	r2, r0, r4
 8006a34:	19d2      	adds	r2, r2, r7
 8006a36:	8812      	ldrh	r2, [r2, #0]
 8006a38:	60da      	str	r2, [r3, #12]
 8006a3a:	e05e      	b.n	8006afa <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8006a3c:	231a      	movs	r3, #26
 8006a3e:	2220      	movs	r2, #32
 8006a40:	189b      	adds	r3, r3, r2
 8006a42:	19db      	adds	r3, r3, r7
 8006a44:	2201      	movs	r2, #1
 8006a46:	701a      	strb	r2, [r3, #0]
 8006a48:	e057      	b.n	8006afa <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006a4a:	231b      	movs	r3, #27
 8006a4c:	2220      	movs	r2, #32
 8006a4e:	189b      	adds	r3, r3, r2
 8006a50:	19db      	adds	r3, r3, r7
 8006a52:	781b      	ldrb	r3, [r3, #0]
 8006a54:	2b08      	cmp	r3, #8
 8006a56:	d015      	beq.n	8006a84 <UART_SetConfig+0x5f8>
 8006a58:	dc18      	bgt.n	8006a8c <UART_SetConfig+0x600>
 8006a5a:	2b04      	cmp	r3, #4
 8006a5c:	d00d      	beq.n	8006a7a <UART_SetConfig+0x5ee>
 8006a5e:	dc15      	bgt.n	8006a8c <UART_SetConfig+0x600>
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d002      	beq.n	8006a6a <UART_SetConfig+0x5de>
 8006a64:	2b02      	cmp	r3, #2
 8006a66:	d005      	beq.n	8006a74 <UART_SetConfig+0x5e8>
 8006a68:	e010      	b.n	8006a8c <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a6a:	f7fe f843 	bl	8004af4 <HAL_RCC_GetPCLK1Freq>
 8006a6e:	0003      	movs	r3, r0
 8006a70:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006a72:	e014      	b.n	8006a9e <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a74:	4b2e      	ldr	r3, [pc, #184]	@ (8006b30 <UART_SetConfig+0x6a4>)
 8006a76:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006a78:	e011      	b.n	8006a9e <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a7a:	f7fd ffaf 	bl	80049dc <HAL_RCC_GetSysClockFreq>
 8006a7e:	0003      	movs	r3, r0
 8006a80:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006a82:	e00c      	b.n	8006a9e <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a84:	2380      	movs	r3, #128	@ 0x80
 8006a86:	021b      	lsls	r3, r3, #8
 8006a88:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006a8a:	e008      	b.n	8006a9e <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8006a90:	231a      	movs	r3, #26
 8006a92:	2220      	movs	r2, #32
 8006a94:	189b      	adds	r3, r3, r2
 8006a96:	19db      	adds	r3, r3, r7
 8006a98:	2201      	movs	r2, #1
 8006a9a:	701a      	strb	r2, [r3, #0]
        break;
 8006a9c:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8006a9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d02a      	beq.n	8006afa <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aa6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006aa8:	4b22      	ldr	r3, [pc, #136]	@ (8006b34 <UART_SetConfig+0x6a8>)
 8006aaa:	0052      	lsls	r2, r2, #1
 8006aac:	5ad3      	ldrh	r3, [r2, r3]
 8006aae:	0019      	movs	r1, r3
 8006ab0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8006ab2:	f7f9 fb3b 	bl	800012c <__udivsi3>
 8006ab6:	0003      	movs	r3, r0
 8006ab8:	001a      	movs	r2, r3
 8006aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006abc:	685b      	ldr	r3, [r3, #4]
 8006abe:	085b      	lsrs	r3, r3, #1
 8006ac0:	18d2      	adds	r2, r2, r3
 8006ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ac4:	685b      	ldr	r3, [r3, #4]
 8006ac6:	0019      	movs	r1, r3
 8006ac8:	0010      	movs	r0, r2
 8006aca:	f7f9 fb2f 	bl	800012c <__udivsi3>
 8006ace:	0003      	movs	r3, r0
 8006ad0:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ad2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ad4:	2b0f      	cmp	r3, #15
 8006ad6:	d90a      	bls.n	8006aee <UART_SetConfig+0x662>
 8006ad8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ada:	2380      	movs	r3, #128	@ 0x80
 8006adc:	025b      	lsls	r3, r3, #9
 8006ade:	429a      	cmp	r2, r3
 8006ae0:	d205      	bcs.n	8006aee <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006ae2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ae4:	b29a      	uxth	r2, r3
 8006ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	60da      	str	r2, [r3, #12]
 8006aec:	e005      	b.n	8006afa <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8006aee:	231a      	movs	r3, #26
 8006af0:	2220      	movs	r2, #32
 8006af2:	189b      	adds	r3, r3, r2
 8006af4:	19db      	adds	r3, r3, r7
 8006af6:	2201      	movs	r2, #1
 8006af8:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006afc:	226a      	movs	r2, #106	@ 0x6a
 8006afe:	2101      	movs	r1, #1
 8006b00:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8006b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b04:	2268      	movs	r2, #104	@ 0x68
 8006b06:	2101      	movs	r1, #1
 8006b08:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b12:	2200      	movs	r2, #0
 8006b14:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006b16:	231a      	movs	r3, #26
 8006b18:	2220      	movs	r2, #32
 8006b1a:	189b      	adds	r3, r3, r2
 8006b1c:	19db      	adds	r3, r3, r7
 8006b1e:	781b      	ldrb	r3, [r3, #0]
}
 8006b20:	0018      	movs	r0, r3
 8006b22:	46bd      	mov	sp, r7
 8006b24:	b010      	add	sp, #64	@ 0x40
 8006b26:	bdb0      	pop	{r4, r5, r7, pc}
 8006b28:	40008000 	.word	0x40008000
 8006b2c:	40008400 	.word	0x40008400
 8006b30:	00f42400 	.word	0x00f42400
 8006b34:	08008d88 	.word	0x08008d88

08006b38 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b082      	sub	sp, #8
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b44:	2208      	movs	r2, #8
 8006b46:	4013      	ands	r3, r2
 8006b48:	d00b      	beq.n	8006b62 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	4a4a      	ldr	r2, [pc, #296]	@ (8006c7c <UART_AdvFeatureConfig+0x144>)
 8006b52:	4013      	ands	r3, r2
 8006b54:	0019      	movs	r1, r3
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	430a      	orrs	r2, r1
 8006b60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b66:	2201      	movs	r2, #1
 8006b68:	4013      	ands	r3, r2
 8006b6a:	d00b      	beq.n	8006b84 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	4a43      	ldr	r2, [pc, #268]	@ (8006c80 <UART_AdvFeatureConfig+0x148>)
 8006b74:	4013      	ands	r3, r2
 8006b76:	0019      	movs	r1, r3
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	430a      	orrs	r2, r1
 8006b82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b88:	2202      	movs	r2, #2
 8006b8a:	4013      	ands	r3, r2
 8006b8c:	d00b      	beq.n	8006ba6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	685b      	ldr	r3, [r3, #4]
 8006b94:	4a3b      	ldr	r2, [pc, #236]	@ (8006c84 <UART_AdvFeatureConfig+0x14c>)
 8006b96:	4013      	ands	r3, r2
 8006b98:	0019      	movs	r1, r3
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	430a      	orrs	r2, r1
 8006ba4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006baa:	2204      	movs	r2, #4
 8006bac:	4013      	ands	r3, r2
 8006bae:	d00b      	beq.n	8006bc8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	4a34      	ldr	r2, [pc, #208]	@ (8006c88 <UART_AdvFeatureConfig+0x150>)
 8006bb8:	4013      	ands	r3, r2
 8006bba:	0019      	movs	r1, r3
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	430a      	orrs	r2, r1
 8006bc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bcc:	2210      	movs	r2, #16
 8006bce:	4013      	ands	r3, r2
 8006bd0:	d00b      	beq.n	8006bea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	689b      	ldr	r3, [r3, #8]
 8006bd8:	4a2c      	ldr	r2, [pc, #176]	@ (8006c8c <UART_AdvFeatureConfig+0x154>)
 8006bda:	4013      	ands	r3, r2
 8006bdc:	0019      	movs	r1, r3
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	430a      	orrs	r2, r1
 8006be8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bee:	2220      	movs	r2, #32
 8006bf0:	4013      	ands	r3, r2
 8006bf2:	d00b      	beq.n	8006c0c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	689b      	ldr	r3, [r3, #8]
 8006bfa:	4a25      	ldr	r2, [pc, #148]	@ (8006c90 <UART_AdvFeatureConfig+0x158>)
 8006bfc:	4013      	ands	r3, r2
 8006bfe:	0019      	movs	r1, r3
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	430a      	orrs	r2, r1
 8006c0a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c10:	2240      	movs	r2, #64	@ 0x40
 8006c12:	4013      	ands	r3, r2
 8006c14:	d01d      	beq.n	8006c52 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	685b      	ldr	r3, [r3, #4]
 8006c1c:	4a1d      	ldr	r2, [pc, #116]	@ (8006c94 <UART_AdvFeatureConfig+0x15c>)
 8006c1e:	4013      	ands	r3, r2
 8006c20:	0019      	movs	r1, r3
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	430a      	orrs	r2, r1
 8006c2c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006c32:	2380      	movs	r3, #128	@ 0x80
 8006c34:	035b      	lsls	r3, r3, #13
 8006c36:	429a      	cmp	r2, r3
 8006c38:	d10b      	bne.n	8006c52 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	685b      	ldr	r3, [r3, #4]
 8006c40:	4a15      	ldr	r2, [pc, #84]	@ (8006c98 <UART_AdvFeatureConfig+0x160>)
 8006c42:	4013      	ands	r3, r2
 8006c44:	0019      	movs	r1, r3
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	430a      	orrs	r2, r1
 8006c50:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c56:	2280      	movs	r2, #128	@ 0x80
 8006c58:	4013      	ands	r3, r2
 8006c5a:	d00b      	beq.n	8006c74 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	4a0e      	ldr	r2, [pc, #56]	@ (8006c9c <UART_AdvFeatureConfig+0x164>)
 8006c64:	4013      	ands	r3, r2
 8006c66:	0019      	movs	r1, r3
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	430a      	orrs	r2, r1
 8006c72:	605a      	str	r2, [r3, #4]
  }
}
 8006c74:	46c0      	nop			@ (mov r8, r8)
 8006c76:	46bd      	mov	sp, r7
 8006c78:	b002      	add	sp, #8
 8006c7a:	bd80      	pop	{r7, pc}
 8006c7c:	ffff7fff 	.word	0xffff7fff
 8006c80:	fffdffff 	.word	0xfffdffff
 8006c84:	fffeffff 	.word	0xfffeffff
 8006c88:	fffbffff 	.word	0xfffbffff
 8006c8c:	ffffefff 	.word	0xffffefff
 8006c90:	ffffdfff 	.word	0xffffdfff
 8006c94:	ffefffff 	.word	0xffefffff
 8006c98:	ff9fffff 	.word	0xff9fffff
 8006c9c:	fff7ffff 	.word	0xfff7ffff

08006ca0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b092      	sub	sp, #72	@ 0x48
 8006ca4:	af02      	add	r7, sp, #8
 8006ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2290      	movs	r2, #144	@ 0x90
 8006cac:	2100      	movs	r1, #0
 8006cae:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006cb0:	f7fc f91a 	bl	8002ee8 <HAL_GetTick>
 8006cb4:	0003      	movs	r3, r0
 8006cb6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	2208      	movs	r2, #8
 8006cc0:	4013      	ands	r3, r2
 8006cc2:	2b08      	cmp	r3, #8
 8006cc4:	d12d      	bne.n	8006d22 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006cc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cc8:	2280      	movs	r2, #128	@ 0x80
 8006cca:	0391      	lsls	r1, r2, #14
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	4a47      	ldr	r2, [pc, #284]	@ (8006dec <UART_CheckIdleState+0x14c>)
 8006cd0:	9200      	str	r2, [sp, #0]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	f000 f88e 	bl	8006df4 <UART_WaitOnFlagUntilTimeout>
 8006cd8:	1e03      	subs	r3, r0, #0
 8006cda:	d022      	beq.n	8006d22 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006cdc:	f3ef 8310 	mrs	r3, PRIMASK
 8006ce0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8006ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006ce4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006cea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cec:	f383 8810 	msr	PRIMASK, r3
}
 8006cf0:	46c0      	nop			@ (mov r8, r8)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	681a      	ldr	r2, [r3, #0]
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	2180      	movs	r1, #128	@ 0x80
 8006cfe:	438a      	bics	r2, r1
 8006d00:	601a      	str	r2, [r3, #0]
 8006d02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d08:	f383 8810 	msr	PRIMASK, r3
}
 8006d0c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2288      	movs	r2, #136	@ 0x88
 8006d12:	2120      	movs	r1, #32
 8006d14:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2284      	movs	r2, #132	@ 0x84
 8006d1a:	2100      	movs	r1, #0
 8006d1c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d1e:	2303      	movs	r3, #3
 8006d20:	e060      	b.n	8006de4 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	2204      	movs	r2, #4
 8006d2a:	4013      	ands	r3, r2
 8006d2c:	2b04      	cmp	r3, #4
 8006d2e:	d146      	bne.n	8006dbe <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d32:	2280      	movs	r2, #128	@ 0x80
 8006d34:	03d1      	lsls	r1, r2, #15
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	4a2c      	ldr	r2, [pc, #176]	@ (8006dec <UART_CheckIdleState+0x14c>)
 8006d3a:	9200      	str	r2, [sp, #0]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	f000 f859 	bl	8006df4 <UART_WaitOnFlagUntilTimeout>
 8006d42:	1e03      	subs	r3, r0, #0
 8006d44:	d03b      	beq.n	8006dbe <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d46:	f3ef 8310 	mrs	r3, PRIMASK
 8006d4a:	60fb      	str	r3, [r7, #12]
  return(result);
 8006d4c:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006d4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d50:	2301      	movs	r3, #1
 8006d52:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d54:	693b      	ldr	r3, [r7, #16]
 8006d56:	f383 8810 	msr	PRIMASK, r3
}
 8006d5a:	46c0      	nop			@ (mov r8, r8)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	681a      	ldr	r2, [r3, #0]
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	4922      	ldr	r1, [pc, #136]	@ (8006df0 <UART_CheckIdleState+0x150>)
 8006d68:	400a      	ands	r2, r1
 8006d6a:	601a      	str	r2, [r3, #0]
 8006d6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d6e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	f383 8810 	msr	PRIMASK, r3
}
 8006d76:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d78:	f3ef 8310 	mrs	r3, PRIMASK
 8006d7c:	61bb      	str	r3, [r7, #24]
  return(result);
 8006d7e:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d80:	633b      	str	r3, [r7, #48]	@ 0x30
 8006d82:	2301      	movs	r3, #1
 8006d84:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d86:	69fb      	ldr	r3, [r7, #28]
 8006d88:	f383 8810 	msr	PRIMASK, r3
}
 8006d8c:	46c0      	nop			@ (mov r8, r8)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	689a      	ldr	r2, [r3, #8]
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	2101      	movs	r1, #1
 8006d9a:	438a      	bics	r2, r1
 8006d9c:	609a      	str	r2, [r3, #8]
 8006d9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006da0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006da2:	6a3b      	ldr	r3, [r7, #32]
 8006da4:	f383 8810 	msr	PRIMASK, r3
}
 8006da8:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	228c      	movs	r2, #140	@ 0x8c
 8006dae:	2120      	movs	r1, #32
 8006db0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2284      	movs	r2, #132	@ 0x84
 8006db6:	2100      	movs	r1, #0
 8006db8:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006dba:	2303      	movs	r3, #3
 8006dbc:	e012      	b.n	8006de4 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2288      	movs	r2, #136	@ 0x88
 8006dc2:	2120      	movs	r1, #32
 8006dc4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	228c      	movs	r2, #140	@ 0x8c
 8006dca:	2120      	movs	r1, #32
 8006dcc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2284      	movs	r2, #132	@ 0x84
 8006dde:	2100      	movs	r1, #0
 8006de0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006de2:	2300      	movs	r3, #0
}
 8006de4:	0018      	movs	r0, r3
 8006de6:	46bd      	mov	sp, r7
 8006de8:	b010      	add	sp, #64	@ 0x40
 8006dea:	bd80      	pop	{r7, pc}
 8006dec:	01ffffff 	.word	0x01ffffff
 8006df0:	fffffedf 	.word	0xfffffedf

08006df4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b084      	sub	sp, #16
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	60f8      	str	r0, [r7, #12]
 8006dfc:	60b9      	str	r1, [r7, #8]
 8006dfe:	603b      	str	r3, [r7, #0]
 8006e00:	1dfb      	adds	r3, r7, #7
 8006e02:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e04:	e051      	b.n	8006eaa <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e06:	69bb      	ldr	r3, [r7, #24]
 8006e08:	3301      	adds	r3, #1
 8006e0a:	d04e      	beq.n	8006eaa <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e0c:	f7fc f86c 	bl	8002ee8 <HAL_GetTick>
 8006e10:	0002      	movs	r2, r0
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	1ad3      	subs	r3, r2, r3
 8006e16:	69ba      	ldr	r2, [r7, #24]
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	d302      	bcc.n	8006e22 <UART_WaitOnFlagUntilTimeout+0x2e>
 8006e1c:	69bb      	ldr	r3, [r7, #24]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d101      	bne.n	8006e26 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8006e22:	2303      	movs	r3, #3
 8006e24:	e051      	b.n	8006eca <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	2204      	movs	r2, #4
 8006e2e:	4013      	ands	r3, r2
 8006e30:	d03b      	beq.n	8006eaa <UART_WaitOnFlagUntilTimeout+0xb6>
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	2b80      	cmp	r3, #128	@ 0x80
 8006e36:	d038      	beq.n	8006eaa <UART_WaitOnFlagUntilTimeout+0xb6>
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	2b40      	cmp	r3, #64	@ 0x40
 8006e3c:	d035      	beq.n	8006eaa <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	69db      	ldr	r3, [r3, #28]
 8006e44:	2208      	movs	r2, #8
 8006e46:	4013      	ands	r3, r2
 8006e48:	2b08      	cmp	r3, #8
 8006e4a:	d111      	bne.n	8006e70 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	2208      	movs	r2, #8
 8006e52:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	0018      	movs	r0, r3
 8006e58:	f000 f83c 	bl	8006ed4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	2290      	movs	r2, #144	@ 0x90
 8006e60:	2108      	movs	r1, #8
 8006e62:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	2284      	movs	r2, #132	@ 0x84
 8006e68:	2100      	movs	r1, #0
 8006e6a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	e02c      	b.n	8006eca <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	69da      	ldr	r2, [r3, #28]
 8006e76:	2380      	movs	r3, #128	@ 0x80
 8006e78:	011b      	lsls	r3, r3, #4
 8006e7a:	401a      	ands	r2, r3
 8006e7c:	2380      	movs	r3, #128	@ 0x80
 8006e7e:	011b      	lsls	r3, r3, #4
 8006e80:	429a      	cmp	r2, r3
 8006e82:	d112      	bne.n	8006eaa <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	2280      	movs	r2, #128	@ 0x80
 8006e8a:	0112      	lsls	r2, r2, #4
 8006e8c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	0018      	movs	r0, r3
 8006e92:	f000 f81f 	bl	8006ed4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	2290      	movs	r2, #144	@ 0x90
 8006e9a:	2120      	movs	r1, #32
 8006e9c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	2284      	movs	r2, #132	@ 0x84
 8006ea2:	2100      	movs	r1, #0
 8006ea4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006ea6:	2303      	movs	r3, #3
 8006ea8:	e00f      	b.n	8006eca <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	69db      	ldr	r3, [r3, #28]
 8006eb0:	68ba      	ldr	r2, [r7, #8]
 8006eb2:	4013      	ands	r3, r2
 8006eb4:	68ba      	ldr	r2, [r7, #8]
 8006eb6:	1ad3      	subs	r3, r2, r3
 8006eb8:	425a      	negs	r2, r3
 8006eba:	4153      	adcs	r3, r2
 8006ebc:	b2db      	uxtb	r3, r3
 8006ebe:	001a      	movs	r2, r3
 8006ec0:	1dfb      	adds	r3, r7, #7
 8006ec2:	781b      	ldrb	r3, [r3, #0]
 8006ec4:	429a      	cmp	r2, r3
 8006ec6:	d09e      	beq.n	8006e06 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ec8:	2300      	movs	r3, #0
}
 8006eca:	0018      	movs	r0, r3
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	b004      	add	sp, #16
 8006ed0:	bd80      	pop	{r7, pc}
	...

08006ed4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b08e      	sub	sp, #56	@ 0x38
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006edc:	f3ef 8310 	mrs	r3, PRIMASK
 8006ee0:	617b      	str	r3, [r7, #20]
  return(result);
 8006ee2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006ee4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006eea:	69bb      	ldr	r3, [r7, #24]
 8006eec:	f383 8810 	msr	PRIMASK, r3
}
 8006ef0:	46c0      	nop			@ (mov r8, r8)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	681a      	ldr	r2, [r3, #0]
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4926      	ldr	r1, [pc, #152]	@ (8006f98 <UART_EndRxTransfer+0xc4>)
 8006efe:	400a      	ands	r2, r1
 8006f00:	601a      	str	r2, [r3, #0]
 8006f02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f04:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f06:	69fb      	ldr	r3, [r7, #28]
 8006f08:	f383 8810 	msr	PRIMASK, r3
}
 8006f0c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f0e:	f3ef 8310 	mrs	r3, PRIMASK
 8006f12:	623b      	str	r3, [r7, #32]
  return(result);
 8006f14:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006f16:	633b      	str	r3, [r7, #48]	@ 0x30
 8006f18:	2301      	movs	r3, #1
 8006f1a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f1e:	f383 8810 	msr	PRIMASK, r3
}
 8006f22:	46c0      	nop			@ (mov r8, r8)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	689a      	ldr	r2, [r3, #8]
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	491b      	ldr	r1, [pc, #108]	@ (8006f9c <UART_EndRxTransfer+0xc8>)
 8006f30:	400a      	ands	r2, r1
 8006f32:	609a      	str	r2, [r3, #8]
 8006f34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f36:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f3a:	f383 8810 	msr	PRIMASK, r3
}
 8006f3e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006f44:	2b01      	cmp	r3, #1
 8006f46:	d118      	bne.n	8006f7a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f48:	f3ef 8310 	mrs	r3, PRIMASK
 8006f4c:	60bb      	str	r3, [r7, #8]
  return(result);
 8006f4e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006f52:	2301      	movs	r3, #1
 8006f54:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	f383 8810 	msr	PRIMASK, r3
}
 8006f5c:	46c0      	nop			@ (mov r8, r8)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	681a      	ldr	r2, [r3, #0]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	2110      	movs	r1, #16
 8006f6a:	438a      	bics	r2, r1
 8006f6c:	601a      	str	r2, [r3, #0]
 8006f6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f70:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f72:	693b      	ldr	r3, [r7, #16]
 8006f74:	f383 8810 	msr	PRIMASK, r3
}
 8006f78:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	228c      	movs	r2, #140	@ 0x8c
 8006f7e:	2120      	movs	r1, #32
 8006f80:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2200      	movs	r2, #0
 8006f86:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006f8e:	46c0      	nop			@ (mov r8, r8)
 8006f90:	46bd      	mov	sp, r7
 8006f92:	b00e      	add	sp, #56	@ 0x38
 8006f94:	bd80      	pop	{r7, pc}
 8006f96:	46c0      	nop			@ (mov r8, r8)
 8006f98:	fffffedf 	.word	0xfffffedf
 8006f9c:	effffffe 	.word	0xeffffffe

08006fa0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b084      	sub	sp, #16
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2284      	movs	r2, #132	@ 0x84
 8006fac:	5c9b      	ldrb	r3, [r3, r2]
 8006fae:	2b01      	cmp	r3, #1
 8006fb0:	d101      	bne.n	8006fb6 <HAL_UARTEx_DisableFifoMode+0x16>
 8006fb2:	2302      	movs	r3, #2
 8006fb4:	e027      	b.n	8007006 <HAL_UARTEx_DisableFifoMode+0x66>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2284      	movs	r2, #132	@ 0x84
 8006fba:	2101      	movs	r1, #1
 8006fbc:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2288      	movs	r2, #136	@ 0x88
 8006fc2:	2124      	movs	r1, #36	@ 0x24
 8006fc4:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	681a      	ldr	r2, [r3, #0]
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	2101      	movs	r1, #1
 8006fda:	438a      	bics	r2, r1
 8006fdc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	4a0b      	ldr	r2, [pc, #44]	@ (8007010 <HAL_UARTEx_DisableFifoMode+0x70>)
 8006fe2:	4013      	ands	r3, r2
 8006fe4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	68fa      	ldr	r2, [r7, #12]
 8006ff2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2288      	movs	r2, #136	@ 0x88
 8006ff8:	2120      	movs	r1, #32
 8006ffa:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2284      	movs	r2, #132	@ 0x84
 8007000:	2100      	movs	r1, #0
 8007002:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007004:	2300      	movs	r3, #0
}
 8007006:	0018      	movs	r0, r3
 8007008:	46bd      	mov	sp, r7
 800700a:	b004      	add	sp, #16
 800700c:	bd80      	pop	{r7, pc}
 800700e:	46c0      	nop			@ (mov r8, r8)
 8007010:	dfffffff 	.word	0xdfffffff

08007014 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b084      	sub	sp, #16
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
 800701c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2284      	movs	r2, #132	@ 0x84
 8007022:	5c9b      	ldrb	r3, [r3, r2]
 8007024:	2b01      	cmp	r3, #1
 8007026:	d101      	bne.n	800702c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007028:	2302      	movs	r3, #2
 800702a:	e02e      	b.n	800708a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2284      	movs	r2, #132	@ 0x84
 8007030:	2101      	movs	r1, #1
 8007032:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2288      	movs	r2, #136	@ 0x88
 8007038:	2124      	movs	r1, #36	@ 0x24
 800703a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	681a      	ldr	r2, [r3, #0]
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	2101      	movs	r1, #1
 8007050:	438a      	bics	r2, r1
 8007052:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	689b      	ldr	r3, [r3, #8]
 800705a:	00db      	lsls	r3, r3, #3
 800705c:	08d9      	lsrs	r1, r3, #3
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	683a      	ldr	r2, [r7, #0]
 8007064:	430a      	orrs	r2, r1
 8007066:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	0018      	movs	r0, r3
 800706c:	f000 f854 	bl	8007118 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	68fa      	ldr	r2, [r7, #12]
 8007076:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2288      	movs	r2, #136	@ 0x88
 800707c:	2120      	movs	r1, #32
 800707e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2284      	movs	r2, #132	@ 0x84
 8007084:	2100      	movs	r1, #0
 8007086:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007088:	2300      	movs	r3, #0
}
 800708a:	0018      	movs	r0, r3
 800708c:	46bd      	mov	sp, r7
 800708e:	b004      	add	sp, #16
 8007090:	bd80      	pop	{r7, pc}
	...

08007094 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b084      	sub	sp, #16
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
 800709c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2284      	movs	r2, #132	@ 0x84
 80070a2:	5c9b      	ldrb	r3, [r3, r2]
 80070a4:	2b01      	cmp	r3, #1
 80070a6:	d101      	bne.n	80070ac <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80070a8:	2302      	movs	r3, #2
 80070aa:	e02f      	b.n	800710c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2284      	movs	r2, #132	@ 0x84
 80070b0:	2101      	movs	r1, #1
 80070b2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2288      	movs	r2, #136	@ 0x88
 80070b8:	2124      	movs	r1, #36	@ 0x24
 80070ba:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	681a      	ldr	r2, [r3, #0]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	2101      	movs	r1, #1
 80070d0:	438a      	bics	r2, r1
 80070d2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	689b      	ldr	r3, [r3, #8]
 80070da:	4a0e      	ldr	r2, [pc, #56]	@ (8007114 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80070dc:	4013      	ands	r3, r2
 80070de:	0019      	movs	r1, r3
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	683a      	ldr	r2, [r7, #0]
 80070e6:	430a      	orrs	r2, r1
 80070e8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	0018      	movs	r0, r3
 80070ee:	f000 f813 	bl	8007118 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	68fa      	ldr	r2, [r7, #12]
 80070f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2288      	movs	r2, #136	@ 0x88
 80070fe:	2120      	movs	r1, #32
 8007100:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2284      	movs	r2, #132	@ 0x84
 8007106:	2100      	movs	r1, #0
 8007108:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800710a:	2300      	movs	r3, #0
}
 800710c:	0018      	movs	r0, r3
 800710e:	46bd      	mov	sp, r7
 8007110:	b004      	add	sp, #16
 8007112:	bd80      	pop	{r7, pc}
 8007114:	f1ffffff 	.word	0xf1ffffff

08007118 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007118:	b5f0      	push	{r4, r5, r6, r7, lr}
 800711a:	b085      	sub	sp, #20
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007124:	2b00      	cmp	r3, #0
 8007126:	d108      	bne.n	800713a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	226a      	movs	r2, #106	@ 0x6a
 800712c:	2101      	movs	r1, #1
 800712e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2268      	movs	r2, #104	@ 0x68
 8007134:	2101      	movs	r1, #1
 8007136:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007138:	e043      	b.n	80071c2 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800713a:	260f      	movs	r6, #15
 800713c:	19bb      	adds	r3, r7, r6
 800713e:	2208      	movs	r2, #8
 8007140:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007142:	200e      	movs	r0, #14
 8007144:	183b      	adds	r3, r7, r0
 8007146:	2208      	movs	r2, #8
 8007148:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	689b      	ldr	r3, [r3, #8]
 8007150:	0e5b      	lsrs	r3, r3, #25
 8007152:	b2da      	uxtb	r2, r3
 8007154:	240d      	movs	r4, #13
 8007156:	193b      	adds	r3, r7, r4
 8007158:	2107      	movs	r1, #7
 800715a:	400a      	ands	r2, r1
 800715c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	689b      	ldr	r3, [r3, #8]
 8007164:	0f5b      	lsrs	r3, r3, #29
 8007166:	b2da      	uxtb	r2, r3
 8007168:	250c      	movs	r5, #12
 800716a:	197b      	adds	r3, r7, r5
 800716c:	2107      	movs	r1, #7
 800716e:	400a      	ands	r2, r1
 8007170:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007172:	183b      	adds	r3, r7, r0
 8007174:	781b      	ldrb	r3, [r3, #0]
 8007176:	197a      	adds	r2, r7, r5
 8007178:	7812      	ldrb	r2, [r2, #0]
 800717a:	4914      	ldr	r1, [pc, #80]	@ (80071cc <UARTEx_SetNbDataToProcess+0xb4>)
 800717c:	5c8a      	ldrb	r2, [r1, r2]
 800717e:	435a      	muls	r2, r3
 8007180:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8007182:	197b      	adds	r3, r7, r5
 8007184:	781b      	ldrb	r3, [r3, #0]
 8007186:	4a12      	ldr	r2, [pc, #72]	@ (80071d0 <UARTEx_SetNbDataToProcess+0xb8>)
 8007188:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800718a:	0019      	movs	r1, r3
 800718c:	f7f9 f858 	bl	8000240 <__divsi3>
 8007190:	0003      	movs	r3, r0
 8007192:	b299      	uxth	r1, r3
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	226a      	movs	r2, #106	@ 0x6a
 8007198:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800719a:	19bb      	adds	r3, r7, r6
 800719c:	781b      	ldrb	r3, [r3, #0]
 800719e:	193a      	adds	r2, r7, r4
 80071a0:	7812      	ldrb	r2, [r2, #0]
 80071a2:	490a      	ldr	r1, [pc, #40]	@ (80071cc <UARTEx_SetNbDataToProcess+0xb4>)
 80071a4:	5c8a      	ldrb	r2, [r1, r2]
 80071a6:	435a      	muls	r2, r3
 80071a8:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80071aa:	193b      	adds	r3, r7, r4
 80071ac:	781b      	ldrb	r3, [r3, #0]
 80071ae:	4a08      	ldr	r2, [pc, #32]	@ (80071d0 <UARTEx_SetNbDataToProcess+0xb8>)
 80071b0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80071b2:	0019      	movs	r1, r3
 80071b4:	f7f9 f844 	bl	8000240 <__divsi3>
 80071b8:	0003      	movs	r3, r0
 80071ba:	b299      	uxth	r1, r3
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2268      	movs	r2, #104	@ 0x68
 80071c0:	5299      	strh	r1, [r3, r2]
}
 80071c2:	46c0      	nop			@ (mov r8, r8)
 80071c4:	46bd      	mov	sp, r7
 80071c6:	b005      	add	sp, #20
 80071c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071ca:	46c0      	nop			@ (mov r8, r8)
 80071cc:	08008da0 	.word	0x08008da0
 80071d0:	08008da8 	.word	0x08008da8

080071d4 <_strtol_l.constprop.0>:
 80071d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071d6:	b085      	sub	sp, #20
 80071d8:	0017      	movs	r7, r2
 80071da:	001e      	movs	r6, r3
 80071dc:	9003      	str	r0, [sp, #12]
 80071de:	9101      	str	r1, [sp, #4]
 80071e0:	2b24      	cmp	r3, #36	@ 0x24
 80071e2:	d844      	bhi.n	800726e <_strtol_l.constprop.0+0x9a>
 80071e4:	000c      	movs	r4, r1
 80071e6:	2b01      	cmp	r3, #1
 80071e8:	d041      	beq.n	800726e <_strtol_l.constprop.0+0x9a>
 80071ea:	4b3d      	ldr	r3, [pc, #244]	@ (80072e0 <_strtol_l.constprop.0+0x10c>)
 80071ec:	2208      	movs	r2, #8
 80071ee:	469c      	mov	ip, r3
 80071f0:	0023      	movs	r3, r4
 80071f2:	4661      	mov	r1, ip
 80071f4:	781d      	ldrb	r5, [r3, #0]
 80071f6:	3401      	adds	r4, #1
 80071f8:	5d48      	ldrb	r0, [r1, r5]
 80071fa:	0001      	movs	r1, r0
 80071fc:	4011      	ands	r1, r2
 80071fe:	4210      	tst	r0, r2
 8007200:	d1f6      	bne.n	80071f0 <_strtol_l.constprop.0+0x1c>
 8007202:	2d2d      	cmp	r5, #45	@ 0x2d
 8007204:	d13a      	bne.n	800727c <_strtol_l.constprop.0+0xa8>
 8007206:	7825      	ldrb	r5, [r4, #0]
 8007208:	1c9c      	adds	r4, r3, #2
 800720a:	2301      	movs	r3, #1
 800720c:	9300      	str	r3, [sp, #0]
 800720e:	2210      	movs	r2, #16
 8007210:	0033      	movs	r3, r6
 8007212:	4393      	bics	r3, r2
 8007214:	d109      	bne.n	800722a <_strtol_l.constprop.0+0x56>
 8007216:	2d30      	cmp	r5, #48	@ 0x30
 8007218:	d136      	bne.n	8007288 <_strtol_l.constprop.0+0xb4>
 800721a:	2120      	movs	r1, #32
 800721c:	7823      	ldrb	r3, [r4, #0]
 800721e:	438b      	bics	r3, r1
 8007220:	2b58      	cmp	r3, #88	@ 0x58
 8007222:	d131      	bne.n	8007288 <_strtol_l.constprop.0+0xb4>
 8007224:	0016      	movs	r6, r2
 8007226:	7865      	ldrb	r5, [r4, #1]
 8007228:	3402      	adds	r4, #2
 800722a:	4a2e      	ldr	r2, [pc, #184]	@ (80072e4 <_strtol_l.constprop.0+0x110>)
 800722c:	9b00      	ldr	r3, [sp, #0]
 800722e:	4694      	mov	ip, r2
 8007230:	4463      	add	r3, ip
 8007232:	0031      	movs	r1, r6
 8007234:	0018      	movs	r0, r3
 8007236:	9302      	str	r3, [sp, #8]
 8007238:	f7f8 fffe 	bl	8000238 <__aeabi_uidivmod>
 800723c:	2200      	movs	r2, #0
 800723e:	4684      	mov	ip, r0
 8007240:	0010      	movs	r0, r2
 8007242:	002b      	movs	r3, r5
 8007244:	3b30      	subs	r3, #48	@ 0x30
 8007246:	2b09      	cmp	r3, #9
 8007248:	d825      	bhi.n	8007296 <_strtol_l.constprop.0+0xc2>
 800724a:	001d      	movs	r5, r3
 800724c:	42ae      	cmp	r6, r5
 800724e:	dd31      	ble.n	80072b4 <_strtol_l.constprop.0+0xe0>
 8007250:	1c53      	adds	r3, r2, #1
 8007252:	d009      	beq.n	8007268 <_strtol_l.constprop.0+0x94>
 8007254:	2201      	movs	r2, #1
 8007256:	4252      	negs	r2, r2
 8007258:	4584      	cmp	ip, r0
 800725a:	d305      	bcc.n	8007268 <_strtol_l.constprop.0+0x94>
 800725c:	d101      	bne.n	8007262 <_strtol_l.constprop.0+0x8e>
 800725e:	42a9      	cmp	r1, r5
 8007260:	db25      	blt.n	80072ae <_strtol_l.constprop.0+0xda>
 8007262:	2201      	movs	r2, #1
 8007264:	4370      	muls	r0, r6
 8007266:	1828      	adds	r0, r5, r0
 8007268:	7825      	ldrb	r5, [r4, #0]
 800726a:	3401      	adds	r4, #1
 800726c:	e7e9      	b.n	8007242 <_strtol_l.constprop.0+0x6e>
 800726e:	f000 f9dd 	bl	800762c <__errno>
 8007272:	2316      	movs	r3, #22
 8007274:	6003      	str	r3, [r0, #0]
 8007276:	2000      	movs	r0, #0
 8007278:	b005      	add	sp, #20
 800727a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800727c:	9100      	str	r1, [sp, #0]
 800727e:	2d2b      	cmp	r5, #43	@ 0x2b
 8007280:	d1c5      	bne.n	800720e <_strtol_l.constprop.0+0x3a>
 8007282:	7825      	ldrb	r5, [r4, #0]
 8007284:	1c9c      	adds	r4, r3, #2
 8007286:	e7c2      	b.n	800720e <_strtol_l.constprop.0+0x3a>
 8007288:	2e00      	cmp	r6, #0
 800728a:	d1ce      	bne.n	800722a <_strtol_l.constprop.0+0x56>
 800728c:	3608      	adds	r6, #8
 800728e:	2d30      	cmp	r5, #48	@ 0x30
 8007290:	d0cb      	beq.n	800722a <_strtol_l.constprop.0+0x56>
 8007292:	3602      	adds	r6, #2
 8007294:	e7c9      	b.n	800722a <_strtol_l.constprop.0+0x56>
 8007296:	002b      	movs	r3, r5
 8007298:	3b41      	subs	r3, #65	@ 0x41
 800729a:	2b19      	cmp	r3, #25
 800729c:	d801      	bhi.n	80072a2 <_strtol_l.constprop.0+0xce>
 800729e:	3d37      	subs	r5, #55	@ 0x37
 80072a0:	e7d4      	b.n	800724c <_strtol_l.constprop.0+0x78>
 80072a2:	002b      	movs	r3, r5
 80072a4:	3b61      	subs	r3, #97	@ 0x61
 80072a6:	2b19      	cmp	r3, #25
 80072a8:	d804      	bhi.n	80072b4 <_strtol_l.constprop.0+0xe0>
 80072aa:	3d57      	subs	r5, #87	@ 0x57
 80072ac:	e7ce      	b.n	800724c <_strtol_l.constprop.0+0x78>
 80072ae:	2201      	movs	r2, #1
 80072b0:	4252      	negs	r2, r2
 80072b2:	e7d9      	b.n	8007268 <_strtol_l.constprop.0+0x94>
 80072b4:	1c53      	adds	r3, r2, #1
 80072b6:	d108      	bne.n	80072ca <_strtol_l.constprop.0+0xf6>
 80072b8:	2322      	movs	r3, #34	@ 0x22
 80072ba:	9a03      	ldr	r2, [sp, #12]
 80072bc:	9802      	ldr	r0, [sp, #8]
 80072be:	6013      	str	r3, [r2, #0]
 80072c0:	2f00      	cmp	r7, #0
 80072c2:	d0d9      	beq.n	8007278 <_strtol_l.constprop.0+0xa4>
 80072c4:	1e63      	subs	r3, r4, #1
 80072c6:	9301      	str	r3, [sp, #4]
 80072c8:	e007      	b.n	80072da <_strtol_l.constprop.0+0x106>
 80072ca:	9b00      	ldr	r3, [sp, #0]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d000      	beq.n	80072d2 <_strtol_l.constprop.0+0xfe>
 80072d0:	4240      	negs	r0, r0
 80072d2:	2f00      	cmp	r7, #0
 80072d4:	d0d0      	beq.n	8007278 <_strtol_l.constprop.0+0xa4>
 80072d6:	2a00      	cmp	r2, #0
 80072d8:	d1f4      	bne.n	80072c4 <_strtol_l.constprop.0+0xf0>
 80072da:	9b01      	ldr	r3, [sp, #4]
 80072dc:	603b      	str	r3, [r7, #0]
 80072de:	e7cb      	b.n	8007278 <_strtol_l.constprop.0+0xa4>
 80072e0:	08008db1 	.word	0x08008db1
 80072e4:	7fffffff 	.word	0x7fffffff

080072e8 <strtol>:
 80072e8:	b510      	push	{r4, lr}
 80072ea:	4c04      	ldr	r4, [pc, #16]	@ (80072fc <strtol+0x14>)
 80072ec:	0013      	movs	r3, r2
 80072ee:	000a      	movs	r2, r1
 80072f0:	0001      	movs	r1, r0
 80072f2:	6820      	ldr	r0, [r4, #0]
 80072f4:	f7ff ff6e 	bl	80071d4 <_strtol_l.constprop.0>
 80072f8:	bd10      	pop	{r4, pc}
 80072fa:	46c0      	nop			@ (mov r8, r8)
 80072fc:	20000018 	.word	0x20000018

08007300 <std>:
 8007300:	2300      	movs	r3, #0
 8007302:	b510      	push	{r4, lr}
 8007304:	0004      	movs	r4, r0
 8007306:	6003      	str	r3, [r0, #0]
 8007308:	6043      	str	r3, [r0, #4]
 800730a:	6083      	str	r3, [r0, #8]
 800730c:	8181      	strh	r1, [r0, #12]
 800730e:	6643      	str	r3, [r0, #100]	@ 0x64
 8007310:	81c2      	strh	r2, [r0, #14]
 8007312:	6103      	str	r3, [r0, #16]
 8007314:	6143      	str	r3, [r0, #20]
 8007316:	6183      	str	r3, [r0, #24]
 8007318:	0019      	movs	r1, r3
 800731a:	2208      	movs	r2, #8
 800731c:	305c      	adds	r0, #92	@ 0x5c
 800731e:	f000 f92f 	bl	8007580 <memset>
 8007322:	4b0b      	ldr	r3, [pc, #44]	@ (8007350 <std+0x50>)
 8007324:	6224      	str	r4, [r4, #32]
 8007326:	6263      	str	r3, [r4, #36]	@ 0x24
 8007328:	4b0a      	ldr	r3, [pc, #40]	@ (8007354 <std+0x54>)
 800732a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800732c:	4b0a      	ldr	r3, [pc, #40]	@ (8007358 <std+0x58>)
 800732e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007330:	4b0a      	ldr	r3, [pc, #40]	@ (800735c <std+0x5c>)
 8007332:	6323      	str	r3, [r4, #48]	@ 0x30
 8007334:	4b0a      	ldr	r3, [pc, #40]	@ (8007360 <std+0x60>)
 8007336:	429c      	cmp	r4, r3
 8007338:	d005      	beq.n	8007346 <std+0x46>
 800733a:	4b0a      	ldr	r3, [pc, #40]	@ (8007364 <std+0x64>)
 800733c:	429c      	cmp	r4, r3
 800733e:	d002      	beq.n	8007346 <std+0x46>
 8007340:	4b09      	ldr	r3, [pc, #36]	@ (8007368 <std+0x68>)
 8007342:	429c      	cmp	r4, r3
 8007344:	d103      	bne.n	800734e <std+0x4e>
 8007346:	0020      	movs	r0, r4
 8007348:	3058      	adds	r0, #88	@ 0x58
 800734a:	f000 f999 	bl	8007680 <__retarget_lock_init_recursive>
 800734e:	bd10      	pop	{r4, pc}
 8007350:	080074e9 	.word	0x080074e9
 8007354:	08007511 	.word	0x08007511
 8007358:	08007549 	.word	0x08007549
 800735c:	08007575 	.word	0x08007575
 8007360:	2000036c 	.word	0x2000036c
 8007364:	200003d4 	.word	0x200003d4
 8007368:	2000043c 	.word	0x2000043c

0800736c <stdio_exit_handler>:
 800736c:	b510      	push	{r4, lr}
 800736e:	4a03      	ldr	r2, [pc, #12]	@ (800737c <stdio_exit_handler+0x10>)
 8007370:	4903      	ldr	r1, [pc, #12]	@ (8007380 <stdio_exit_handler+0x14>)
 8007372:	4804      	ldr	r0, [pc, #16]	@ (8007384 <stdio_exit_handler+0x18>)
 8007374:	f000 f86c 	bl	8007450 <_fwalk_sglue>
 8007378:	bd10      	pop	{r4, pc}
 800737a:	46c0      	nop			@ (mov r8, r8)
 800737c:	2000000c 	.word	0x2000000c
 8007380:	080081dd 	.word	0x080081dd
 8007384:	2000001c 	.word	0x2000001c

08007388 <cleanup_stdio>:
 8007388:	6841      	ldr	r1, [r0, #4]
 800738a:	4b0b      	ldr	r3, [pc, #44]	@ (80073b8 <cleanup_stdio+0x30>)
 800738c:	b510      	push	{r4, lr}
 800738e:	0004      	movs	r4, r0
 8007390:	4299      	cmp	r1, r3
 8007392:	d001      	beq.n	8007398 <cleanup_stdio+0x10>
 8007394:	f000 ff22 	bl	80081dc <_fflush_r>
 8007398:	68a1      	ldr	r1, [r4, #8]
 800739a:	4b08      	ldr	r3, [pc, #32]	@ (80073bc <cleanup_stdio+0x34>)
 800739c:	4299      	cmp	r1, r3
 800739e:	d002      	beq.n	80073a6 <cleanup_stdio+0x1e>
 80073a0:	0020      	movs	r0, r4
 80073a2:	f000 ff1b 	bl	80081dc <_fflush_r>
 80073a6:	68e1      	ldr	r1, [r4, #12]
 80073a8:	4b05      	ldr	r3, [pc, #20]	@ (80073c0 <cleanup_stdio+0x38>)
 80073aa:	4299      	cmp	r1, r3
 80073ac:	d002      	beq.n	80073b4 <cleanup_stdio+0x2c>
 80073ae:	0020      	movs	r0, r4
 80073b0:	f000 ff14 	bl	80081dc <_fflush_r>
 80073b4:	bd10      	pop	{r4, pc}
 80073b6:	46c0      	nop			@ (mov r8, r8)
 80073b8:	2000036c 	.word	0x2000036c
 80073bc:	200003d4 	.word	0x200003d4
 80073c0:	2000043c 	.word	0x2000043c

080073c4 <global_stdio_init.part.0>:
 80073c4:	b510      	push	{r4, lr}
 80073c6:	4b09      	ldr	r3, [pc, #36]	@ (80073ec <global_stdio_init.part.0+0x28>)
 80073c8:	4a09      	ldr	r2, [pc, #36]	@ (80073f0 <global_stdio_init.part.0+0x2c>)
 80073ca:	2104      	movs	r1, #4
 80073cc:	601a      	str	r2, [r3, #0]
 80073ce:	4809      	ldr	r0, [pc, #36]	@ (80073f4 <global_stdio_init.part.0+0x30>)
 80073d0:	2200      	movs	r2, #0
 80073d2:	f7ff ff95 	bl	8007300 <std>
 80073d6:	2201      	movs	r2, #1
 80073d8:	2109      	movs	r1, #9
 80073da:	4807      	ldr	r0, [pc, #28]	@ (80073f8 <global_stdio_init.part.0+0x34>)
 80073dc:	f7ff ff90 	bl	8007300 <std>
 80073e0:	2202      	movs	r2, #2
 80073e2:	2112      	movs	r1, #18
 80073e4:	4805      	ldr	r0, [pc, #20]	@ (80073fc <global_stdio_init.part.0+0x38>)
 80073e6:	f7ff ff8b 	bl	8007300 <std>
 80073ea:	bd10      	pop	{r4, pc}
 80073ec:	200004a4 	.word	0x200004a4
 80073f0:	0800736d 	.word	0x0800736d
 80073f4:	2000036c 	.word	0x2000036c
 80073f8:	200003d4 	.word	0x200003d4
 80073fc:	2000043c 	.word	0x2000043c

08007400 <__sfp_lock_acquire>:
 8007400:	b510      	push	{r4, lr}
 8007402:	4802      	ldr	r0, [pc, #8]	@ (800740c <__sfp_lock_acquire+0xc>)
 8007404:	f000 f93d 	bl	8007682 <__retarget_lock_acquire_recursive>
 8007408:	bd10      	pop	{r4, pc}
 800740a:	46c0      	nop			@ (mov r8, r8)
 800740c:	200004ad 	.word	0x200004ad

08007410 <__sfp_lock_release>:
 8007410:	b510      	push	{r4, lr}
 8007412:	4802      	ldr	r0, [pc, #8]	@ (800741c <__sfp_lock_release+0xc>)
 8007414:	f000 f936 	bl	8007684 <__retarget_lock_release_recursive>
 8007418:	bd10      	pop	{r4, pc}
 800741a:	46c0      	nop			@ (mov r8, r8)
 800741c:	200004ad 	.word	0x200004ad

08007420 <__sinit>:
 8007420:	b510      	push	{r4, lr}
 8007422:	0004      	movs	r4, r0
 8007424:	f7ff ffec 	bl	8007400 <__sfp_lock_acquire>
 8007428:	6a23      	ldr	r3, [r4, #32]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d002      	beq.n	8007434 <__sinit+0x14>
 800742e:	f7ff ffef 	bl	8007410 <__sfp_lock_release>
 8007432:	bd10      	pop	{r4, pc}
 8007434:	4b04      	ldr	r3, [pc, #16]	@ (8007448 <__sinit+0x28>)
 8007436:	6223      	str	r3, [r4, #32]
 8007438:	4b04      	ldr	r3, [pc, #16]	@ (800744c <__sinit+0x2c>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d1f6      	bne.n	800742e <__sinit+0xe>
 8007440:	f7ff ffc0 	bl	80073c4 <global_stdio_init.part.0>
 8007444:	e7f3      	b.n	800742e <__sinit+0xe>
 8007446:	46c0      	nop			@ (mov r8, r8)
 8007448:	08007389 	.word	0x08007389
 800744c:	200004a4 	.word	0x200004a4

08007450 <_fwalk_sglue>:
 8007450:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007452:	0014      	movs	r4, r2
 8007454:	2600      	movs	r6, #0
 8007456:	9000      	str	r0, [sp, #0]
 8007458:	9101      	str	r1, [sp, #4]
 800745a:	68a5      	ldr	r5, [r4, #8]
 800745c:	6867      	ldr	r7, [r4, #4]
 800745e:	3f01      	subs	r7, #1
 8007460:	d504      	bpl.n	800746c <_fwalk_sglue+0x1c>
 8007462:	6824      	ldr	r4, [r4, #0]
 8007464:	2c00      	cmp	r4, #0
 8007466:	d1f8      	bne.n	800745a <_fwalk_sglue+0xa>
 8007468:	0030      	movs	r0, r6
 800746a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800746c:	89ab      	ldrh	r3, [r5, #12]
 800746e:	2b01      	cmp	r3, #1
 8007470:	d908      	bls.n	8007484 <_fwalk_sglue+0x34>
 8007472:	220e      	movs	r2, #14
 8007474:	5eab      	ldrsh	r3, [r5, r2]
 8007476:	3301      	adds	r3, #1
 8007478:	d004      	beq.n	8007484 <_fwalk_sglue+0x34>
 800747a:	0029      	movs	r1, r5
 800747c:	9800      	ldr	r0, [sp, #0]
 800747e:	9b01      	ldr	r3, [sp, #4]
 8007480:	4798      	blx	r3
 8007482:	4306      	orrs	r6, r0
 8007484:	3568      	adds	r5, #104	@ 0x68
 8007486:	e7ea      	b.n	800745e <_fwalk_sglue+0xe>

08007488 <iprintf>:
 8007488:	b40f      	push	{r0, r1, r2, r3}
 800748a:	b507      	push	{r0, r1, r2, lr}
 800748c:	4905      	ldr	r1, [pc, #20]	@ (80074a4 <iprintf+0x1c>)
 800748e:	ab04      	add	r3, sp, #16
 8007490:	6808      	ldr	r0, [r1, #0]
 8007492:	cb04      	ldmia	r3!, {r2}
 8007494:	6881      	ldr	r1, [r0, #8]
 8007496:	9301      	str	r3, [sp, #4]
 8007498:	f000 fb80 	bl	8007b9c <_vfiprintf_r>
 800749c:	b003      	add	sp, #12
 800749e:	bc08      	pop	{r3}
 80074a0:	b004      	add	sp, #16
 80074a2:	4718      	bx	r3
 80074a4:	20000018 	.word	0x20000018

080074a8 <siprintf>:
 80074a8:	b40e      	push	{r1, r2, r3}
 80074aa:	b500      	push	{lr}
 80074ac:	490b      	ldr	r1, [pc, #44]	@ (80074dc <siprintf+0x34>)
 80074ae:	b09c      	sub	sp, #112	@ 0x70
 80074b0:	ab1d      	add	r3, sp, #116	@ 0x74
 80074b2:	9002      	str	r0, [sp, #8]
 80074b4:	9006      	str	r0, [sp, #24]
 80074b6:	9107      	str	r1, [sp, #28]
 80074b8:	9104      	str	r1, [sp, #16]
 80074ba:	4809      	ldr	r0, [pc, #36]	@ (80074e0 <siprintf+0x38>)
 80074bc:	4909      	ldr	r1, [pc, #36]	@ (80074e4 <siprintf+0x3c>)
 80074be:	cb04      	ldmia	r3!, {r2}
 80074c0:	9105      	str	r1, [sp, #20]
 80074c2:	6800      	ldr	r0, [r0, #0]
 80074c4:	a902      	add	r1, sp, #8
 80074c6:	9301      	str	r3, [sp, #4]
 80074c8:	f000 fa42 	bl	8007950 <_svfiprintf_r>
 80074cc:	2200      	movs	r2, #0
 80074ce:	9b02      	ldr	r3, [sp, #8]
 80074d0:	701a      	strb	r2, [r3, #0]
 80074d2:	b01c      	add	sp, #112	@ 0x70
 80074d4:	bc08      	pop	{r3}
 80074d6:	b003      	add	sp, #12
 80074d8:	4718      	bx	r3
 80074da:	46c0      	nop			@ (mov r8, r8)
 80074dc:	7fffffff 	.word	0x7fffffff
 80074e0:	20000018 	.word	0x20000018
 80074e4:	ffff0208 	.word	0xffff0208

080074e8 <__sread>:
 80074e8:	b570      	push	{r4, r5, r6, lr}
 80074ea:	000c      	movs	r4, r1
 80074ec:	250e      	movs	r5, #14
 80074ee:	5f49      	ldrsh	r1, [r1, r5]
 80074f0:	f000 f874 	bl	80075dc <_read_r>
 80074f4:	2800      	cmp	r0, #0
 80074f6:	db03      	blt.n	8007500 <__sread+0x18>
 80074f8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80074fa:	181b      	adds	r3, r3, r0
 80074fc:	6563      	str	r3, [r4, #84]	@ 0x54
 80074fe:	bd70      	pop	{r4, r5, r6, pc}
 8007500:	89a3      	ldrh	r3, [r4, #12]
 8007502:	4a02      	ldr	r2, [pc, #8]	@ (800750c <__sread+0x24>)
 8007504:	4013      	ands	r3, r2
 8007506:	81a3      	strh	r3, [r4, #12]
 8007508:	e7f9      	b.n	80074fe <__sread+0x16>
 800750a:	46c0      	nop			@ (mov r8, r8)
 800750c:	ffffefff 	.word	0xffffefff

08007510 <__swrite>:
 8007510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007512:	001f      	movs	r7, r3
 8007514:	898b      	ldrh	r3, [r1, #12]
 8007516:	0005      	movs	r5, r0
 8007518:	000c      	movs	r4, r1
 800751a:	0016      	movs	r6, r2
 800751c:	05db      	lsls	r3, r3, #23
 800751e:	d505      	bpl.n	800752c <__swrite+0x1c>
 8007520:	230e      	movs	r3, #14
 8007522:	5ec9      	ldrsh	r1, [r1, r3]
 8007524:	2200      	movs	r2, #0
 8007526:	2302      	movs	r3, #2
 8007528:	f000 f844 	bl	80075b4 <_lseek_r>
 800752c:	89a3      	ldrh	r3, [r4, #12]
 800752e:	4a05      	ldr	r2, [pc, #20]	@ (8007544 <__swrite+0x34>)
 8007530:	0028      	movs	r0, r5
 8007532:	4013      	ands	r3, r2
 8007534:	81a3      	strh	r3, [r4, #12]
 8007536:	0032      	movs	r2, r6
 8007538:	230e      	movs	r3, #14
 800753a:	5ee1      	ldrsh	r1, [r4, r3]
 800753c:	003b      	movs	r3, r7
 800753e:	f000 f861 	bl	8007604 <_write_r>
 8007542:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007544:	ffffefff 	.word	0xffffefff

08007548 <__sseek>:
 8007548:	b570      	push	{r4, r5, r6, lr}
 800754a:	000c      	movs	r4, r1
 800754c:	250e      	movs	r5, #14
 800754e:	5f49      	ldrsh	r1, [r1, r5]
 8007550:	f000 f830 	bl	80075b4 <_lseek_r>
 8007554:	89a3      	ldrh	r3, [r4, #12]
 8007556:	1c42      	adds	r2, r0, #1
 8007558:	d103      	bne.n	8007562 <__sseek+0x1a>
 800755a:	4a05      	ldr	r2, [pc, #20]	@ (8007570 <__sseek+0x28>)
 800755c:	4013      	ands	r3, r2
 800755e:	81a3      	strh	r3, [r4, #12]
 8007560:	bd70      	pop	{r4, r5, r6, pc}
 8007562:	2280      	movs	r2, #128	@ 0x80
 8007564:	0152      	lsls	r2, r2, #5
 8007566:	4313      	orrs	r3, r2
 8007568:	81a3      	strh	r3, [r4, #12]
 800756a:	6560      	str	r0, [r4, #84]	@ 0x54
 800756c:	e7f8      	b.n	8007560 <__sseek+0x18>
 800756e:	46c0      	nop			@ (mov r8, r8)
 8007570:	ffffefff 	.word	0xffffefff

08007574 <__sclose>:
 8007574:	b510      	push	{r4, lr}
 8007576:	230e      	movs	r3, #14
 8007578:	5ec9      	ldrsh	r1, [r1, r3]
 800757a:	f000 f809 	bl	8007590 <_close_r>
 800757e:	bd10      	pop	{r4, pc}

08007580 <memset>:
 8007580:	0003      	movs	r3, r0
 8007582:	1882      	adds	r2, r0, r2
 8007584:	4293      	cmp	r3, r2
 8007586:	d100      	bne.n	800758a <memset+0xa>
 8007588:	4770      	bx	lr
 800758a:	7019      	strb	r1, [r3, #0]
 800758c:	3301      	adds	r3, #1
 800758e:	e7f9      	b.n	8007584 <memset+0x4>

08007590 <_close_r>:
 8007590:	2300      	movs	r3, #0
 8007592:	b570      	push	{r4, r5, r6, lr}
 8007594:	4d06      	ldr	r5, [pc, #24]	@ (80075b0 <_close_r+0x20>)
 8007596:	0004      	movs	r4, r0
 8007598:	0008      	movs	r0, r1
 800759a:	602b      	str	r3, [r5, #0]
 800759c:	f7fb fb96 	bl	8002ccc <_close>
 80075a0:	1c43      	adds	r3, r0, #1
 80075a2:	d103      	bne.n	80075ac <_close_r+0x1c>
 80075a4:	682b      	ldr	r3, [r5, #0]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d000      	beq.n	80075ac <_close_r+0x1c>
 80075aa:	6023      	str	r3, [r4, #0]
 80075ac:	bd70      	pop	{r4, r5, r6, pc}
 80075ae:	46c0      	nop			@ (mov r8, r8)
 80075b0:	200004a8 	.word	0x200004a8

080075b4 <_lseek_r>:
 80075b4:	b570      	push	{r4, r5, r6, lr}
 80075b6:	0004      	movs	r4, r0
 80075b8:	0008      	movs	r0, r1
 80075ba:	0011      	movs	r1, r2
 80075bc:	001a      	movs	r2, r3
 80075be:	2300      	movs	r3, #0
 80075c0:	4d05      	ldr	r5, [pc, #20]	@ (80075d8 <_lseek_r+0x24>)
 80075c2:	602b      	str	r3, [r5, #0]
 80075c4:	f7fb fba3 	bl	8002d0e <_lseek>
 80075c8:	1c43      	adds	r3, r0, #1
 80075ca:	d103      	bne.n	80075d4 <_lseek_r+0x20>
 80075cc:	682b      	ldr	r3, [r5, #0]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d000      	beq.n	80075d4 <_lseek_r+0x20>
 80075d2:	6023      	str	r3, [r4, #0]
 80075d4:	bd70      	pop	{r4, r5, r6, pc}
 80075d6:	46c0      	nop			@ (mov r8, r8)
 80075d8:	200004a8 	.word	0x200004a8

080075dc <_read_r>:
 80075dc:	b570      	push	{r4, r5, r6, lr}
 80075de:	0004      	movs	r4, r0
 80075e0:	0008      	movs	r0, r1
 80075e2:	0011      	movs	r1, r2
 80075e4:	001a      	movs	r2, r3
 80075e6:	2300      	movs	r3, #0
 80075e8:	4d05      	ldr	r5, [pc, #20]	@ (8007600 <_read_r+0x24>)
 80075ea:	602b      	str	r3, [r5, #0]
 80075ec:	f7fb fb35 	bl	8002c5a <_read>
 80075f0:	1c43      	adds	r3, r0, #1
 80075f2:	d103      	bne.n	80075fc <_read_r+0x20>
 80075f4:	682b      	ldr	r3, [r5, #0]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d000      	beq.n	80075fc <_read_r+0x20>
 80075fa:	6023      	str	r3, [r4, #0]
 80075fc:	bd70      	pop	{r4, r5, r6, pc}
 80075fe:	46c0      	nop			@ (mov r8, r8)
 8007600:	200004a8 	.word	0x200004a8

08007604 <_write_r>:
 8007604:	b570      	push	{r4, r5, r6, lr}
 8007606:	0004      	movs	r4, r0
 8007608:	0008      	movs	r0, r1
 800760a:	0011      	movs	r1, r2
 800760c:	001a      	movs	r2, r3
 800760e:	2300      	movs	r3, #0
 8007610:	4d05      	ldr	r5, [pc, #20]	@ (8007628 <_write_r+0x24>)
 8007612:	602b      	str	r3, [r5, #0]
 8007614:	f7fb fb3e 	bl	8002c94 <_write>
 8007618:	1c43      	adds	r3, r0, #1
 800761a:	d103      	bne.n	8007624 <_write_r+0x20>
 800761c:	682b      	ldr	r3, [r5, #0]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d000      	beq.n	8007624 <_write_r+0x20>
 8007622:	6023      	str	r3, [r4, #0]
 8007624:	bd70      	pop	{r4, r5, r6, pc}
 8007626:	46c0      	nop			@ (mov r8, r8)
 8007628:	200004a8 	.word	0x200004a8

0800762c <__errno>:
 800762c:	4b01      	ldr	r3, [pc, #4]	@ (8007634 <__errno+0x8>)
 800762e:	6818      	ldr	r0, [r3, #0]
 8007630:	4770      	bx	lr
 8007632:	46c0      	nop			@ (mov r8, r8)
 8007634:	20000018 	.word	0x20000018

08007638 <__libc_init_array>:
 8007638:	b570      	push	{r4, r5, r6, lr}
 800763a:	2600      	movs	r6, #0
 800763c:	4c0c      	ldr	r4, [pc, #48]	@ (8007670 <__libc_init_array+0x38>)
 800763e:	4d0d      	ldr	r5, [pc, #52]	@ (8007674 <__libc_init_array+0x3c>)
 8007640:	1b64      	subs	r4, r4, r5
 8007642:	10a4      	asrs	r4, r4, #2
 8007644:	42a6      	cmp	r6, r4
 8007646:	d109      	bne.n	800765c <__libc_init_array+0x24>
 8007648:	2600      	movs	r6, #0
 800764a:	f000 ff8b 	bl	8008564 <_init>
 800764e:	4c0a      	ldr	r4, [pc, #40]	@ (8007678 <__libc_init_array+0x40>)
 8007650:	4d0a      	ldr	r5, [pc, #40]	@ (800767c <__libc_init_array+0x44>)
 8007652:	1b64      	subs	r4, r4, r5
 8007654:	10a4      	asrs	r4, r4, #2
 8007656:	42a6      	cmp	r6, r4
 8007658:	d105      	bne.n	8007666 <__libc_init_array+0x2e>
 800765a:	bd70      	pop	{r4, r5, r6, pc}
 800765c:	00b3      	lsls	r3, r6, #2
 800765e:	58eb      	ldr	r3, [r5, r3]
 8007660:	4798      	blx	r3
 8007662:	3601      	adds	r6, #1
 8007664:	e7ee      	b.n	8007644 <__libc_init_array+0xc>
 8007666:	00b3      	lsls	r3, r6, #2
 8007668:	58eb      	ldr	r3, [r5, r3]
 800766a:	4798      	blx	r3
 800766c:	3601      	adds	r6, #1
 800766e:	e7f2      	b.n	8007656 <__libc_init_array+0x1e>
 8007670:	08008eec 	.word	0x08008eec
 8007674:	08008eec 	.word	0x08008eec
 8007678:	08008ef0 	.word	0x08008ef0
 800767c:	08008eec 	.word	0x08008eec

08007680 <__retarget_lock_init_recursive>:
 8007680:	4770      	bx	lr

08007682 <__retarget_lock_acquire_recursive>:
 8007682:	4770      	bx	lr

08007684 <__retarget_lock_release_recursive>:
 8007684:	4770      	bx	lr

08007686 <memcpy>:
 8007686:	2300      	movs	r3, #0
 8007688:	b510      	push	{r4, lr}
 800768a:	429a      	cmp	r2, r3
 800768c:	d100      	bne.n	8007690 <memcpy+0xa>
 800768e:	bd10      	pop	{r4, pc}
 8007690:	5ccc      	ldrb	r4, [r1, r3]
 8007692:	54c4      	strb	r4, [r0, r3]
 8007694:	3301      	adds	r3, #1
 8007696:	e7f8      	b.n	800768a <memcpy+0x4>

08007698 <_free_r>:
 8007698:	b570      	push	{r4, r5, r6, lr}
 800769a:	0005      	movs	r5, r0
 800769c:	1e0c      	subs	r4, r1, #0
 800769e:	d010      	beq.n	80076c2 <_free_r+0x2a>
 80076a0:	3c04      	subs	r4, #4
 80076a2:	6823      	ldr	r3, [r4, #0]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	da00      	bge.n	80076aa <_free_r+0x12>
 80076a8:	18e4      	adds	r4, r4, r3
 80076aa:	0028      	movs	r0, r5
 80076ac:	f000 f8e0 	bl	8007870 <__malloc_lock>
 80076b0:	4a1d      	ldr	r2, [pc, #116]	@ (8007728 <_free_r+0x90>)
 80076b2:	6813      	ldr	r3, [r2, #0]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d105      	bne.n	80076c4 <_free_r+0x2c>
 80076b8:	6063      	str	r3, [r4, #4]
 80076ba:	6014      	str	r4, [r2, #0]
 80076bc:	0028      	movs	r0, r5
 80076be:	f000 f8df 	bl	8007880 <__malloc_unlock>
 80076c2:	bd70      	pop	{r4, r5, r6, pc}
 80076c4:	42a3      	cmp	r3, r4
 80076c6:	d908      	bls.n	80076da <_free_r+0x42>
 80076c8:	6820      	ldr	r0, [r4, #0]
 80076ca:	1821      	adds	r1, r4, r0
 80076cc:	428b      	cmp	r3, r1
 80076ce:	d1f3      	bne.n	80076b8 <_free_r+0x20>
 80076d0:	6819      	ldr	r1, [r3, #0]
 80076d2:	685b      	ldr	r3, [r3, #4]
 80076d4:	1809      	adds	r1, r1, r0
 80076d6:	6021      	str	r1, [r4, #0]
 80076d8:	e7ee      	b.n	80076b8 <_free_r+0x20>
 80076da:	001a      	movs	r2, r3
 80076dc:	685b      	ldr	r3, [r3, #4]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d001      	beq.n	80076e6 <_free_r+0x4e>
 80076e2:	42a3      	cmp	r3, r4
 80076e4:	d9f9      	bls.n	80076da <_free_r+0x42>
 80076e6:	6811      	ldr	r1, [r2, #0]
 80076e8:	1850      	adds	r0, r2, r1
 80076ea:	42a0      	cmp	r0, r4
 80076ec:	d10b      	bne.n	8007706 <_free_r+0x6e>
 80076ee:	6820      	ldr	r0, [r4, #0]
 80076f0:	1809      	adds	r1, r1, r0
 80076f2:	1850      	adds	r0, r2, r1
 80076f4:	6011      	str	r1, [r2, #0]
 80076f6:	4283      	cmp	r3, r0
 80076f8:	d1e0      	bne.n	80076bc <_free_r+0x24>
 80076fa:	6818      	ldr	r0, [r3, #0]
 80076fc:	685b      	ldr	r3, [r3, #4]
 80076fe:	1841      	adds	r1, r0, r1
 8007700:	6011      	str	r1, [r2, #0]
 8007702:	6053      	str	r3, [r2, #4]
 8007704:	e7da      	b.n	80076bc <_free_r+0x24>
 8007706:	42a0      	cmp	r0, r4
 8007708:	d902      	bls.n	8007710 <_free_r+0x78>
 800770a:	230c      	movs	r3, #12
 800770c:	602b      	str	r3, [r5, #0]
 800770e:	e7d5      	b.n	80076bc <_free_r+0x24>
 8007710:	6820      	ldr	r0, [r4, #0]
 8007712:	1821      	adds	r1, r4, r0
 8007714:	428b      	cmp	r3, r1
 8007716:	d103      	bne.n	8007720 <_free_r+0x88>
 8007718:	6819      	ldr	r1, [r3, #0]
 800771a:	685b      	ldr	r3, [r3, #4]
 800771c:	1809      	adds	r1, r1, r0
 800771e:	6021      	str	r1, [r4, #0]
 8007720:	6063      	str	r3, [r4, #4]
 8007722:	6054      	str	r4, [r2, #4]
 8007724:	e7ca      	b.n	80076bc <_free_r+0x24>
 8007726:	46c0      	nop			@ (mov r8, r8)
 8007728:	200004b4 	.word	0x200004b4

0800772c <sbrk_aligned>:
 800772c:	b570      	push	{r4, r5, r6, lr}
 800772e:	4e0f      	ldr	r6, [pc, #60]	@ (800776c <sbrk_aligned+0x40>)
 8007730:	000d      	movs	r5, r1
 8007732:	6831      	ldr	r1, [r6, #0]
 8007734:	0004      	movs	r4, r0
 8007736:	2900      	cmp	r1, #0
 8007738:	d102      	bne.n	8007740 <sbrk_aligned+0x14>
 800773a:	f000 fe2f 	bl	800839c <_sbrk_r>
 800773e:	6030      	str	r0, [r6, #0]
 8007740:	0029      	movs	r1, r5
 8007742:	0020      	movs	r0, r4
 8007744:	f000 fe2a 	bl	800839c <_sbrk_r>
 8007748:	1c43      	adds	r3, r0, #1
 800774a:	d103      	bne.n	8007754 <sbrk_aligned+0x28>
 800774c:	2501      	movs	r5, #1
 800774e:	426d      	negs	r5, r5
 8007750:	0028      	movs	r0, r5
 8007752:	bd70      	pop	{r4, r5, r6, pc}
 8007754:	2303      	movs	r3, #3
 8007756:	1cc5      	adds	r5, r0, #3
 8007758:	439d      	bics	r5, r3
 800775a:	42a8      	cmp	r0, r5
 800775c:	d0f8      	beq.n	8007750 <sbrk_aligned+0x24>
 800775e:	1a29      	subs	r1, r5, r0
 8007760:	0020      	movs	r0, r4
 8007762:	f000 fe1b 	bl	800839c <_sbrk_r>
 8007766:	3001      	adds	r0, #1
 8007768:	d1f2      	bne.n	8007750 <sbrk_aligned+0x24>
 800776a:	e7ef      	b.n	800774c <sbrk_aligned+0x20>
 800776c:	200004b0 	.word	0x200004b0

08007770 <_malloc_r>:
 8007770:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007772:	2203      	movs	r2, #3
 8007774:	1ccb      	adds	r3, r1, #3
 8007776:	4393      	bics	r3, r2
 8007778:	3308      	adds	r3, #8
 800777a:	0005      	movs	r5, r0
 800777c:	001f      	movs	r7, r3
 800777e:	2b0c      	cmp	r3, #12
 8007780:	d234      	bcs.n	80077ec <_malloc_r+0x7c>
 8007782:	270c      	movs	r7, #12
 8007784:	42b9      	cmp	r1, r7
 8007786:	d833      	bhi.n	80077f0 <_malloc_r+0x80>
 8007788:	0028      	movs	r0, r5
 800778a:	f000 f871 	bl	8007870 <__malloc_lock>
 800778e:	4e37      	ldr	r6, [pc, #220]	@ (800786c <_malloc_r+0xfc>)
 8007790:	6833      	ldr	r3, [r6, #0]
 8007792:	001c      	movs	r4, r3
 8007794:	2c00      	cmp	r4, #0
 8007796:	d12f      	bne.n	80077f8 <_malloc_r+0x88>
 8007798:	0039      	movs	r1, r7
 800779a:	0028      	movs	r0, r5
 800779c:	f7ff ffc6 	bl	800772c <sbrk_aligned>
 80077a0:	0004      	movs	r4, r0
 80077a2:	1c43      	adds	r3, r0, #1
 80077a4:	d15f      	bne.n	8007866 <_malloc_r+0xf6>
 80077a6:	6834      	ldr	r4, [r6, #0]
 80077a8:	9400      	str	r4, [sp, #0]
 80077aa:	9b00      	ldr	r3, [sp, #0]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d14a      	bne.n	8007846 <_malloc_r+0xd6>
 80077b0:	2c00      	cmp	r4, #0
 80077b2:	d052      	beq.n	800785a <_malloc_r+0xea>
 80077b4:	6823      	ldr	r3, [r4, #0]
 80077b6:	0028      	movs	r0, r5
 80077b8:	18e3      	adds	r3, r4, r3
 80077ba:	9900      	ldr	r1, [sp, #0]
 80077bc:	9301      	str	r3, [sp, #4]
 80077be:	f000 fded 	bl	800839c <_sbrk_r>
 80077c2:	9b01      	ldr	r3, [sp, #4]
 80077c4:	4283      	cmp	r3, r0
 80077c6:	d148      	bne.n	800785a <_malloc_r+0xea>
 80077c8:	6823      	ldr	r3, [r4, #0]
 80077ca:	0028      	movs	r0, r5
 80077cc:	1aff      	subs	r7, r7, r3
 80077ce:	0039      	movs	r1, r7
 80077d0:	f7ff ffac 	bl	800772c <sbrk_aligned>
 80077d4:	3001      	adds	r0, #1
 80077d6:	d040      	beq.n	800785a <_malloc_r+0xea>
 80077d8:	6823      	ldr	r3, [r4, #0]
 80077da:	19db      	adds	r3, r3, r7
 80077dc:	6023      	str	r3, [r4, #0]
 80077de:	6833      	ldr	r3, [r6, #0]
 80077e0:	685a      	ldr	r2, [r3, #4]
 80077e2:	2a00      	cmp	r2, #0
 80077e4:	d133      	bne.n	800784e <_malloc_r+0xde>
 80077e6:	9b00      	ldr	r3, [sp, #0]
 80077e8:	6033      	str	r3, [r6, #0]
 80077ea:	e019      	b.n	8007820 <_malloc_r+0xb0>
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	dac9      	bge.n	8007784 <_malloc_r+0x14>
 80077f0:	230c      	movs	r3, #12
 80077f2:	602b      	str	r3, [r5, #0]
 80077f4:	2000      	movs	r0, #0
 80077f6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80077f8:	6821      	ldr	r1, [r4, #0]
 80077fa:	1bc9      	subs	r1, r1, r7
 80077fc:	d420      	bmi.n	8007840 <_malloc_r+0xd0>
 80077fe:	290b      	cmp	r1, #11
 8007800:	d90a      	bls.n	8007818 <_malloc_r+0xa8>
 8007802:	19e2      	adds	r2, r4, r7
 8007804:	6027      	str	r7, [r4, #0]
 8007806:	42a3      	cmp	r3, r4
 8007808:	d104      	bne.n	8007814 <_malloc_r+0xa4>
 800780a:	6032      	str	r2, [r6, #0]
 800780c:	6863      	ldr	r3, [r4, #4]
 800780e:	6011      	str	r1, [r2, #0]
 8007810:	6053      	str	r3, [r2, #4]
 8007812:	e005      	b.n	8007820 <_malloc_r+0xb0>
 8007814:	605a      	str	r2, [r3, #4]
 8007816:	e7f9      	b.n	800780c <_malloc_r+0x9c>
 8007818:	6862      	ldr	r2, [r4, #4]
 800781a:	42a3      	cmp	r3, r4
 800781c:	d10e      	bne.n	800783c <_malloc_r+0xcc>
 800781e:	6032      	str	r2, [r6, #0]
 8007820:	0028      	movs	r0, r5
 8007822:	f000 f82d 	bl	8007880 <__malloc_unlock>
 8007826:	0020      	movs	r0, r4
 8007828:	2207      	movs	r2, #7
 800782a:	300b      	adds	r0, #11
 800782c:	1d23      	adds	r3, r4, #4
 800782e:	4390      	bics	r0, r2
 8007830:	1ac2      	subs	r2, r0, r3
 8007832:	4298      	cmp	r0, r3
 8007834:	d0df      	beq.n	80077f6 <_malloc_r+0x86>
 8007836:	1a1b      	subs	r3, r3, r0
 8007838:	50a3      	str	r3, [r4, r2]
 800783a:	e7dc      	b.n	80077f6 <_malloc_r+0x86>
 800783c:	605a      	str	r2, [r3, #4]
 800783e:	e7ef      	b.n	8007820 <_malloc_r+0xb0>
 8007840:	0023      	movs	r3, r4
 8007842:	6864      	ldr	r4, [r4, #4]
 8007844:	e7a6      	b.n	8007794 <_malloc_r+0x24>
 8007846:	9c00      	ldr	r4, [sp, #0]
 8007848:	6863      	ldr	r3, [r4, #4]
 800784a:	9300      	str	r3, [sp, #0]
 800784c:	e7ad      	b.n	80077aa <_malloc_r+0x3a>
 800784e:	001a      	movs	r2, r3
 8007850:	685b      	ldr	r3, [r3, #4]
 8007852:	42a3      	cmp	r3, r4
 8007854:	d1fb      	bne.n	800784e <_malloc_r+0xde>
 8007856:	2300      	movs	r3, #0
 8007858:	e7da      	b.n	8007810 <_malloc_r+0xa0>
 800785a:	230c      	movs	r3, #12
 800785c:	0028      	movs	r0, r5
 800785e:	602b      	str	r3, [r5, #0]
 8007860:	f000 f80e 	bl	8007880 <__malloc_unlock>
 8007864:	e7c6      	b.n	80077f4 <_malloc_r+0x84>
 8007866:	6007      	str	r7, [r0, #0]
 8007868:	e7da      	b.n	8007820 <_malloc_r+0xb0>
 800786a:	46c0      	nop			@ (mov r8, r8)
 800786c:	200004b4 	.word	0x200004b4

08007870 <__malloc_lock>:
 8007870:	b510      	push	{r4, lr}
 8007872:	4802      	ldr	r0, [pc, #8]	@ (800787c <__malloc_lock+0xc>)
 8007874:	f7ff ff05 	bl	8007682 <__retarget_lock_acquire_recursive>
 8007878:	bd10      	pop	{r4, pc}
 800787a:	46c0      	nop			@ (mov r8, r8)
 800787c:	200004ac 	.word	0x200004ac

08007880 <__malloc_unlock>:
 8007880:	b510      	push	{r4, lr}
 8007882:	4802      	ldr	r0, [pc, #8]	@ (800788c <__malloc_unlock+0xc>)
 8007884:	f7ff fefe 	bl	8007684 <__retarget_lock_release_recursive>
 8007888:	bd10      	pop	{r4, pc}
 800788a:	46c0      	nop			@ (mov r8, r8)
 800788c:	200004ac 	.word	0x200004ac

08007890 <__ssputs_r>:
 8007890:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007892:	688e      	ldr	r6, [r1, #8]
 8007894:	b085      	sub	sp, #20
 8007896:	001f      	movs	r7, r3
 8007898:	000c      	movs	r4, r1
 800789a:	680b      	ldr	r3, [r1, #0]
 800789c:	9002      	str	r0, [sp, #8]
 800789e:	9203      	str	r2, [sp, #12]
 80078a0:	42be      	cmp	r6, r7
 80078a2:	d830      	bhi.n	8007906 <__ssputs_r+0x76>
 80078a4:	210c      	movs	r1, #12
 80078a6:	5e62      	ldrsh	r2, [r4, r1]
 80078a8:	2190      	movs	r1, #144	@ 0x90
 80078aa:	00c9      	lsls	r1, r1, #3
 80078ac:	420a      	tst	r2, r1
 80078ae:	d028      	beq.n	8007902 <__ssputs_r+0x72>
 80078b0:	2003      	movs	r0, #3
 80078b2:	6921      	ldr	r1, [r4, #16]
 80078b4:	1a5b      	subs	r3, r3, r1
 80078b6:	9301      	str	r3, [sp, #4]
 80078b8:	6963      	ldr	r3, [r4, #20]
 80078ba:	4343      	muls	r3, r0
 80078bc:	9801      	ldr	r0, [sp, #4]
 80078be:	0fdd      	lsrs	r5, r3, #31
 80078c0:	18ed      	adds	r5, r5, r3
 80078c2:	1c7b      	adds	r3, r7, #1
 80078c4:	181b      	adds	r3, r3, r0
 80078c6:	106d      	asrs	r5, r5, #1
 80078c8:	42ab      	cmp	r3, r5
 80078ca:	d900      	bls.n	80078ce <__ssputs_r+0x3e>
 80078cc:	001d      	movs	r5, r3
 80078ce:	0552      	lsls	r2, r2, #21
 80078d0:	d528      	bpl.n	8007924 <__ssputs_r+0x94>
 80078d2:	0029      	movs	r1, r5
 80078d4:	9802      	ldr	r0, [sp, #8]
 80078d6:	f7ff ff4b 	bl	8007770 <_malloc_r>
 80078da:	1e06      	subs	r6, r0, #0
 80078dc:	d02c      	beq.n	8007938 <__ssputs_r+0xa8>
 80078de:	9a01      	ldr	r2, [sp, #4]
 80078e0:	6921      	ldr	r1, [r4, #16]
 80078e2:	f7ff fed0 	bl	8007686 <memcpy>
 80078e6:	89a2      	ldrh	r2, [r4, #12]
 80078e8:	4b18      	ldr	r3, [pc, #96]	@ (800794c <__ssputs_r+0xbc>)
 80078ea:	401a      	ands	r2, r3
 80078ec:	2380      	movs	r3, #128	@ 0x80
 80078ee:	4313      	orrs	r3, r2
 80078f0:	81a3      	strh	r3, [r4, #12]
 80078f2:	9b01      	ldr	r3, [sp, #4]
 80078f4:	6126      	str	r6, [r4, #16]
 80078f6:	18f6      	adds	r6, r6, r3
 80078f8:	6026      	str	r6, [r4, #0]
 80078fa:	003e      	movs	r6, r7
 80078fc:	6165      	str	r5, [r4, #20]
 80078fe:	1aed      	subs	r5, r5, r3
 8007900:	60a5      	str	r5, [r4, #8]
 8007902:	42be      	cmp	r6, r7
 8007904:	d900      	bls.n	8007908 <__ssputs_r+0x78>
 8007906:	003e      	movs	r6, r7
 8007908:	0032      	movs	r2, r6
 800790a:	9903      	ldr	r1, [sp, #12]
 800790c:	6820      	ldr	r0, [r4, #0]
 800790e:	f000 fd31 	bl	8008374 <memmove>
 8007912:	2000      	movs	r0, #0
 8007914:	68a3      	ldr	r3, [r4, #8]
 8007916:	1b9b      	subs	r3, r3, r6
 8007918:	60a3      	str	r3, [r4, #8]
 800791a:	6823      	ldr	r3, [r4, #0]
 800791c:	199b      	adds	r3, r3, r6
 800791e:	6023      	str	r3, [r4, #0]
 8007920:	b005      	add	sp, #20
 8007922:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007924:	002a      	movs	r2, r5
 8007926:	9802      	ldr	r0, [sp, #8]
 8007928:	f000 fd55 	bl	80083d6 <_realloc_r>
 800792c:	1e06      	subs	r6, r0, #0
 800792e:	d1e0      	bne.n	80078f2 <__ssputs_r+0x62>
 8007930:	6921      	ldr	r1, [r4, #16]
 8007932:	9802      	ldr	r0, [sp, #8]
 8007934:	f7ff feb0 	bl	8007698 <_free_r>
 8007938:	230c      	movs	r3, #12
 800793a:	2001      	movs	r0, #1
 800793c:	9a02      	ldr	r2, [sp, #8]
 800793e:	4240      	negs	r0, r0
 8007940:	6013      	str	r3, [r2, #0]
 8007942:	89a2      	ldrh	r2, [r4, #12]
 8007944:	3334      	adds	r3, #52	@ 0x34
 8007946:	4313      	orrs	r3, r2
 8007948:	81a3      	strh	r3, [r4, #12]
 800794a:	e7e9      	b.n	8007920 <__ssputs_r+0x90>
 800794c:	fffffb7f 	.word	0xfffffb7f

08007950 <_svfiprintf_r>:
 8007950:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007952:	b0a1      	sub	sp, #132	@ 0x84
 8007954:	9003      	str	r0, [sp, #12]
 8007956:	001d      	movs	r5, r3
 8007958:	898b      	ldrh	r3, [r1, #12]
 800795a:	000f      	movs	r7, r1
 800795c:	0016      	movs	r6, r2
 800795e:	061b      	lsls	r3, r3, #24
 8007960:	d511      	bpl.n	8007986 <_svfiprintf_r+0x36>
 8007962:	690b      	ldr	r3, [r1, #16]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d10e      	bne.n	8007986 <_svfiprintf_r+0x36>
 8007968:	2140      	movs	r1, #64	@ 0x40
 800796a:	f7ff ff01 	bl	8007770 <_malloc_r>
 800796e:	6038      	str	r0, [r7, #0]
 8007970:	6138      	str	r0, [r7, #16]
 8007972:	2800      	cmp	r0, #0
 8007974:	d105      	bne.n	8007982 <_svfiprintf_r+0x32>
 8007976:	230c      	movs	r3, #12
 8007978:	9a03      	ldr	r2, [sp, #12]
 800797a:	6013      	str	r3, [r2, #0]
 800797c:	2001      	movs	r0, #1
 800797e:	4240      	negs	r0, r0
 8007980:	e0cf      	b.n	8007b22 <_svfiprintf_r+0x1d2>
 8007982:	2340      	movs	r3, #64	@ 0x40
 8007984:	617b      	str	r3, [r7, #20]
 8007986:	2300      	movs	r3, #0
 8007988:	ac08      	add	r4, sp, #32
 800798a:	6163      	str	r3, [r4, #20]
 800798c:	3320      	adds	r3, #32
 800798e:	7663      	strb	r3, [r4, #25]
 8007990:	3310      	adds	r3, #16
 8007992:	76a3      	strb	r3, [r4, #26]
 8007994:	9507      	str	r5, [sp, #28]
 8007996:	0035      	movs	r5, r6
 8007998:	782b      	ldrb	r3, [r5, #0]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d001      	beq.n	80079a2 <_svfiprintf_r+0x52>
 800799e:	2b25      	cmp	r3, #37	@ 0x25
 80079a0:	d148      	bne.n	8007a34 <_svfiprintf_r+0xe4>
 80079a2:	1bab      	subs	r3, r5, r6
 80079a4:	9305      	str	r3, [sp, #20]
 80079a6:	42b5      	cmp	r5, r6
 80079a8:	d00b      	beq.n	80079c2 <_svfiprintf_r+0x72>
 80079aa:	0032      	movs	r2, r6
 80079ac:	0039      	movs	r1, r7
 80079ae:	9803      	ldr	r0, [sp, #12]
 80079b0:	f7ff ff6e 	bl	8007890 <__ssputs_r>
 80079b4:	3001      	adds	r0, #1
 80079b6:	d100      	bne.n	80079ba <_svfiprintf_r+0x6a>
 80079b8:	e0ae      	b.n	8007b18 <_svfiprintf_r+0x1c8>
 80079ba:	6963      	ldr	r3, [r4, #20]
 80079bc:	9a05      	ldr	r2, [sp, #20]
 80079be:	189b      	adds	r3, r3, r2
 80079c0:	6163      	str	r3, [r4, #20]
 80079c2:	782b      	ldrb	r3, [r5, #0]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d100      	bne.n	80079ca <_svfiprintf_r+0x7a>
 80079c8:	e0a6      	b.n	8007b18 <_svfiprintf_r+0x1c8>
 80079ca:	2201      	movs	r2, #1
 80079cc:	2300      	movs	r3, #0
 80079ce:	4252      	negs	r2, r2
 80079d0:	6062      	str	r2, [r4, #4]
 80079d2:	a904      	add	r1, sp, #16
 80079d4:	3254      	adds	r2, #84	@ 0x54
 80079d6:	1852      	adds	r2, r2, r1
 80079d8:	1c6e      	adds	r6, r5, #1
 80079da:	6023      	str	r3, [r4, #0]
 80079dc:	60e3      	str	r3, [r4, #12]
 80079de:	60a3      	str	r3, [r4, #8]
 80079e0:	7013      	strb	r3, [r2, #0]
 80079e2:	65a3      	str	r3, [r4, #88]	@ 0x58
 80079e4:	4b54      	ldr	r3, [pc, #336]	@ (8007b38 <_svfiprintf_r+0x1e8>)
 80079e6:	2205      	movs	r2, #5
 80079e8:	0018      	movs	r0, r3
 80079ea:	7831      	ldrb	r1, [r6, #0]
 80079ec:	9305      	str	r3, [sp, #20]
 80079ee:	f000 fce7 	bl	80083c0 <memchr>
 80079f2:	1c75      	adds	r5, r6, #1
 80079f4:	2800      	cmp	r0, #0
 80079f6:	d11f      	bne.n	8007a38 <_svfiprintf_r+0xe8>
 80079f8:	6822      	ldr	r2, [r4, #0]
 80079fa:	06d3      	lsls	r3, r2, #27
 80079fc:	d504      	bpl.n	8007a08 <_svfiprintf_r+0xb8>
 80079fe:	2353      	movs	r3, #83	@ 0x53
 8007a00:	a904      	add	r1, sp, #16
 8007a02:	185b      	adds	r3, r3, r1
 8007a04:	2120      	movs	r1, #32
 8007a06:	7019      	strb	r1, [r3, #0]
 8007a08:	0713      	lsls	r3, r2, #28
 8007a0a:	d504      	bpl.n	8007a16 <_svfiprintf_r+0xc6>
 8007a0c:	2353      	movs	r3, #83	@ 0x53
 8007a0e:	a904      	add	r1, sp, #16
 8007a10:	185b      	adds	r3, r3, r1
 8007a12:	212b      	movs	r1, #43	@ 0x2b
 8007a14:	7019      	strb	r1, [r3, #0]
 8007a16:	7833      	ldrb	r3, [r6, #0]
 8007a18:	2b2a      	cmp	r3, #42	@ 0x2a
 8007a1a:	d016      	beq.n	8007a4a <_svfiprintf_r+0xfa>
 8007a1c:	0035      	movs	r5, r6
 8007a1e:	2100      	movs	r1, #0
 8007a20:	200a      	movs	r0, #10
 8007a22:	68e3      	ldr	r3, [r4, #12]
 8007a24:	782a      	ldrb	r2, [r5, #0]
 8007a26:	1c6e      	adds	r6, r5, #1
 8007a28:	3a30      	subs	r2, #48	@ 0x30
 8007a2a:	2a09      	cmp	r2, #9
 8007a2c:	d950      	bls.n	8007ad0 <_svfiprintf_r+0x180>
 8007a2e:	2900      	cmp	r1, #0
 8007a30:	d111      	bne.n	8007a56 <_svfiprintf_r+0x106>
 8007a32:	e017      	b.n	8007a64 <_svfiprintf_r+0x114>
 8007a34:	3501      	adds	r5, #1
 8007a36:	e7af      	b.n	8007998 <_svfiprintf_r+0x48>
 8007a38:	9b05      	ldr	r3, [sp, #20]
 8007a3a:	6822      	ldr	r2, [r4, #0]
 8007a3c:	1ac0      	subs	r0, r0, r3
 8007a3e:	2301      	movs	r3, #1
 8007a40:	4083      	lsls	r3, r0
 8007a42:	4313      	orrs	r3, r2
 8007a44:	002e      	movs	r6, r5
 8007a46:	6023      	str	r3, [r4, #0]
 8007a48:	e7cc      	b.n	80079e4 <_svfiprintf_r+0x94>
 8007a4a:	9b07      	ldr	r3, [sp, #28]
 8007a4c:	1d19      	adds	r1, r3, #4
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	9107      	str	r1, [sp, #28]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	db01      	blt.n	8007a5a <_svfiprintf_r+0x10a>
 8007a56:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007a58:	e004      	b.n	8007a64 <_svfiprintf_r+0x114>
 8007a5a:	425b      	negs	r3, r3
 8007a5c:	60e3      	str	r3, [r4, #12]
 8007a5e:	2302      	movs	r3, #2
 8007a60:	4313      	orrs	r3, r2
 8007a62:	6023      	str	r3, [r4, #0]
 8007a64:	782b      	ldrb	r3, [r5, #0]
 8007a66:	2b2e      	cmp	r3, #46	@ 0x2e
 8007a68:	d10c      	bne.n	8007a84 <_svfiprintf_r+0x134>
 8007a6a:	786b      	ldrb	r3, [r5, #1]
 8007a6c:	2b2a      	cmp	r3, #42	@ 0x2a
 8007a6e:	d134      	bne.n	8007ada <_svfiprintf_r+0x18a>
 8007a70:	9b07      	ldr	r3, [sp, #28]
 8007a72:	3502      	adds	r5, #2
 8007a74:	1d1a      	adds	r2, r3, #4
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	9207      	str	r2, [sp, #28]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	da01      	bge.n	8007a82 <_svfiprintf_r+0x132>
 8007a7e:	2301      	movs	r3, #1
 8007a80:	425b      	negs	r3, r3
 8007a82:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a84:	4e2d      	ldr	r6, [pc, #180]	@ (8007b3c <_svfiprintf_r+0x1ec>)
 8007a86:	2203      	movs	r2, #3
 8007a88:	0030      	movs	r0, r6
 8007a8a:	7829      	ldrb	r1, [r5, #0]
 8007a8c:	f000 fc98 	bl	80083c0 <memchr>
 8007a90:	2800      	cmp	r0, #0
 8007a92:	d006      	beq.n	8007aa2 <_svfiprintf_r+0x152>
 8007a94:	2340      	movs	r3, #64	@ 0x40
 8007a96:	1b80      	subs	r0, r0, r6
 8007a98:	4083      	lsls	r3, r0
 8007a9a:	6822      	ldr	r2, [r4, #0]
 8007a9c:	3501      	adds	r5, #1
 8007a9e:	4313      	orrs	r3, r2
 8007aa0:	6023      	str	r3, [r4, #0]
 8007aa2:	7829      	ldrb	r1, [r5, #0]
 8007aa4:	2206      	movs	r2, #6
 8007aa6:	4826      	ldr	r0, [pc, #152]	@ (8007b40 <_svfiprintf_r+0x1f0>)
 8007aa8:	1c6e      	adds	r6, r5, #1
 8007aaa:	7621      	strb	r1, [r4, #24]
 8007aac:	f000 fc88 	bl	80083c0 <memchr>
 8007ab0:	2800      	cmp	r0, #0
 8007ab2:	d038      	beq.n	8007b26 <_svfiprintf_r+0x1d6>
 8007ab4:	4b23      	ldr	r3, [pc, #140]	@ (8007b44 <_svfiprintf_r+0x1f4>)
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d122      	bne.n	8007b00 <_svfiprintf_r+0x1b0>
 8007aba:	2207      	movs	r2, #7
 8007abc:	9b07      	ldr	r3, [sp, #28]
 8007abe:	3307      	adds	r3, #7
 8007ac0:	4393      	bics	r3, r2
 8007ac2:	3308      	adds	r3, #8
 8007ac4:	9307      	str	r3, [sp, #28]
 8007ac6:	6963      	ldr	r3, [r4, #20]
 8007ac8:	9a04      	ldr	r2, [sp, #16]
 8007aca:	189b      	adds	r3, r3, r2
 8007acc:	6163      	str	r3, [r4, #20]
 8007ace:	e762      	b.n	8007996 <_svfiprintf_r+0x46>
 8007ad0:	4343      	muls	r3, r0
 8007ad2:	0035      	movs	r5, r6
 8007ad4:	2101      	movs	r1, #1
 8007ad6:	189b      	adds	r3, r3, r2
 8007ad8:	e7a4      	b.n	8007a24 <_svfiprintf_r+0xd4>
 8007ada:	2300      	movs	r3, #0
 8007adc:	200a      	movs	r0, #10
 8007ade:	0019      	movs	r1, r3
 8007ae0:	3501      	adds	r5, #1
 8007ae2:	6063      	str	r3, [r4, #4]
 8007ae4:	782a      	ldrb	r2, [r5, #0]
 8007ae6:	1c6e      	adds	r6, r5, #1
 8007ae8:	3a30      	subs	r2, #48	@ 0x30
 8007aea:	2a09      	cmp	r2, #9
 8007aec:	d903      	bls.n	8007af6 <_svfiprintf_r+0x1a6>
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d0c8      	beq.n	8007a84 <_svfiprintf_r+0x134>
 8007af2:	9109      	str	r1, [sp, #36]	@ 0x24
 8007af4:	e7c6      	b.n	8007a84 <_svfiprintf_r+0x134>
 8007af6:	4341      	muls	r1, r0
 8007af8:	0035      	movs	r5, r6
 8007afa:	2301      	movs	r3, #1
 8007afc:	1889      	adds	r1, r1, r2
 8007afe:	e7f1      	b.n	8007ae4 <_svfiprintf_r+0x194>
 8007b00:	aa07      	add	r2, sp, #28
 8007b02:	9200      	str	r2, [sp, #0]
 8007b04:	0021      	movs	r1, r4
 8007b06:	003a      	movs	r2, r7
 8007b08:	4b0f      	ldr	r3, [pc, #60]	@ (8007b48 <_svfiprintf_r+0x1f8>)
 8007b0a:	9803      	ldr	r0, [sp, #12]
 8007b0c:	e000      	b.n	8007b10 <_svfiprintf_r+0x1c0>
 8007b0e:	bf00      	nop
 8007b10:	9004      	str	r0, [sp, #16]
 8007b12:	9b04      	ldr	r3, [sp, #16]
 8007b14:	3301      	adds	r3, #1
 8007b16:	d1d6      	bne.n	8007ac6 <_svfiprintf_r+0x176>
 8007b18:	89bb      	ldrh	r3, [r7, #12]
 8007b1a:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8007b1c:	065b      	lsls	r3, r3, #25
 8007b1e:	d500      	bpl.n	8007b22 <_svfiprintf_r+0x1d2>
 8007b20:	e72c      	b.n	800797c <_svfiprintf_r+0x2c>
 8007b22:	b021      	add	sp, #132	@ 0x84
 8007b24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b26:	aa07      	add	r2, sp, #28
 8007b28:	9200      	str	r2, [sp, #0]
 8007b2a:	0021      	movs	r1, r4
 8007b2c:	003a      	movs	r2, r7
 8007b2e:	4b06      	ldr	r3, [pc, #24]	@ (8007b48 <_svfiprintf_r+0x1f8>)
 8007b30:	9803      	ldr	r0, [sp, #12]
 8007b32:	f000 f9bf 	bl	8007eb4 <_printf_i>
 8007b36:	e7eb      	b.n	8007b10 <_svfiprintf_r+0x1c0>
 8007b38:	08008eb1 	.word	0x08008eb1
 8007b3c:	08008eb7 	.word	0x08008eb7
 8007b40:	08008ebb 	.word	0x08008ebb
 8007b44:	00000000 	.word	0x00000000
 8007b48:	08007891 	.word	0x08007891

08007b4c <__sfputc_r>:
 8007b4c:	6893      	ldr	r3, [r2, #8]
 8007b4e:	b510      	push	{r4, lr}
 8007b50:	3b01      	subs	r3, #1
 8007b52:	6093      	str	r3, [r2, #8]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	da04      	bge.n	8007b62 <__sfputc_r+0x16>
 8007b58:	6994      	ldr	r4, [r2, #24]
 8007b5a:	42a3      	cmp	r3, r4
 8007b5c:	db07      	blt.n	8007b6e <__sfputc_r+0x22>
 8007b5e:	290a      	cmp	r1, #10
 8007b60:	d005      	beq.n	8007b6e <__sfputc_r+0x22>
 8007b62:	6813      	ldr	r3, [r2, #0]
 8007b64:	1c58      	adds	r0, r3, #1
 8007b66:	6010      	str	r0, [r2, #0]
 8007b68:	7019      	strb	r1, [r3, #0]
 8007b6a:	0008      	movs	r0, r1
 8007b6c:	bd10      	pop	{r4, pc}
 8007b6e:	f000 fb60 	bl	8008232 <__swbuf_r>
 8007b72:	0001      	movs	r1, r0
 8007b74:	e7f9      	b.n	8007b6a <__sfputc_r+0x1e>

08007b76 <__sfputs_r>:
 8007b76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b78:	0006      	movs	r6, r0
 8007b7a:	000f      	movs	r7, r1
 8007b7c:	0014      	movs	r4, r2
 8007b7e:	18d5      	adds	r5, r2, r3
 8007b80:	42ac      	cmp	r4, r5
 8007b82:	d101      	bne.n	8007b88 <__sfputs_r+0x12>
 8007b84:	2000      	movs	r0, #0
 8007b86:	e007      	b.n	8007b98 <__sfputs_r+0x22>
 8007b88:	7821      	ldrb	r1, [r4, #0]
 8007b8a:	003a      	movs	r2, r7
 8007b8c:	0030      	movs	r0, r6
 8007b8e:	f7ff ffdd 	bl	8007b4c <__sfputc_r>
 8007b92:	3401      	adds	r4, #1
 8007b94:	1c43      	adds	r3, r0, #1
 8007b96:	d1f3      	bne.n	8007b80 <__sfputs_r+0xa>
 8007b98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007b9c <_vfiprintf_r>:
 8007b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b9e:	b0a1      	sub	sp, #132	@ 0x84
 8007ba0:	000f      	movs	r7, r1
 8007ba2:	0015      	movs	r5, r2
 8007ba4:	001e      	movs	r6, r3
 8007ba6:	9003      	str	r0, [sp, #12]
 8007ba8:	2800      	cmp	r0, #0
 8007baa:	d004      	beq.n	8007bb6 <_vfiprintf_r+0x1a>
 8007bac:	6a03      	ldr	r3, [r0, #32]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d101      	bne.n	8007bb6 <_vfiprintf_r+0x1a>
 8007bb2:	f7ff fc35 	bl	8007420 <__sinit>
 8007bb6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007bb8:	07db      	lsls	r3, r3, #31
 8007bba:	d405      	bmi.n	8007bc8 <_vfiprintf_r+0x2c>
 8007bbc:	89bb      	ldrh	r3, [r7, #12]
 8007bbe:	059b      	lsls	r3, r3, #22
 8007bc0:	d402      	bmi.n	8007bc8 <_vfiprintf_r+0x2c>
 8007bc2:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8007bc4:	f7ff fd5d 	bl	8007682 <__retarget_lock_acquire_recursive>
 8007bc8:	89bb      	ldrh	r3, [r7, #12]
 8007bca:	071b      	lsls	r3, r3, #28
 8007bcc:	d502      	bpl.n	8007bd4 <_vfiprintf_r+0x38>
 8007bce:	693b      	ldr	r3, [r7, #16]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d113      	bne.n	8007bfc <_vfiprintf_r+0x60>
 8007bd4:	0039      	movs	r1, r7
 8007bd6:	9803      	ldr	r0, [sp, #12]
 8007bd8:	f000 fb6e 	bl	80082b8 <__swsetup_r>
 8007bdc:	2800      	cmp	r0, #0
 8007bde:	d00d      	beq.n	8007bfc <_vfiprintf_r+0x60>
 8007be0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007be2:	07db      	lsls	r3, r3, #31
 8007be4:	d503      	bpl.n	8007bee <_vfiprintf_r+0x52>
 8007be6:	2001      	movs	r0, #1
 8007be8:	4240      	negs	r0, r0
 8007bea:	b021      	add	sp, #132	@ 0x84
 8007bec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007bee:	89bb      	ldrh	r3, [r7, #12]
 8007bf0:	059b      	lsls	r3, r3, #22
 8007bf2:	d4f8      	bmi.n	8007be6 <_vfiprintf_r+0x4a>
 8007bf4:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8007bf6:	f7ff fd45 	bl	8007684 <__retarget_lock_release_recursive>
 8007bfa:	e7f4      	b.n	8007be6 <_vfiprintf_r+0x4a>
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	ac08      	add	r4, sp, #32
 8007c00:	6163      	str	r3, [r4, #20]
 8007c02:	3320      	adds	r3, #32
 8007c04:	7663      	strb	r3, [r4, #25]
 8007c06:	3310      	adds	r3, #16
 8007c08:	76a3      	strb	r3, [r4, #26]
 8007c0a:	9607      	str	r6, [sp, #28]
 8007c0c:	002e      	movs	r6, r5
 8007c0e:	7833      	ldrb	r3, [r6, #0]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d001      	beq.n	8007c18 <_vfiprintf_r+0x7c>
 8007c14:	2b25      	cmp	r3, #37	@ 0x25
 8007c16:	d148      	bne.n	8007caa <_vfiprintf_r+0x10e>
 8007c18:	1b73      	subs	r3, r6, r5
 8007c1a:	9305      	str	r3, [sp, #20]
 8007c1c:	42ae      	cmp	r6, r5
 8007c1e:	d00b      	beq.n	8007c38 <_vfiprintf_r+0x9c>
 8007c20:	002a      	movs	r2, r5
 8007c22:	0039      	movs	r1, r7
 8007c24:	9803      	ldr	r0, [sp, #12]
 8007c26:	f7ff ffa6 	bl	8007b76 <__sfputs_r>
 8007c2a:	3001      	adds	r0, #1
 8007c2c:	d100      	bne.n	8007c30 <_vfiprintf_r+0x94>
 8007c2e:	e0ae      	b.n	8007d8e <_vfiprintf_r+0x1f2>
 8007c30:	6963      	ldr	r3, [r4, #20]
 8007c32:	9a05      	ldr	r2, [sp, #20]
 8007c34:	189b      	adds	r3, r3, r2
 8007c36:	6163      	str	r3, [r4, #20]
 8007c38:	7833      	ldrb	r3, [r6, #0]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d100      	bne.n	8007c40 <_vfiprintf_r+0xa4>
 8007c3e:	e0a6      	b.n	8007d8e <_vfiprintf_r+0x1f2>
 8007c40:	2201      	movs	r2, #1
 8007c42:	2300      	movs	r3, #0
 8007c44:	4252      	negs	r2, r2
 8007c46:	6062      	str	r2, [r4, #4]
 8007c48:	a904      	add	r1, sp, #16
 8007c4a:	3254      	adds	r2, #84	@ 0x54
 8007c4c:	1852      	adds	r2, r2, r1
 8007c4e:	1c75      	adds	r5, r6, #1
 8007c50:	6023      	str	r3, [r4, #0]
 8007c52:	60e3      	str	r3, [r4, #12]
 8007c54:	60a3      	str	r3, [r4, #8]
 8007c56:	7013      	strb	r3, [r2, #0]
 8007c58:	65a3      	str	r3, [r4, #88]	@ 0x58
 8007c5a:	4b59      	ldr	r3, [pc, #356]	@ (8007dc0 <_vfiprintf_r+0x224>)
 8007c5c:	2205      	movs	r2, #5
 8007c5e:	0018      	movs	r0, r3
 8007c60:	7829      	ldrb	r1, [r5, #0]
 8007c62:	9305      	str	r3, [sp, #20]
 8007c64:	f000 fbac 	bl	80083c0 <memchr>
 8007c68:	1c6e      	adds	r6, r5, #1
 8007c6a:	2800      	cmp	r0, #0
 8007c6c:	d11f      	bne.n	8007cae <_vfiprintf_r+0x112>
 8007c6e:	6822      	ldr	r2, [r4, #0]
 8007c70:	06d3      	lsls	r3, r2, #27
 8007c72:	d504      	bpl.n	8007c7e <_vfiprintf_r+0xe2>
 8007c74:	2353      	movs	r3, #83	@ 0x53
 8007c76:	a904      	add	r1, sp, #16
 8007c78:	185b      	adds	r3, r3, r1
 8007c7a:	2120      	movs	r1, #32
 8007c7c:	7019      	strb	r1, [r3, #0]
 8007c7e:	0713      	lsls	r3, r2, #28
 8007c80:	d504      	bpl.n	8007c8c <_vfiprintf_r+0xf0>
 8007c82:	2353      	movs	r3, #83	@ 0x53
 8007c84:	a904      	add	r1, sp, #16
 8007c86:	185b      	adds	r3, r3, r1
 8007c88:	212b      	movs	r1, #43	@ 0x2b
 8007c8a:	7019      	strb	r1, [r3, #0]
 8007c8c:	782b      	ldrb	r3, [r5, #0]
 8007c8e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007c90:	d016      	beq.n	8007cc0 <_vfiprintf_r+0x124>
 8007c92:	002e      	movs	r6, r5
 8007c94:	2100      	movs	r1, #0
 8007c96:	200a      	movs	r0, #10
 8007c98:	68e3      	ldr	r3, [r4, #12]
 8007c9a:	7832      	ldrb	r2, [r6, #0]
 8007c9c:	1c75      	adds	r5, r6, #1
 8007c9e:	3a30      	subs	r2, #48	@ 0x30
 8007ca0:	2a09      	cmp	r2, #9
 8007ca2:	d950      	bls.n	8007d46 <_vfiprintf_r+0x1aa>
 8007ca4:	2900      	cmp	r1, #0
 8007ca6:	d111      	bne.n	8007ccc <_vfiprintf_r+0x130>
 8007ca8:	e017      	b.n	8007cda <_vfiprintf_r+0x13e>
 8007caa:	3601      	adds	r6, #1
 8007cac:	e7af      	b.n	8007c0e <_vfiprintf_r+0x72>
 8007cae:	9b05      	ldr	r3, [sp, #20]
 8007cb0:	6822      	ldr	r2, [r4, #0]
 8007cb2:	1ac0      	subs	r0, r0, r3
 8007cb4:	2301      	movs	r3, #1
 8007cb6:	4083      	lsls	r3, r0
 8007cb8:	4313      	orrs	r3, r2
 8007cba:	0035      	movs	r5, r6
 8007cbc:	6023      	str	r3, [r4, #0]
 8007cbe:	e7cc      	b.n	8007c5a <_vfiprintf_r+0xbe>
 8007cc0:	9b07      	ldr	r3, [sp, #28]
 8007cc2:	1d19      	adds	r1, r3, #4
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	9107      	str	r1, [sp, #28]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	db01      	blt.n	8007cd0 <_vfiprintf_r+0x134>
 8007ccc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007cce:	e004      	b.n	8007cda <_vfiprintf_r+0x13e>
 8007cd0:	425b      	negs	r3, r3
 8007cd2:	60e3      	str	r3, [r4, #12]
 8007cd4:	2302      	movs	r3, #2
 8007cd6:	4313      	orrs	r3, r2
 8007cd8:	6023      	str	r3, [r4, #0]
 8007cda:	7833      	ldrb	r3, [r6, #0]
 8007cdc:	2b2e      	cmp	r3, #46	@ 0x2e
 8007cde:	d10c      	bne.n	8007cfa <_vfiprintf_r+0x15e>
 8007ce0:	7873      	ldrb	r3, [r6, #1]
 8007ce2:	2b2a      	cmp	r3, #42	@ 0x2a
 8007ce4:	d134      	bne.n	8007d50 <_vfiprintf_r+0x1b4>
 8007ce6:	9b07      	ldr	r3, [sp, #28]
 8007ce8:	3602      	adds	r6, #2
 8007cea:	1d1a      	adds	r2, r3, #4
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	9207      	str	r2, [sp, #28]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	da01      	bge.n	8007cf8 <_vfiprintf_r+0x15c>
 8007cf4:	2301      	movs	r3, #1
 8007cf6:	425b      	negs	r3, r3
 8007cf8:	9309      	str	r3, [sp, #36]	@ 0x24
 8007cfa:	4d32      	ldr	r5, [pc, #200]	@ (8007dc4 <_vfiprintf_r+0x228>)
 8007cfc:	2203      	movs	r2, #3
 8007cfe:	0028      	movs	r0, r5
 8007d00:	7831      	ldrb	r1, [r6, #0]
 8007d02:	f000 fb5d 	bl	80083c0 <memchr>
 8007d06:	2800      	cmp	r0, #0
 8007d08:	d006      	beq.n	8007d18 <_vfiprintf_r+0x17c>
 8007d0a:	2340      	movs	r3, #64	@ 0x40
 8007d0c:	1b40      	subs	r0, r0, r5
 8007d0e:	4083      	lsls	r3, r0
 8007d10:	6822      	ldr	r2, [r4, #0]
 8007d12:	3601      	adds	r6, #1
 8007d14:	4313      	orrs	r3, r2
 8007d16:	6023      	str	r3, [r4, #0]
 8007d18:	7831      	ldrb	r1, [r6, #0]
 8007d1a:	2206      	movs	r2, #6
 8007d1c:	482a      	ldr	r0, [pc, #168]	@ (8007dc8 <_vfiprintf_r+0x22c>)
 8007d1e:	1c75      	adds	r5, r6, #1
 8007d20:	7621      	strb	r1, [r4, #24]
 8007d22:	f000 fb4d 	bl	80083c0 <memchr>
 8007d26:	2800      	cmp	r0, #0
 8007d28:	d040      	beq.n	8007dac <_vfiprintf_r+0x210>
 8007d2a:	4b28      	ldr	r3, [pc, #160]	@ (8007dcc <_vfiprintf_r+0x230>)
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d122      	bne.n	8007d76 <_vfiprintf_r+0x1da>
 8007d30:	2207      	movs	r2, #7
 8007d32:	9b07      	ldr	r3, [sp, #28]
 8007d34:	3307      	adds	r3, #7
 8007d36:	4393      	bics	r3, r2
 8007d38:	3308      	adds	r3, #8
 8007d3a:	9307      	str	r3, [sp, #28]
 8007d3c:	6963      	ldr	r3, [r4, #20]
 8007d3e:	9a04      	ldr	r2, [sp, #16]
 8007d40:	189b      	adds	r3, r3, r2
 8007d42:	6163      	str	r3, [r4, #20]
 8007d44:	e762      	b.n	8007c0c <_vfiprintf_r+0x70>
 8007d46:	4343      	muls	r3, r0
 8007d48:	002e      	movs	r6, r5
 8007d4a:	2101      	movs	r1, #1
 8007d4c:	189b      	adds	r3, r3, r2
 8007d4e:	e7a4      	b.n	8007c9a <_vfiprintf_r+0xfe>
 8007d50:	2300      	movs	r3, #0
 8007d52:	200a      	movs	r0, #10
 8007d54:	0019      	movs	r1, r3
 8007d56:	3601      	adds	r6, #1
 8007d58:	6063      	str	r3, [r4, #4]
 8007d5a:	7832      	ldrb	r2, [r6, #0]
 8007d5c:	1c75      	adds	r5, r6, #1
 8007d5e:	3a30      	subs	r2, #48	@ 0x30
 8007d60:	2a09      	cmp	r2, #9
 8007d62:	d903      	bls.n	8007d6c <_vfiprintf_r+0x1d0>
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d0c8      	beq.n	8007cfa <_vfiprintf_r+0x15e>
 8007d68:	9109      	str	r1, [sp, #36]	@ 0x24
 8007d6a:	e7c6      	b.n	8007cfa <_vfiprintf_r+0x15e>
 8007d6c:	4341      	muls	r1, r0
 8007d6e:	002e      	movs	r6, r5
 8007d70:	2301      	movs	r3, #1
 8007d72:	1889      	adds	r1, r1, r2
 8007d74:	e7f1      	b.n	8007d5a <_vfiprintf_r+0x1be>
 8007d76:	aa07      	add	r2, sp, #28
 8007d78:	9200      	str	r2, [sp, #0]
 8007d7a:	0021      	movs	r1, r4
 8007d7c:	003a      	movs	r2, r7
 8007d7e:	4b14      	ldr	r3, [pc, #80]	@ (8007dd0 <_vfiprintf_r+0x234>)
 8007d80:	9803      	ldr	r0, [sp, #12]
 8007d82:	e000      	b.n	8007d86 <_vfiprintf_r+0x1ea>
 8007d84:	bf00      	nop
 8007d86:	9004      	str	r0, [sp, #16]
 8007d88:	9b04      	ldr	r3, [sp, #16]
 8007d8a:	3301      	adds	r3, #1
 8007d8c:	d1d6      	bne.n	8007d3c <_vfiprintf_r+0x1a0>
 8007d8e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007d90:	07db      	lsls	r3, r3, #31
 8007d92:	d405      	bmi.n	8007da0 <_vfiprintf_r+0x204>
 8007d94:	89bb      	ldrh	r3, [r7, #12]
 8007d96:	059b      	lsls	r3, r3, #22
 8007d98:	d402      	bmi.n	8007da0 <_vfiprintf_r+0x204>
 8007d9a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8007d9c:	f7ff fc72 	bl	8007684 <__retarget_lock_release_recursive>
 8007da0:	89bb      	ldrh	r3, [r7, #12]
 8007da2:	065b      	lsls	r3, r3, #25
 8007da4:	d500      	bpl.n	8007da8 <_vfiprintf_r+0x20c>
 8007da6:	e71e      	b.n	8007be6 <_vfiprintf_r+0x4a>
 8007da8:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8007daa:	e71e      	b.n	8007bea <_vfiprintf_r+0x4e>
 8007dac:	aa07      	add	r2, sp, #28
 8007dae:	9200      	str	r2, [sp, #0]
 8007db0:	0021      	movs	r1, r4
 8007db2:	003a      	movs	r2, r7
 8007db4:	4b06      	ldr	r3, [pc, #24]	@ (8007dd0 <_vfiprintf_r+0x234>)
 8007db6:	9803      	ldr	r0, [sp, #12]
 8007db8:	f000 f87c 	bl	8007eb4 <_printf_i>
 8007dbc:	e7e3      	b.n	8007d86 <_vfiprintf_r+0x1ea>
 8007dbe:	46c0      	nop			@ (mov r8, r8)
 8007dc0:	08008eb1 	.word	0x08008eb1
 8007dc4:	08008eb7 	.word	0x08008eb7
 8007dc8:	08008ebb 	.word	0x08008ebb
 8007dcc:	00000000 	.word	0x00000000
 8007dd0:	08007b77 	.word	0x08007b77

08007dd4 <_printf_common>:
 8007dd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007dd6:	0016      	movs	r6, r2
 8007dd8:	9301      	str	r3, [sp, #4]
 8007dda:	688a      	ldr	r2, [r1, #8]
 8007ddc:	690b      	ldr	r3, [r1, #16]
 8007dde:	000c      	movs	r4, r1
 8007de0:	9000      	str	r0, [sp, #0]
 8007de2:	4293      	cmp	r3, r2
 8007de4:	da00      	bge.n	8007de8 <_printf_common+0x14>
 8007de6:	0013      	movs	r3, r2
 8007de8:	0022      	movs	r2, r4
 8007dea:	6033      	str	r3, [r6, #0]
 8007dec:	3243      	adds	r2, #67	@ 0x43
 8007dee:	7812      	ldrb	r2, [r2, #0]
 8007df0:	2a00      	cmp	r2, #0
 8007df2:	d001      	beq.n	8007df8 <_printf_common+0x24>
 8007df4:	3301      	adds	r3, #1
 8007df6:	6033      	str	r3, [r6, #0]
 8007df8:	6823      	ldr	r3, [r4, #0]
 8007dfa:	069b      	lsls	r3, r3, #26
 8007dfc:	d502      	bpl.n	8007e04 <_printf_common+0x30>
 8007dfe:	6833      	ldr	r3, [r6, #0]
 8007e00:	3302      	adds	r3, #2
 8007e02:	6033      	str	r3, [r6, #0]
 8007e04:	6822      	ldr	r2, [r4, #0]
 8007e06:	2306      	movs	r3, #6
 8007e08:	0015      	movs	r5, r2
 8007e0a:	401d      	ands	r5, r3
 8007e0c:	421a      	tst	r2, r3
 8007e0e:	d027      	beq.n	8007e60 <_printf_common+0x8c>
 8007e10:	0023      	movs	r3, r4
 8007e12:	3343      	adds	r3, #67	@ 0x43
 8007e14:	781b      	ldrb	r3, [r3, #0]
 8007e16:	1e5a      	subs	r2, r3, #1
 8007e18:	4193      	sbcs	r3, r2
 8007e1a:	6822      	ldr	r2, [r4, #0]
 8007e1c:	0692      	lsls	r2, r2, #26
 8007e1e:	d430      	bmi.n	8007e82 <_printf_common+0xae>
 8007e20:	0022      	movs	r2, r4
 8007e22:	9901      	ldr	r1, [sp, #4]
 8007e24:	9800      	ldr	r0, [sp, #0]
 8007e26:	9d08      	ldr	r5, [sp, #32]
 8007e28:	3243      	adds	r2, #67	@ 0x43
 8007e2a:	47a8      	blx	r5
 8007e2c:	3001      	adds	r0, #1
 8007e2e:	d025      	beq.n	8007e7c <_printf_common+0xa8>
 8007e30:	2206      	movs	r2, #6
 8007e32:	6823      	ldr	r3, [r4, #0]
 8007e34:	2500      	movs	r5, #0
 8007e36:	4013      	ands	r3, r2
 8007e38:	2b04      	cmp	r3, #4
 8007e3a:	d105      	bne.n	8007e48 <_printf_common+0x74>
 8007e3c:	6833      	ldr	r3, [r6, #0]
 8007e3e:	68e5      	ldr	r5, [r4, #12]
 8007e40:	1aed      	subs	r5, r5, r3
 8007e42:	43eb      	mvns	r3, r5
 8007e44:	17db      	asrs	r3, r3, #31
 8007e46:	401d      	ands	r5, r3
 8007e48:	68a3      	ldr	r3, [r4, #8]
 8007e4a:	6922      	ldr	r2, [r4, #16]
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	dd01      	ble.n	8007e54 <_printf_common+0x80>
 8007e50:	1a9b      	subs	r3, r3, r2
 8007e52:	18ed      	adds	r5, r5, r3
 8007e54:	2600      	movs	r6, #0
 8007e56:	42b5      	cmp	r5, r6
 8007e58:	d120      	bne.n	8007e9c <_printf_common+0xc8>
 8007e5a:	2000      	movs	r0, #0
 8007e5c:	e010      	b.n	8007e80 <_printf_common+0xac>
 8007e5e:	3501      	adds	r5, #1
 8007e60:	68e3      	ldr	r3, [r4, #12]
 8007e62:	6832      	ldr	r2, [r6, #0]
 8007e64:	1a9b      	subs	r3, r3, r2
 8007e66:	42ab      	cmp	r3, r5
 8007e68:	ddd2      	ble.n	8007e10 <_printf_common+0x3c>
 8007e6a:	0022      	movs	r2, r4
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	9901      	ldr	r1, [sp, #4]
 8007e70:	9800      	ldr	r0, [sp, #0]
 8007e72:	9f08      	ldr	r7, [sp, #32]
 8007e74:	3219      	adds	r2, #25
 8007e76:	47b8      	blx	r7
 8007e78:	3001      	adds	r0, #1
 8007e7a:	d1f0      	bne.n	8007e5e <_printf_common+0x8a>
 8007e7c:	2001      	movs	r0, #1
 8007e7e:	4240      	negs	r0, r0
 8007e80:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007e82:	2030      	movs	r0, #48	@ 0x30
 8007e84:	18e1      	adds	r1, r4, r3
 8007e86:	3143      	adds	r1, #67	@ 0x43
 8007e88:	7008      	strb	r0, [r1, #0]
 8007e8a:	0021      	movs	r1, r4
 8007e8c:	1c5a      	adds	r2, r3, #1
 8007e8e:	3145      	adds	r1, #69	@ 0x45
 8007e90:	7809      	ldrb	r1, [r1, #0]
 8007e92:	18a2      	adds	r2, r4, r2
 8007e94:	3243      	adds	r2, #67	@ 0x43
 8007e96:	3302      	adds	r3, #2
 8007e98:	7011      	strb	r1, [r2, #0]
 8007e9a:	e7c1      	b.n	8007e20 <_printf_common+0x4c>
 8007e9c:	0022      	movs	r2, r4
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	9901      	ldr	r1, [sp, #4]
 8007ea2:	9800      	ldr	r0, [sp, #0]
 8007ea4:	9f08      	ldr	r7, [sp, #32]
 8007ea6:	321a      	adds	r2, #26
 8007ea8:	47b8      	blx	r7
 8007eaa:	3001      	adds	r0, #1
 8007eac:	d0e6      	beq.n	8007e7c <_printf_common+0xa8>
 8007eae:	3601      	adds	r6, #1
 8007eb0:	e7d1      	b.n	8007e56 <_printf_common+0x82>
	...

08007eb4 <_printf_i>:
 8007eb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007eb6:	b08b      	sub	sp, #44	@ 0x2c
 8007eb8:	9206      	str	r2, [sp, #24]
 8007eba:	000a      	movs	r2, r1
 8007ebc:	3243      	adds	r2, #67	@ 0x43
 8007ebe:	9307      	str	r3, [sp, #28]
 8007ec0:	9005      	str	r0, [sp, #20]
 8007ec2:	9203      	str	r2, [sp, #12]
 8007ec4:	7e0a      	ldrb	r2, [r1, #24]
 8007ec6:	000c      	movs	r4, r1
 8007ec8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007eca:	2a78      	cmp	r2, #120	@ 0x78
 8007ecc:	d809      	bhi.n	8007ee2 <_printf_i+0x2e>
 8007ece:	2a62      	cmp	r2, #98	@ 0x62
 8007ed0:	d80b      	bhi.n	8007eea <_printf_i+0x36>
 8007ed2:	2a00      	cmp	r2, #0
 8007ed4:	d100      	bne.n	8007ed8 <_printf_i+0x24>
 8007ed6:	e0bc      	b.n	8008052 <_printf_i+0x19e>
 8007ed8:	497b      	ldr	r1, [pc, #492]	@ (80080c8 <_printf_i+0x214>)
 8007eda:	9104      	str	r1, [sp, #16]
 8007edc:	2a58      	cmp	r2, #88	@ 0x58
 8007ede:	d100      	bne.n	8007ee2 <_printf_i+0x2e>
 8007ee0:	e090      	b.n	8008004 <_printf_i+0x150>
 8007ee2:	0025      	movs	r5, r4
 8007ee4:	3542      	adds	r5, #66	@ 0x42
 8007ee6:	702a      	strb	r2, [r5, #0]
 8007ee8:	e022      	b.n	8007f30 <_printf_i+0x7c>
 8007eea:	0010      	movs	r0, r2
 8007eec:	3863      	subs	r0, #99	@ 0x63
 8007eee:	2815      	cmp	r0, #21
 8007ef0:	d8f7      	bhi.n	8007ee2 <_printf_i+0x2e>
 8007ef2:	f7f8 f911 	bl	8000118 <__gnu_thumb1_case_shi>
 8007ef6:	0016      	.short	0x0016
 8007ef8:	fff6001f 	.word	0xfff6001f
 8007efc:	fff6fff6 	.word	0xfff6fff6
 8007f00:	001ffff6 	.word	0x001ffff6
 8007f04:	fff6fff6 	.word	0xfff6fff6
 8007f08:	fff6fff6 	.word	0xfff6fff6
 8007f0c:	003600a1 	.word	0x003600a1
 8007f10:	fff60080 	.word	0xfff60080
 8007f14:	00b2fff6 	.word	0x00b2fff6
 8007f18:	0036fff6 	.word	0x0036fff6
 8007f1c:	fff6fff6 	.word	0xfff6fff6
 8007f20:	0084      	.short	0x0084
 8007f22:	0025      	movs	r5, r4
 8007f24:	681a      	ldr	r2, [r3, #0]
 8007f26:	3542      	adds	r5, #66	@ 0x42
 8007f28:	1d11      	adds	r1, r2, #4
 8007f2a:	6019      	str	r1, [r3, #0]
 8007f2c:	6813      	ldr	r3, [r2, #0]
 8007f2e:	702b      	strb	r3, [r5, #0]
 8007f30:	2301      	movs	r3, #1
 8007f32:	e0a0      	b.n	8008076 <_printf_i+0x1c2>
 8007f34:	6818      	ldr	r0, [r3, #0]
 8007f36:	6809      	ldr	r1, [r1, #0]
 8007f38:	1d02      	adds	r2, r0, #4
 8007f3a:	060d      	lsls	r5, r1, #24
 8007f3c:	d50b      	bpl.n	8007f56 <_printf_i+0xa2>
 8007f3e:	6806      	ldr	r6, [r0, #0]
 8007f40:	601a      	str	r2, [r3, #0]
 8007f42:	2e00      	cmp	r6, #0
 8007f44:	da03      	bge.n	8007f4e <_printf_i+0x9a>
 8007f46:	232d      	movs	r3, #45	@ 0x2d
 8007f48:	9a03      	ldr	r2, [sp, #12]
 8007f4a:	4276      	negs	r6, r6
 8007f4c:	7013      	strb	r3, [r2, #0]
 8007f4e:	4b5e      	ldr	r3, [pc, #376]	@ (80080c8 <_printf_i+0x214>)
 8007f50:	270a      	movs	r7, #10
 8007f52:	9304      	str	r3, [sp, #16]
 8007f54:	e018      	b.n	8007f88 <_printf_i+0xd4>
 8007f56:	6806      	ldr	r6, [r0, #0]
 8007f58:	601a      	str	r2, [r3, #0]
 8007f5a:	0649      	lsls	r1, r1, #25
 8007f5c:	d5f1      	bpl.n	8007f42 <_printf_i+0x8e>
 8007f5e:	b236      	sxth	r6, r6
 8007f60:	e7ef      	b.n	8007f42 <_printf_i+0x8e>
 8007f62:	6808      	ldr	r0, [r1, #0]
 8007f64:	6819      	ldr	r1, [r3, #0]
 8007f66:	c940      	ldmia	r1!, {r6}
 8007f68:	0605      	lsls	r5, r0, #24
 8007f6a:	d402      	bmi.n	8007f72 <_printf_i+0xbe>
 8007f6c:	0640      	lsls	r0, r0, #25
 8007f6e:	d500      	bpl.n	8007f72 <_printf_i+0xbe>
 8007f70:	b2b6      	uxth	r6, r6
 8007f72:	6019      	str	r1, [r3, #0]
 8007f74:	4b54      	ldr	r3, [pc, #336]	@ (80080c8 <_printf_i+0x214>)
 8007f76:	270a      	movs	r7, #10
 8007f78:	9304      	str	r3, [sp, #16]
 8007f7a:	2a6f      	cmp	r2, #111	@ 0x6f
 8007f7c:	d100      	bne.n	8007f80 <_printf_i+0xcc>
 8007f7e:	3f02      	subs	r7, #2
 8007f80:	0023      	movs	r3, r4
 8007f82:	2200      	movs	r2, #0
 8007f84:	3343      	adds	r3, #67	@ 0x43
 8007f86:	701a      	strb	r2, [r3, #0]
 8007f88:	6863      	ldr	r3, [r4, #4]
 8007f8a:	60a3      	str	r3, [r4, #8]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	db03      	blt.n	8007f98 <_printf_i+0xe4>
 8007f90:	2104      	movs	r1, #4
 8007f92:	6822      	ldr	r2, [r4, #0]
 8007f94:	438a      	bics	r2, r1
 8007f96:	6022      	str	r2, [r4, #0]
 8007f98:	2e00      	cmp	r6, #0
 8007f9a:	d102      	bne.n	8007fa2 <_printf_i+0xee>
 8007f9c:	9d03      	ldr	r5, [sp, #12]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d00c      	beq.n	8007fbc <_printf_i+0x108>
 8007fa2:	9d03      	ldr	r5, [sp, #12]
 8007fa4:	0030      	movs	r0, r6
 8007fa6:	0039      	movs	r1, r7
 8007fa8:	f7f8 f946 	bl	8000238 <__aeabi_uidivmod>
 8007fac:	9b04      	ldr	r3, [sp, #16]
 8007fae:	3d01      	subs	r5, #1
 8007fb0:	5c5b      	ldrb	r3, [r3, r1]
 8007fb2:	702b      	strb	r3, [r5, #0]
 8007fb4:	0033      	movs	r3, r6
 8007fb6:	0006      	movs	r6, r0
 8007fb8:	429f      	cmp	r7, r3
 8007fba:	d9f3      	bls.n	8007fa4 <_printf_i+0xf0>
 8007fbc:	2f08      	cmp	r7, #8
 8007fbe:	d109      	bne.n	8007fd4 <_printf_i+0x120>
 8007fc0:	6823      	ldr	r3, [r4, #0]
 8007fc2:	07db      	lsls	r3, r3, #31
 8007fc4:	d506      	bpl.n	8007fd4 <_printf_i+0x120>
 8007fc6:	6862      	ldr	r2, [r4, #4]
 8007fc8:	6923      	ldr	r3, [r4, #16]
 8007fca:	429a      	cmp	r2, r3
 8007fcc:	dc02      	bgt.n	8007fd4 <_printf_i+0x120>
 8007fce:	2330      	movs	r3, #48	@ 0x30
 8007fd0:	3d01      	subs	r5, #1
 8007fd2:	702b      	strb	r3, [r5, #0]
 8007fd4:	9b03      	ldr	r3, [sp, #12]
 8007fd6:	1b5b      	subs	r3, r3, r5
 8007fd8:	6123      	str	r3, [r4, #16]
 8007fda:	9b07      	ldr	r3, [sp, #28]
 8007fdc:	0021      	movs	r1, r4
 8007fde:	9300      	str	r3, [sp, #0]
 8007fe0:	9805      	ldr	r0, [sp, #20]
 8007fe2:	9b06      	ldr	r3, [sp, #24]
 8007fe4:	aa09      	add	r2, sp, #36	@ 0x24
 8007fe6:	f7ff fef5 	bl	8007dd4 <_printf_common>
 8007fea:	3001      	adds	r0, #1
 8007fec:	d148      	bne.n	8008080 <_printf_i+0x1cc>
 8007fee:	2001      	movs	r0, #1
 8007ff0:	4240      	negs	r0, r0
 8007ff2:	b00b      	add	sp, #44	@ 0x2c
 8007ff4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ff6:	2220      	movs	r2, #32
 8007ff8:	6809      	ldr	r1, [r1, #0]
 8007ffa:	430a      	orrs	r2, r1
 8007ffc:	6022      	str	r2, [r4, #0]
 8007ffe:	2278      	movs	r2, #120	@ 0x78
 8008000:	4932      	ldr	r1, [pc, #200]	@ (80080cc <_printf_i+0x218>)
 8008002:	9104      	str	r1, [sp, #16]
 8008004:	0021      	movs	r1, r4
 8008006:	3145      	adds	r1, #69	@ 0x45
 8008008:	700a      	strb	r2, [r1, #0]
 800800a:	6819      	ldr	r1, [r3, #0]
 800800c:	6822      	ldr	r2, [r4, #0]
 800800e:	c940      	ldmia	r1!, {r6}
 8008010:	0610      	lsls	r0, r2, #24
 8008012:	d402      	bmi.n	800801a <_printf_i+0x166>
 8008014:	0650      	lsls	r0, r2, #25
 8008016:	d500      	bpl.n	800801a <_printf_i+0x166>
 8008018:	b2b6      	uxth	r6, r6
 800801a:	6019      	str	r1, [r3, #0]
 800801c:	07d3      	lsls	r3, r2, #31
 800801e:	d502      	bpl.n	8008026 <_printf_i+0x172>
 8008020:	2320      	movs	r3, #32
 8008022:	4313      	orrs	r3, r2
 8008024:	6023      	str	r3, [r4, #0]
 8008026:	2e00      	cmp	r6, #0
 8008028:	d001      	beq.n	800802e <_printf_i+0x17a>
 800802a:	2710      	movs	r7, #16
 800802c:	e7a8      	b.n	8007f80 <_printf_i+0xcc>
 800802e:	2220      	movs	r2, #32
 8008030:	6823      	ldr	r3, [r4, #0]
 8008032:	4393      	bics	r3, r2
 8008034:	6023      	str	r3, [r4, #0]
 8008036:	e7f8      	b.n	800802a <_printf_i+0x176>
 8008038:	681a      	ldr	r2, [r3, #0]
 800803a:	680d      	ldr	r5, [r1, #0]
 800803c:	1d10      	adds	r0, r2, #4
 800803e:	6949      	ldr	r1, [r1, #20]
 8008040:	6018      	str	r0, [r3, #0]
 8008042:	6813      	ldr	r3, [r2, #0]
 8008044:	062e      	lsls	r6, r5, #24
 8008046:	d501      	bpl.n	800804c <_printf_i+0x198>
 8008048:	6019      	str	r1, [r3, #0]
 800804a:	e002      	b.n	8008052 <_printf_i+0x19e>
 800804c:	066d      	lsls	r5, r5, #25
 800804e:	d5fb      	bpl.n	8008048 <_printf_i+0x194>
 8008050:	8019      	strh	r1, [r3, #0]
 8008052:	2300      	movs	r3, #0
 8008054:	9d03      	ldr	r5, [sp, #12]
 8008056:	6123      	str	r3, [r4, #16]
 8008058:	e7bf      	b.n	8007fda <_printf_i+0x126>
 800805a:	681a      	ldr	r2, [r3, #0]
 800805c:	1d11      	adds	r1, r2, #4
 800805e:	6019      	str	r1, [r3, #0]
 8008060:	6815      	ldr	r5, [r2, #0]
 8008062:	2100      	movs	r1, #0
 8008064:	0028      	movs	r0, r5
 8008066:	6862      	ldr	r2, [r4, #4]
 8008068:	f000 f9aa 	bl	80083c0 <memchr>
 800806c:	2800      	cmp	r0, #0
 800806e:	d001      	beq.n	8008074 <_printf_i+0x1c0>
 8008070:	1b40      	subs	r0, r0, r5
 8008072:	6060      	str	r0, [r4, #4]
 8008074:	6863      	ldr	r3, [r4, #4]
 8008076:	6123      	str	r3, [r4, #16]
 8008078:	2300      	movs	r3, #0
 800807a:	9a03      	ldr	r2, [sp, #12]
 800807c:	7013      	strb	r3, [r2, #0]
 800807e:	e7ac      	b.n	8007fda <_printf_i+0x126>
 8008080:	002a      	movs	r2, r5
 8008082:	6923      	ldr	r3, [r4, #16]
 8008084:	9906      	ldr	r1, [sp, #24]
 8008086:	9805      	ldr	r0, [sp, #20]
 8008088:	9d07      	ldr	r5, [sp, #28]
 800808a:	47a8      	blx	r5
 800808c:	3001      	adds	r0, #1
 800808e:	d0ae      	beq.n	8007fee <_printf_i+0x13a>
 8008090:	6823      	ldr	r3, [r4, #0]
 8008092:	079b      	lsls	r3, r3, #30
 8008094:	d415      	bmi.n	80080c2 <_printf_i+0x20e>
 8008096:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008098:	68e0      	ldr	r0, [r4, #12]
 800809a:	4298      	cmp	r0, r3
 800809c:	daa9      	bge.n	8007ff2 <_printf_i+0x13e>
 800809e:	0018      	movs	r0, r3
 80080a0:	e7a7      	b.n	8007ff2 <_printf_i+0x13e>
 80080a2:	0022      	movs	r2, r4
 80080a4:	2301      	movs	r3, #1
 80080a6:	9906      	ldr	r1, [sp, #24]
 80080a8:	9805      	ldr	r0, [sp, #20]
 80080aa:	9e07      	ldr	r6, [sp, #28]
 80080ac:	3219      	adds	r2, #25
 80080ae:	47b0      	blx	r6
 80080b0:	3001      	adds	r0, #1
 80080b2:	d09c      	beq.n	8007fee <_printf_i+0x13a>
 80080b4:	3501      	adds	r5, #1
 80080b6:	68e3      	ldr	r3, [r4, #12]
 80080b8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80080ba:	1a9b      	subs	r3, r3, r2
 80080bc:	42ab      	cmp	r3, r5
 80080be:	dcf0      	bgt.n	80080a2 <_printf_i+0x1ee>
 80080c0:	e7e9      	b.n	8008096 <_printf_i+0x1e2>
 80080c2:	2500      	movs	r5, #0
 80080c4:	e7f7      	b.n	80080b6 <_printf_i+0x202>
 80080c6:	46c0      	nop			@ (mov r8, r8)
 80080c8:	08008ec2 	.word	0x08008ec2
 80080cc:	08008ed3 	.word	0x08008ed3

080080d0 <__sflush_r>:
 80080d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80080d2:	220c      	movs	r2, #12
 80080d4:	5e8b      	ldrsh	r3, [r1, r2]
 80080d6:	0005      	movs	r5, r0
 80080d8:	000c      	movs	r4, r1
 80080da:	071a      	lsls	r2, r3, #28
 80080dc:	d456      	bmi.n	800818c <__sflush_r+0xbc>
 80080de:	684a      	ldr	r2, [r1, #4]
 80080e0:	2a00      	cmp	r2, #0
 80080e2:	dc02      	bgt.n	80080ea <__sflush_r+0x1a>
 80080e4:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 80080e6:	2a00      	cmp	r2, #0
 80080e8:	dd4e      	ble.n	8008188 <__sflush_r+0xb8>
 80080ea:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80080ec:	2f00      	cmp	r7, #0
 80080ee:	d04b      	beq.n	8008188 <__sflush_r+0xb8>
 80080f0:	2200      	movs	r2, #0
 80080f2:	2080      	movs	r0, #128	@ 0x80
 80080f4:	682e      	ldr	r6, [r5, #0]
 80080f6:	602a      	str	r2, [r5, #0]
 80080f8:	001a      	movs	r2, r3
 80080fa:	0140      	lsls	r0, r0, #5
 80080fc:	6a21      	ldr	r1, [r4, #32]
 80080fe:	4002      	ands	r2, r0
 8008100:	4203      	tst	r3, r0
 8008102:	d033      	beq.n	800816c <__sflush_r+0x9c>
 8008104:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008106:	89a3      	ldrh	r3, [r4, #12]
 8008108:	075b      	lsls	r3, r3, #29
 800810a:	d506      	bpl.n	800811a <__sflush_r+0x4a>
 800810c:	6863      	ldr	r3, [r4, #4]
 800810e:	1ad2      	subs	r2, r2, r3
 8008110:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008112:	2b00      	cmp	r3, #0
 8008114:	d001      	beq.n	800811a <__sflush_r+0x4a>
 8008116:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008118:	1ad2      	subs	r2, r2, r3
 800811a:	2300      	movs	r3, #0
 800811c:	0028      	movs	r0, r5
 800811e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8008120:	6a21      	ldr	r1, [r4, #32]
 8008122:	47b8      	blx	r7
 8008124:	89a2      	ldrh	r2, [r4, #12]
 8008126:	1c43      	adds	r3, r0, #1
 8008128:	d106      	bne.n	8008138 <__sflush_r+0x68>
 800812a:	6829      	ldr	r1, [r5, #0]
 800812c:	291d      	cmp	r1, #29
 800812e:	d846      	bhi.n	80081be <__sflush_r+0xee>
 8008130:	4b29      	ldr	r3, [pc, #164]	@ (80081d8 <__sflush_r+0x108>)
 8008132:	410b      	asrs	r3, r1
 8008134:	07db      	lsls	r3, r3, #31
 8008136:	d442      	bmi.n	80081be <__sflush_r+0xee>
 8008138:	2300      	movs	r3, #0
 800813a:	6063      	str	r3, [r4, #4]
 800813c:	6923      	ldr	r3, [r4, #16]
 800813e:	6023      	str	r3, [r4, #0]
 8008140:	04d2      	lsls	r2, r2, #19
 8008142:	d505      	bpl.n	8008150 <__sflush_r+0x80>
 8008144:	1c43      	adds	r3, r0, #1
 8008146:	d102      	bne.n	800814e <__sflush_r+0x7e>
 8008148:	682b      	ldr	r3, [r5, #0]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d100      	bne.n	8008150 <__sflush_r+0x80>
 800814e:	6560      	str	r0, [r4, #84]	@ 0x54
 8008150:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008152:	602e      	str	r6, [r5, #0]
 8008154:	2900      	cmp	r1, #0
 8008156:	d017      	beq.n	8008188 <__sflush_r+0xb8>
 8008158:	0023      	movs	r3, r4
 800815a:	3344      	adds	r3, #68	@ 0x44
 800815c:	4299      	cmp	r1, r3
 800815e:	d002      	beq.n	8008166 <__sflush_r+0x96>
 8008160:	0028      	movs	r0, r5
 8008162:	f7ff fa99 	bl	8007698 <_free_r>
 8008166:	2300      	movs	r3, #0
 8008168:	6363      	str	r3, [r4, #52]	@ 0x34
 800816a:	e00d      	b.n	8008188 <__sflush_r+0xb8>
 800816c:	2301      	movs	r3, #1
 800816e:	0028      	movs	r0, r5
 8008170:	47b8      	blx	r7
 8008172:	0002      	movs	r2, r0
 8008174:	1c43      	adds	r3, r0, #1
 8008176:	d1c6      	bne.n	8008106 <__sflush_r+0x36>
 8008178:	682b      	ldr	r3, [r5, #0]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d0c3      	beq.n	8008106 <__sflush_r+0x36>
 800817e:	2b1d      	cmp	r3, #29
 8008180:	d001      	beq.n	8008186 <__sflush_r+0xb6>
 8008182:	2b16      	cmp	r3, #22
 8008184:	d11a      	bne.n	80081bc <__sflush_r+0xec>
 8008186:	602e      	str	r6, [r5, #0]
 8008188:	2000      	movs	r0, #0
 800818a:	e01e      	b.n	80081ca <__sflush_r+0xfa>
 800818c:	690e      	ldr	r6, [r1, #16]
 800818e:	2e00      	cmp	r6, #0
 8008190:	d0fa      	beq.n	8008188 <__sflush_r+0xb8>
 8008192:	680f      	ldr	r7, [r1, #0]
 8008194:	600e      	str	r6, [r1, #0]
 8008196:	1bba      	subs	r2, r7, r6
 8008198:	9201      	str	r2, [sp, #4]
 800819a:	2200      	movs	r2, #0
 800819c:	079b      	lsls	r3, r3, #30
 800819e:	d100      	bne.n	80081a2 <__sflush_r+0xd2>
 80081a0:	694a      	ldr	r2, [r1, #20]
 80081a2:	60a2      	str	r2, [r4, #8]
 80081a4:	9b01      	ldr	r3, [sp, #4]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	ddee      	ble.n	8008188 <__sflush_r+0xb8>
 80081aa:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80081ac:	0032      	movs	r2, r6
 80081ae:	001f      	movs	r7, r3
 80081b0:	0028      	movs	r0, r5
 80081b2:	9b01      	ldr	r3, [sp, #4]
 80081b4:	6a21      	ldr	r1, [r4, #32]
 80081b6:	47b8      	blx	r7
 80081b8:	2800      	cmp	r0, #0
 80081ba:	dc07      	bgt.n	80081cc <__sflush_r+0xfc>
 80081bc:	89a2      	ldrh	r2, [r4, #12]
 80081be:	2340      	movs	r3, #64	@ 0x40
 80081c0:	2001      	movs	r0, #1
 80081c2:	4313      	orrs	r3, r2
 80081c4:	b21b      	sxth	r3, r3
 80081c6:	81a3      	strh	r3, [r4, #12]
 80081c8:	4240      	negs	r0, r0
 80081ca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80081cc:	9b01      	ldr	r3, [sp, #4]
 80081ce:	1836      	adds	r6, r6, r0
 80081d0:	1a1b      	subs	r3, r3, r0
 80081d2:	9301      	str	r3, [sp, #4]
 80081d4:	e7e6      	b.n	80081a4 <__sflush_r+0xd4>
 80081d6:	46c0      	nop			@ (mov r8, r8)
 80081d8:	dfbffffe 	.word	0xdfbffffe

080081dc <_fflush_r>:
 80081dc:	690b      	ldr	r3, [r1, #16]
 80081de:	b570      	push	{r4, r5, r6, lr}
 80081e0:	0005      	movs	r5, r0
 80081e2:	000c      	movs	r4, r1
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d102      	bne.n	80081ee <_fflush_r+0x12>
 80081e8:	2500      	movs	r5, #0
 80081ea:	0028      	movs	r0, r5
 80081ec:	bd70      	pop	{r4, r5, r6, pc}
 80081ee:	2800      	cmp	r0, #0
 80081f0:	d004      	beq.n	80081fc <_fflush_r+0x20>
 80081f2:	6a03      	ldr	r3, [r0, #32]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d101      	bne.n	80081fc <_fflush_r+0x20>
 80081f8:	f7ff f912 	bl	8007420 <__sinit>
 80081fc:	220c      	movs	r2, #12
 80081fe:	5ea3      	ldrsh	r3, [r4, r2]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d0f1      	beq.n	80081e8 <_fflush_r+0xc>
 8008204:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008206:	07d2      	lsls	r2, r2, #31
 8008208:	d404      	bmi.n	8008214 <_fflush_r+0x38>
 800820a:	059b      	lsls	r3, r3, #22
 800820c:	d402      	bmi.n	8008214 <_fflush_r+0x38>
 800820e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008210:	f7ff fa37 	bl	8007682 <__retarget_lock_acquire_recursive>
 8008214:	0028      	movs	r0, r5
 8008216:	0021      	movs	r1, r4
 8008218:	f7ff ff5a 	bl	80080d0 <__sflush_r>
 800821c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800821e:	0005      	movs	r5, r0
 8008220:	07db      	lsls	r3, r3, #31
 8008222:	d4e2      	bmi.n	80081ea <_fflush_r+0xe>
 8008224:	89a3      	ldrh	r3, [r4, #12]
 8008226:	059b      	lsls	r3, r3, #22
 8008228:	d4df      	bmi.n	80081ea <_fflush_r+0xe>
 800822a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800822c:	f7ff fa2a 	bl	8007684 <__retarget_lock_release_recursive>
 8008230:	e7db      	b.n	80081ea <_fflush_r+0xe>

08008232 <__swbuf_r>:
 8008232:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008234:	0006      	movs	r6, r0
 8008236:	000d      	movs	r5, r1
 8008238:	0014      	movs	r4, r2
 800823a:	2800      	cmp	r0, #0
 800823c:	d004      	beq.n	8008248 <__swbuf_r+0x16>
 800823e:	6a03      	ldr	r3, [r0, #32]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d101      	bne.n	8008248 <__swbuf_r+0x16>
 8008244:	f7ff f8ec 	bl	8007420 <__sinit>
 8008248:	69a3      	ldr	r3, [r4, #24]
 800824a:	60a3      	str	r3, [r4, #8]
 800824c:	89a3      	ldrh	r3, [r4, #12]
 800824e:	071b      	lsls	r3, r3, #28
 8008250:	d502      	bpl.n	8008258 <__swbuf_r+0x26>
 8008252:	6923      	ldr	r3, [r4, #16]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d109      	bne.n	800826c <__swbuf_r+0x3a>
 8008258:	0021      	movs	r1, r4
 800825a:	0030      	movs	r0, r6
 800825c:	f000 f82c 	bl	80082b8 <__swsetup_r>
 8008260:	2800      	cmp	r0, #0
 8008262:	d003      	beq.n	800826c <__swbuf_r+0x3a>
 8008264:	2501      	movs	r5, #1
 8008266:	426d      	negs	r5, r5
 8008268:	0028      	movs	r0, r5
 800826a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800826c:	6923      	ldr	r3, [r4, #16]
 800826e:	6820      	ldr	r0, [r4, #0]
 8008270:	b2ef      	uxtb	r7, r5
 8008272:	1ac0      	subs	r0, r0, r3
 8008274:	6963      	ldr	r3, [r4, #20]
 8008276:	b2ed      	uxtb	r5, r5
 8008278:	4283      	cmp	r3, r0
 800827a:	dc05      	bgt.n	8008288 <__swbuf_r+0x56>
 800827c:	0021      	movs	r1, r4
 800827e:	0030      	movs	r0, r6
 8008280:	f7ff ffac 	bl	80081dc <_fflush_r>
 8008284:	2800      	cmp	r0, #0
 8008286:	d1ed      	bne.n	8008264 <__swbuf_r+0x32>
 8008288:	68a3      	ldr	r3, [r4, #8]
 800828a:	3001      	adds	r0, #1
 800828c:	3b01      	subs	r3, #1
 800828e:	60a3      	str	r3, [r4, #8]
 8008290:	6823      	ldr	r3, [r4, #0]
 8008292:	1c5a      	adds	r2, r3, #1
 8008294:	6022      	str	r2, [r4, #0]
 8008296:	701f      	strb	r7, [r3, #0]
 8008298:	6963      	ldr	r3, [r4, #20]
 800829a:	4283      	cmp	r3, r0
 800829c:	d004      	beq.n	80082a8 <__swbuf_r+0x76>
 800829e:	89a3      	ldrh	r3, [r4, #12]
 80082a0:	07db      	lsls	r3, r3, #31
 80082a2:	d5e1      	bpl.n	8008268 <__swbuf_r+0x36>
 80082a4:	2d0a      	cmp	r5, #10
 80082a6:	d1df      	bne.n	8008268 <__swbuf_r+0x36>
 80082a8:	0021      	movs	r1, r4
 80082aa:	0030      	movs	r0, r6
 80082ac:	f7ff ff96 	bl	80081dc <_fflush_r>
 80082b0:	2800      	cmp	r0, #0
 80082b2:	d0d9      	beq.n	8008268 <__swbuf_r+0x36>
 80082b4:	e7d6      	b.n	8008264 <__swbuf_r+0x32>
	...

080082b8 <__swsetup_r>:
 80082b8:	4b2d      	ldr	r3, [pc, #180]	@ (8008370 <__swsetup_r+0xb8>)
 80082ba:	b570      	push	{r4, r5, r6, lr}
 80082bc:	0005      	movs	r5, r0
 80082be:	6818      	ldr	r0, [r3, #0]
 80082c0:	000c      	movs	r4, r1
 80082c2:	2800      	cmp	r0, #0
 80082c4:	d004      	beq.n	80082d0 <__swsetup_r+0x18>
 80082c6:	6a03      	ldr	r3, [r0, #32]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d101      	bne.n	80082d0 <__swsetup_r+0x18>
 80082cc:	f7ff f8a8 	bl	8007420 <__sinit>
 80082d0:	230c      	movs	r3, #12
 80082d2:	5ee2      	ldrsh	r2, [r4, r3]
 80082d4:	0713      	lsls	r3, r2, #28
 80082d6:	d423      	bmi.n	8008320 <__swsetup_r+0x68>
 80082d8:	06d3      	lsls	r3, r2, #27
 80082da:	d407      	bmi.n	80082ec <__swsetup_r+0x34>
 80082dc:	2309      	movs	r3, #9
 80082de:	602b      	str	r3, [r5, #0]
 80082e0:	2340      	movs	r3, #64	@ 0x40
 80082e2:	2001      	movs	r0, #1
 80082e4:	4313      	orrs	r3, r2
 80082e6:	81a3      	strh	r3, [r4, #12]
 80082e8:	4240      	negs	r0, r0
 80082ea:	e03a      	b.n	8008362 <__swsetup_r+0xaa>
 80082ec:	0752      	lsls	r2, r2, #29
 80082ee:	d513      	bpl.n	8008318 <__swsetup_r+0x60>
 80082f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80082f2:	2900      	cmp	r1, #0
 80082f4:	d008      	beq.n	8008308 <__swsetup_r+0x50>
 80082f6:	0023      	movs	r3, r4
 80082f8:	3344      	adds	r3, #68	@ 0x44
 80082fa:	4299      	cmp	r1, r3
 80082fc:	d002      	beq.n	8008304 <__swsetup_r+0x4c>
 80082fe:	0028      	movs	r0, r5
 8008300:	f7ff f9ca 	bl	8007698 <_free_r>
 8008304:	2300      	movs	r3, #0
 8008306:	6363      	str	r3, [r4, #52]	@ 0x34
 8008308:	2224      	movs	r2, #36	@ 0x24
 800830a:	89a3      	ldrh	r3, [r4, #12]
 800830c:	4393      	bics	r3, r2
 800830e:	81a3      	strh	r3, [r4, #12]
 8008310:	2300      	movs	r3, #0
 8008312:	6063      	str	r3, [r4, #4]
 8008314:	6923      	ldr	r3, [r4, #16]
 8008316:	6023      	str	r3, [r4, #0]
 8008318:	2308      	movs	r3, #8
 800831a:	89a2      	ldrh	r2, [r4, #12]
 800831c:	4313      	orrs	r3, r2
 800831e:	81a3      	strh	r3, [r4, #12]
 8008320:	6923      	ldr	r3, [r4, #16]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d10b      	bne.n	800833e <__swsetup_r+0x86>
 8008326:	21a0      	movs	r1, #160	@ 0xa0
 8008328:	2280      	movs	r2, #128	@ 0x80
 800832a:	89a3      	ldrh	r3, [r4, #12]
 800832c:	0089      	lsls	r1, r1, #2
 800832e:	0092      	lsls	r2, r2, #2
 8008330:	400b      	ands	r3, r1
 8008332:	4293      	cmp	r3, r2
 8008334:	d003      	beq.n	800833e <__swsetup_r+0x86>
 8008336:	0021      	movs	r1, r4
 8008338:	0028      	movs	r0, r5
 800833a:	f000 f8a5 	bl	8008488 <__smakebuf_r>
 800833e:	230c      	movs	r3, #12
 8008340:	5ee2      	ldrsh	r2, [r4, r3]
 8008342:	2101      	movs	r1, #1
 8008344:	0013      	movs	r3, r2
 8008346:	400b      	ands	r3, r1
 8008348:	420a      	tst	r2, r1
 800834a:	d00b      	beq.n	8008364 <__swsetup_r+0xac>
 800834c:	2300      	movs	r3, #0
 800834e:	60a3      	str	r3, [r4, #8]
 8008350:	6963      	ldr	r3, [r4, #20]
 8008352:	425b      	negs	r3, r3
 8008354:	61a3      	str	r3, [r4, #24]
 8008356:	2000      	movs	r0, #0
 8008358:	6923      	ldr	r3, [r4, #16]
 800835a:	4283      	cmp	r3, r0
 800835c:	d101      	bne.n	8008362 <__swsetup_r+0xaa>
 800835e:	0613      	lsls	r3, r2, #24
 8008360:	d4be      	bmi.n	80082e0 <__swsetup_r+0x28>
 8008362:	bd70      	pop	{r4, r5, r6, pc}
 8008364:	0791      	lsls	r1, r2, #30
 8008366:	d400      	bmi.n	800836a <__swsetup_r+0xb2>
 8008368:	6963      	ldr	r3, [r4, #20]
 800836a:	60a3      	str	r3, [r4, #8]
 800836c:	e7f3      	b.n	8008356 <__swsetup_r+0x9e>
 800836e:	46c0      	nop			@ (mov r8, r8)
 8008370:	20000018 	.word	0x20000018

08008374 <memmove>:
 8008374:	b510      	push	{r4, lr}
 8008376:	4288      	cmp	r0, r1
 8008378:	d806      	bhi.n	8008388 <memmove+0x14>
 800837a:	2300      	movs	r3, #0
 800837c:	429a      	cmp	r2, r3
 800837e:	d008      	beq.n	8008392 <memmove+0x1e>
 8008380:	5ccc      	ldrb	r4, [r1, r3]
 8008382:	54c4      	strb	r4, [r0, r3]
 8008384:	3301      	adds	r3, #1
 8008386:	e7f9      	b.n	800837c <memmove+0x8>
 8008388:	188b      	adds	r3, r1, r2
 800838a:	4298      	cmp	r0, r3
 800838c:	d2f5      	bcs.n	800837a <memmove+0x6>
 800838e:	3a01      	subs	r2, #1
 8008390:	d200      	bcs.n	8008394 <memmove+0x20>
 8008392:	bd10      	pop	{r4, pc}
 8008394:	5c8b      	ldrb	r3, [r1, r2]
 8008396:	5483      	strb	r3, [r0, r2]
 8008398:	e7f9      	b.n	800838e <memmove+0x1a>
	...

0800839c <_sbrk_r>:
 800839c:	2300      	movs	r3, #0
 800839e:	b570      	push	{r4, r5, r6, lr}
 80083a0:	4d06      	ldr	r5, [pc, #24]	@ (80083bc <_sbrk_r+0x20>)
 80083a2:	0004      	movs	r4, r0
 80083a4:	0008      	movs	r0, r1
 80083a6:	602b      	str	r3, [r5, #0]
 80083a8:	f7fa fcbc 	bl	8002d24 <_sbrk>
 80083ac:	1c43      	adds	r3, r0, #1
 80083ae:	d103      	bne.n	80083b8 <_sbrk_r+0x1c>
 80083b0:	682b      	ldr	r3, [r5, #0]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d000      	beq.n	80083b8 <_sbrk_r+0x1c>
 80083b6:	6023      	str	r3, [r4, #0]
 80083b8:	bd70      	pop	{r4, r5, r6, pc}
 80083ba:	46c0      	nop			@ (mov r8, r8)
 80083bc:	200004a8 	.word	0x200004a8

080083c0 <memchr>:
 80083c0:	b2c9      	uxtb	r1, r1
 80083c2:	1882      	adds	r2, r0, r2
 80083c4:	4290      	cmp	r0, r2
 80083c6:	d101      	bne.n	80083cc <memchr+0xc>
 80083c8:	2000      	movs	r0, #0
 80083ca:	4770      	bx	lr
 80083cc:	7803      	ldrb	r3, [r0, #0]
 80083ce:	428b      	cmp	r3, r1
 80083d0:	d0fb      	beq.n	80083ca <memchr+0xa>
 80083d2:	3001      	adds	r0, #1
 80083d4:	e7f6      	b.n	80083c4 <memchr+0x4>

080083d6 <_realloc_r>:
 80083d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80083d8:	0006      	movs	r6, r0
 80083da:	000c      	movs	r4, r1
 80083dc:	0015      	movs	r5, r2
 80083de:	2900      	cmp	r1, #0
 80083e0:	d105      	bne.n	80083ee <_realloc_r+0x18>
 80083e2:	0011      	movs	r1, r2
 80083e4:	f7ff f9c4 	bl	8007770 <_malloc_r>
 80083e8:	0004      	movs	r4, r0
 80083ea:	0020      	movs	r0, r4
 80083ec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80083ee:	2a00      	cmp	r2, #0
 80083f0:	d103      	bne.n	80083fa <_realloc_r+0x24>
 80083f2:	f7ff f951 	bl	8007698 <_free_r>
 80083f6:	2400      	movs	r4, #0
 80083f8:	e7f7      	b.n	80083ea <_realloc_r+0x14>
 80083fa:	f000 f8ab 	bl	8008554 <_malloc_usable_size_r>
 80083fe:	0007      	movs	r7, r0
 8008400:	4285      	cmp	r5, r0
 8008402:	d802      	bhi.n	800840a <_realloc_r+0x34>
 8008404:	0843      	lsrs	r3, r0, #1
 8008406:	42ab      	cmp	r3, r5
 8008408:	d3ef      	bcc.n	80083ea <_realloc_r+0x14>
 800840a:	0029      	movs	r1, r5
 800840c:	0030      	movs	r0, r6
 800840e:	f7ff f9af 	bl	8007770 <_malloc_r>
 8008412:	9001      	str	r0, [sp, #4]
 8008414:	2800      	cmp	r0, #0
 8008416:	d0ee      	beq.n	80083f6 <_realloc_r+0x20>
 8008418:	002a      	movs	r2, r5
 800841a:	42bd      	cmp	r5, r7
 800841c:	d900      	bls.n	8008420 <_realloc_r+0x4a>
 800841e:	003a      	movs	r2, r7
 8008420:	0021      	movs	r1, r4
 8008422:	9801      	ldr	r0, [sp, #4]
 8008424:	f7ff f92f 	bl	8007686 <memcpy>
 8008428:	0021      	movs	r1, r4
 800842a:	0030      	movs	r0, r6
 800842c:	f7ff f934 	bl	8007698 <_free_r>
 8008430:	9c01      	ldr	r4, [sp, #4]
 8008432:	e7da      	b.n	80083ea <_realloc_r+0x14>

08008434 <__swhatbuf_r>:
 8008434:	b570      	push	{r4, r5, r6, lr}
 8008436:	000e      	movs	r6, r1
 8008438:	001d      	movs	r5, r3
 800843a:	230e      	movs	r3, #14
 800843c:	5ec9      	ldrsh	r1, [r1, r3]
 800843e:	0014      	movs	r4, r2
 8008440:	b096      	sub	sp, #88	@ 0x58
 8008442:	2900      	cmp	r1, #0
 8008444:	da0c      	bge.n	8008460 <__swhatbuf_r+0x2c>
 8008446:	89b2      	ldrh	r2, [r6, #12]
 8008448:	2380      	movs	r3, #128	@ 0x80
 800844a:	0011      	movs	r1, r2
 800844c:	4019      	ands	r1, r3
 800844e:	421a      	tst	r2, r3
 8008450:	d114      	bne.n	800847c <__swhatbuf_r+0x48>
 8008452:	2380      	movs	r3, #128	@ 0x80
 8008454:	00db      	lsls	r3, r3, #3
 8008456:	2000      	movs	r0, #0
 8008458:	6029      	str	r1, [r5, #0]
 800845a:	6023      	str	r3, [r4, #0]
 800845c:	b016      	add	sp, #88	@ 0x58
 800845e:	bd70      	pop	{r4, r5, r6, pc}
 8008460:	466a      	mov	r2, sp
 8008462:	f000 f853 	bl	800850c <_fstat_r>
 8008466:	2800      	cmp	r0, #0
 8008468:	dbed      	blt.n	8008446 <__swhatbuf_r+0x12>
 800846a:	23f0      	movs	r3, #240	@ 0xf0
 800846c:	9901      	ldr	r1, [sp, #4]
 800846e:	021b      	lsls	r3, r3, #8
 8008470:	4019      	ands	r1, r3
 8008472:	4b04      	ldr	r3, [pc, #16]	@ (8008484 <__swhatbuf_r+0x50>)
 8008474:	18c9      	adds	r1, r1, r3
 8008476:	424b      	negs	r3, r1
 8008478:	4159      	adcs	r1, r3
 800847a:	e7ea      	b.n	8008452 <__swhatbuf_r+0x1e>
 800847c:	2100      	movs	r1, #0
 800847e:	2340      	movs	r3, #64	@ 0x40
 8008480:	e7e9      	b.n	8008456 <__swhatbuf_r+0x22>
 8008482:	46c0      	nop			@ (mov r8, r8)
 8008484:	ffffe000 	.word	0xffffe000

08008488 <__smakebuf_r>:
 8008488:	b5f0      	push	{r4, r5, r6, r7, lr}
 800848a:	2602      	movs	r6, #2
 800848c:	898b      	ldrh	r3, [r1, #12]
 800848e:	0005      	movs	r5, r0
 8008490:	000c      	movs	r4, r1
 8008492:	b085      	sub	sp, #20
 8008494:	4233      	tst	r3, r6
 8008496:	d007      	beq.n	80084a8 <__smakebuf_r+0x20>
 8008498:	0023      	movs	r3, r4
 800849a:	3347      	adds	r3, #71	@ 0x47
 800849c:	6023      	str	r3, [r4, #0]
 800849e:	6123      	str	r3, [r4, #16]
 80084a0:	2301      	movs	r3, #1
 80084a2:	6163      	str	r3, [r4, #20]
 80084a4:	b005      	add	sp, #20
 80084a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80084a8:	ab03      	add	r3, sp, #12
 80084aa:	aa02      	add	r2, sp, #8
 80084ac:	f7ff ffc2 	bl	8008434 <__swhatbuf_r>
 80084b0:	9f02      	ldr	r7, [sp, #8]
 80084b2:	9001      	str	r0, [sp, #4]
 80084b4:	0039      	movs	r1, r7
 80084b6:	0028      	movs	r0, r5
 80084b8:	f7ff f95a 	bl	8007770 <_malloc_r>
 80084bc:	2800      	cmp	r0, #0
 80084be:	d108      	bne.n	80084d2 <__smakebuf_r+0x4a>
 80084c0:	220c      	movs	r2, #12
 80084c2:	5ea3      	ldrsh	r3, [r4, r2]
 80084c4:	059a      	lsls	r2, r3, #22
 80084c6:	d4ed      	bmi.n	80084a4 <__smakebuf_r+0x1c>
 80084c8:	2203      	movs	r2, #3
 80084ca:	4393      	bics	r3, r2
 80084cc:	431e      	orrs	r6, r3
 80084ce:	81a6      	strh	r6, [r4, #12]
 80084d0:	e7e2      	b.n	8008498 <__smakebuf_r+0x10>
 80084d2:	2380      	movs	r3, #128	@ 0x80
 80084d4:	89a2      	ldrh	r2, [r4, #12]
 80084d6:	6020      	str	r0, [r4, #0]
 80084d8:	4313      	orrs	r3, r2
 80084da:	81a3      	strh	r3, [r4, #12]
 80084dc:	9b03      	ldr	r3, [sp, #12]
 80084de:	6120      	str	r0, [r4, #16]
 80084e0:	6167      	str	r7, [r4, #20]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d00c      	beq.n	8008500 <__smakebuf_r+0x78>
 80084e6:	0028      	movs	r0, r5
 80084e8:	230e      	movs	r3, #14
 80084ea:	5ee1      	ldrsh	r1, [r4, r3]
 80084ec:	f000 f820 	bl	8008530 <_isatty_r>
 80084f0:	2800      	cmp	r0, #0
 80084f2:	d005      	beq.n	8008500 <__smakebuf_r+0x78>
 80084f4:	2303      	movs	r3, #3
 80084f6:	89a2      	ldrh	r2, [r4, #12]
 80084f8:	439a      	bics	r2, r3
 80084fa:	3b02      	subs	r3, #2
 80084fc:	4313      	orrs	r3, r2
 80084fe:	81a3      	strh	r3, [r4, #12]
 8008500:	89a3      	ldrh	r3, [r4, #12]
 8008502:	9a01      	ldr	r2, [sp, #4]
 8008504:	4313      	orrs	r3, r2
 8008506:	81a3      	strh	r3, [r4, #12]
 8008508:	e7cc      	b.n	80084a4 <__smakebuf_r+0x1c>
	...

0800850c <_fstat_r>:
 800850c:	2300      	movs	r3, #0
 800850e:	b570      	push	{r4, r5, r6, lr}
 8008510:	4d06      	ldr	r5, [pc, #24]	@ (800852c <_fstat_r+0x20>)
 8008512:	0004      	movs	r4, r0
 8008514:	0008      	movs	r0, r1
 8008516:	0011      	movs	r1, r2
 8008518:	602b      	str	r3, [r5, #0]
 800851a:	f7fa fbe1 	bl	8002ce0 <_fstat>
 800851e:	1c43      	adds	r3, r0, #1
 8008520:	d103      	bne.n	800852a <_fstat_r+0x1e>
 8008522:	682b      	ldr	r3, [r5, #0]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d000      	beq.n	800852a <_fstat_r+0x1e>
 8008528:	6023      	str	r3, [r4, #0]
 800852a:	bd70      	pop	{r4, r5, r6, pc}
 800852c:	200004a8 	.word	0x200004a8

08008530 <_isatty_r>:
 8008530:	2300      	movs	r3, #0
 8008532:	b570      	push	{r4, r5, r6, lr}
 8008534:	4d06      	ldr	r5, [pc, #24]	@ (8008550 <_isatty_r+0x20>)
 8008536:	0004      	movs	r4, r0
 8008538:	0008      	movs	r0, r1
 800853a:	602b      	str	r3, [r5, #0]
 800853c:	f7fa fbde 	bl	8002cfc <_isatty>
 8008540:	1c43      	adds	r3, r0, #1
 8008542:	d103      	bne.n	800854c <_isatty_r+0x1c>
 8008544:	682b      	ldr	r3, [r5, #0]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d000      	beq.n	800854c <_isatty_r+0x1c>
 800854a:	6023      	str	r3, [r4, #0]
 800854c:	bd70      	pop	{r4, r5, r6, pc}
 800854e:	46c0      	nop			@ (mov r8, r8)
 8008550:	200004a8 	.word	0x200004a8

08008554 <_malloc_usable_size_r>:
 8008554:	1f0b      	subs	r3, r1, #4
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	1f18      	subs	r0, r3, #4
 800855a:	2b00      	cmp	r3, #0
 800855c:	da01      	bge.n	8008562 <_malloc_usable_size_r+0xe>
 800855e:	580b      	ldr	r3, [r1, r0]
 8008560:	18c0      	adds	r0, r0, r3
 8008562:	4770      	bx	lr

08008564 <_init>:
 8008564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008566:	46c0      	nop			@ (mov r8, r8)
 8008568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800856a:	bc08      	pop	{r3}
 800856c:	469e      	mov	lr, r3
 800856e:	4770      	bx	lr

08008570 <_fini>:
 8008570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008572:	46c0      	nop			@ (mov r8, r8)
 8008574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008576:	bc08      	pop	{r3}
 8008578:	469e      	mov	lr, r3
 800857a:	4770      	bx	lr
